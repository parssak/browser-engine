{"version":3,"sources":["state/editor/EditorContext.tsx","engine/core/Component.ts","engine/components/Mover.ts","engine/components/Transform.ts","engine/core/ComponentManager.ts","engine/core/MaterialManager.ts","engine/core/GeometryManager.ts","engine/core/Entity.ts","engine/core/SceneManager.ts","engine/core/CameraManager.ts","engine/core/EngineContext.ts","state/scene/SceneContext.tsx","state/scripts/ScriptContext.tsx","state/scene/useScene.tsx","state/scripts/useScripts.tsx","state/editor/useEditor.tsx","ui/components/Controls.tsx","ui/components/TreeViewPanel.tsx","ui/base/BrowserEngine.tsx","App.tsx","index.tsx"],"names":["initialValue","EditorContext","createContext","EditorProvider","children","contextValue","renderElement","useRef","Provider","value","Component","entity","_entity","this","props","Mover","name","speed","transform","components","console","debug","position","x","Transform","THREE","rotation","scale","applyMatrix","mesh","setX","setY","y","setZ","z","applyPosition","applyScale","ComponentManager","instance","registerComponent","component","componentType","componentProps","getComponent","Object","entries","forEach","prop","Array","isArray","length","componentInstance","init","error","MaterialManager","type","GeometryManager","Entity","id","mat","getMaterial","material","geometry","getGeometry","initComponents","setComponent","child","SceneManager","isPlaying","_updateComponents","values","update","_scene","_entities","_scenePayload","payload","entityID","entityProps","updateIndex","findIndex","e","resetScene","buildEntities","destroy","remove","sceneConfig","entities","buildEntity","push","add","oc","CameraManager","renderer","antialias","fov","near","far","camera","controls","_setCamera","window","addEventListener","handleResize","scene","setSize","clientWidth","clientHeight","appendChild","domElement","_setControls","_runSceneLoop","setAnimationLoop","innerWidth","innerHeight","time","Update","aspect","updateProjectionMatrix","setPixelRatio","devicePixelRatio","render","updateScene","context","sceneManager","cameraManager","componentManager","materialManager","geometryManager","_renderElement","updateScenePayload","runEditMode","runPlayScene","setup","getScene","runEditScene","setScenePayload","updateEntityPayload","selectedEntityID","setEntities","setSelectedEntityID","setCameraProps","cameraProps","SceneContext","SceneProvider","useState","uuidv4","useMemo","useEffect","find","updateSpecificEntity","scripts","setScripts","ScriptContext","ScriptProvider","useScene","useContext","selectedEntity","createEntity","newEntity","addNewEntity","selectEntity","updateEntity","index","updateEntityParent","newParent","useScripts","loadScript","saveScript","script","createScript","useEditor","isRunning","setIsRunning","scenePayload","current","toggleRun","runPlayMode","ComponentFieldValue","field","updateField","className","onChange","target","Number","ComponentNode","updateComponent","map","fieldName","fieldValue","style","minWidth","Controls","setControls","propFields","updateComponentFields","newControls","onClick","TreeNode","isSelected","stopPropagation","TreeViewPanel","BrowserEngine","gridTemplateColumns","ref","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4a6bf2a.chunk.js","sourcesContent":["import { ReactElement, useRef } from 'react';\nimport { createContext } from 'react';\n\ninterface IEditorContext {\n  renderElement?: React.MutableRefObject<HTMLDivElement | null>;\n};\n\nconst initialValue: IEditorContext = {}\n\nexport const EditorContext = createContext<IEditorContext>(initialValue);\n\nexport const EditorProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const renderElement = useRef<HTMLDivElement>(null)\n  const contextValue = { renderElement };\n\n  return (\n    <EditorContext.Provider value={contextValue}>\n      {children}\n    </EditorContext.Provider>\n  );\n};","import Entity from \"./Entity\";\n\nexport default abstract class Component {\n  _entity: Entity;\n\n  constructor(entity: Entity) {\n    this._entity = entity;\n  }\n\n  init(props: Engine.ComponentProps) {\n  }\n\n  abstract update(): void;\n}\n\n// This is only used for generating the BaseComponentType for internal use, \n// when creating Components, extend the abstract Component class instead.\nclass BaseComponent extends Component {\n  _entity!: Entity;\n\n  init(props: Engine.ComponentProps) { }\n\n  update() { }\n}\n\nexport type BaseComponentType = typeof BaseComponent;","import * as THREE from 'three';\nimport Component from '../core/Component';\nimport Entity from '../core/Entity';\nimport Transform from './Transform';\n\ninterface IMoverProps {\n  speed?: number;\n}\nexport default class Mover extends Component {\n  name = \"mover\";\n  _entity!: Entity;\n  speed: number = 0.1;\n  transform!: Transform;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this._entity = entity;\n  }\n\n  init(props: IMoverProps) {\n    this.speed = props?.speed ?? 0.1;\n    this.transform = this._entity.components['transform'] as Transform;\n  }\n\n  update() {\n    console.debug('updating mover');\n    this.transform.position.x += this.speed;\n  }\n}","import * as THREE from 'three';\nimport Component from '../core/Component';\nimport Entity from '../core/Entity';\ninterface ITransformProps {\n  position?: THREE.Vector3;\n  rotation?: THREE.Euler;\n  scale?: THREE.Vector3;\n}\n\nexport default class Transform extends Component {\n  name = \"transform\";\n  _entity!: Entity;\n\n  public position: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n  public rotation: THREE.Euler = new THREE.Euler(0, 0, 0, 'XYZ');\n  public scale: THREE.Vector3 = new THREE.Vector3(1, 1, 1);\n\n  constructor(entity: Entity) {\n    super(entity);\n    this._entity = entity;\n  }\n\n  init(props?: ITransformProps) {\n    console.debug('called init on transform');\n    this.position = props?.position ?? this.position;\n    this.rotation = props?.rotation ?? this.rotation;\n    this.scale = props?.scale ?? this.scale;\n    this.applyMatrix();\n  }\n\n  private applyPosition() {\n    this._entity.mesh.position.setX(this.position.x);\n    this._entity.mesh.position.setY(this.position.y);\n    this._entity.mesh.position.setZ(this.position.z);\n  }\n\n  private applyRotation() {\n    // TODO: Implement rotation\n  }\n\n  private applyScale() {\n    this._entity.mesh.scale.setX(this.scale.x);\n    this._entity.mesh.scale.setY(this.scale.y);\n    this._entity.mesh.scale.setZ(this.scale.z);\n  }\n\n  private applyMatrix() {\n    console.debug('applying matrix');\n    if (!this._entity){ return; }\n    this.applyPosition();\n    this.applyPosition();\n    this.applyScale();\n  }\n\n  update() {\n    // if (this.scale.x >= 2) {\n    //   this.dir = -1;\n    // } else if (this.scale.x <= 0.2) {\n    //   this.dir = 1;\n    // }\n    // this.scale.x += 0.1 * this.dir;\n    this.applyMatrix();\n  }\n}\n","import * as THREE from 'three';\nimport Mover from '../components/Mover';\nimport Transform from \"../components/Transform\";\nimport Component, { BaseComponentType } from \"./Component\";\nimport Entity from \"./Entity\";\nexport default class ComponentManager {\n  public static instance: ComponentManager;\n  private components: { [key: string]: BaseComponentType } = {};\n  \n  constructor() {\n    if (ComponentManager.instance) return;\n    ComponentManager.instance = this;\n    this.registerComponent('transform', Transform);\n    this.registerComponent('mover', Mover);\n  }\n\n  public registerComponent(name: Engine.ComponentType, component: BaseComponentType): void {\n    this.components[name] = component;\n  };\n\n  private getComponent(name: Engine.ComponentType): BaseComponentType | null {\n    return this.components[name] ?? null;\n  }\n\n  public setComponent(entity: Entity, componentType: Engine.ComponentType, componentProps: Engine.ComponentProps): void {\n    const component = this.getComponent(componentType);\n    if (!component) {\n      console.error(`Component ${componentType} not found`);\n      return;\n    }\n  \n    // Translate vector props \n    Object.entries(componentProps).forEach(([name, prop]) => {\n      if (Array.isArray(prop)) {\n        if (prop.length === 3) {\n          componentProps[name] = new THREE.Vector3(prop[0], prop[1], prop[2]) as any;\n        }\n        else if (prop.length === 2) {\n          componentProps[name] = new THREE.Vector2(prop[0], prop[1]) as any;\n        }\n      }\n    });\n    const componentInstance = new component(entity);\n    componentInstance.init(componentProps);\n    entity.components[componentType] = componentInstance;\n  }\n}","import * as THREE from 'three';\n\nexport default class MaterialManager {\n  public static instance: MaterialManager;\n\n  constructor() {\n    if (MaterialManager.instance) return;\n    MaterialManager.instance = this;\n  }\n\n  getMaterial(type: Engine.MaterialType): THREE.Material {\n    switch (type) {\n      case 'normal':\n        return new THREE.MeshNormalMaterial();\n      case 'basic':\n        return new THREE.MeshBasicMaterial();\n      default:\n        return new THREE.MeshBasicMaterial();\n    }\n  }\n}\n","import * as THREE from 'three';\n\nexport default class GeometryManager {\n  public static instance: GeometryManager;\n\n  constructor() {\n    if (GeometryManager.instance) return;\n    GeometryManager.instance = this;\n  }\n\n  getGeometry(type: Engine.MaterialType): THREE.BufferGeometry {\n    switch (type) {\n      case 'box':\n        return new THREE.BoxBufferGeometry();\n      case 'sphere':\n      default:\n        return new THREE.SphereBufferGeometry();\n    }\n  }\n}","import { v4 as uuidv4 } from 'uuid';\nimport * as THREE from 'three';\nimport Component from './Component';\nimport ComponentManager from './ComponentManager';\nimport context from './EngineContext';\nimport MaterialManager from './MaterialManager';\nimport GeometryManager from './GeometryManager';\nimport SceneManager from './SceneManager';\n\nexport default class Entity {\n  public name: string = \"\";\n  public mesh!: THREE.Mesh;\n  public readonly id: Engine.EntityID;\n  private children: Entity[] = [];\n  components: Record<Engine.ComponentType, Component> = {};\n\n  constructor(props: Engine.EntityProps) {\n    this.id = props.id;\n    this.init(props);\n  }\n\n  init(props: Engine.EntityProps) {\n    const mat = MaterialManager.instance.getMaterial(props.material);\n    const geometry = GeometryManager.instance.getGeometry(props.geometry);\n    this.mesh = new THREE.Mesh(geometry, mat);\n    console.debug('called init');\n    // TODO: New approach to creating children in SceneManager.\n    // props.children.forEach(entityProps => {\n    //   const child: Entity = SceneManager.CreateEntity(entityProps, this);\n    //   this.addChild(child);\n    // });\n\n    // TODO: build components\n    this.initComponents(props.components);\n  }\n\n  initComponents(components: Record<Engine.ComponentType, Engine.ComponentProps>) {\n    Object.entries(components).forEach(([type, props]) => {\n      ComponentManager.instance.setComponent(this, type, props);\n    })\n  }\n\n  addChild(child: Entity) {\n    // TODO: Implement\n  }\n\n  addComponent(type: Engine.ComponentType, componentProps: Engine.ComponentProps) {\n    // TODO: Implement\n  }\n\n  getProps(): Record<Engine.ComponentType, Engine.ComponentProps> {\n    // TODO: Implement\n    return {};\n  }\n\n  destroy() {\n    // TODO: Implement\n\n    // todo: do i need to be doing this?\n    // this.mesh.geometry.dispose();\n  }\n\n  update() {\n    if (SceneManager.isPlaying()) {\n      this._updateComponents();\n    }\n  }\n\n  private _updateComponents() {\n    Object.values(this.components).forEach((component) => component.update())\n  }\n}","import * as THREE from 'three';\nimport Entity from \"./Entity\";\n\nexport default class SceneManager {\n  public static instance: SceneManager;\n  private isPlaying: boolean = false; // If true, in play mode, else in edit mode\n  private _scene = new THREE.Scene();\n  private _entities: Entity[] = [];\n  private _scenePayload: Engine.ScenePayload | undefined;\n\n  constructor() {\n    if (SceneManager.instance) { return; }\n    SceneManager.instance = this;\n  }\n\n  static isPlaying() {\n    return SceneManager.instance.isPlaying;\n  }\n\n  getScene(): THREE.Scene {\n    return this._scene;\n  }\n\n  setScenePayload(payload: Engine.ScenePayload) {\n    this._scenePayload = payload;\n  }\n\n  updateEntityPayload(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    const updateIndex = this._entities.findIndex(e => e.id === entityID);\n    if (updateIndex === -1) return;\n    this._entities[updateIndex].initComponents(entityProps.components);\n  }\n\n  updateScene() {\n    this._entities.forEach(entity => {\n      entity.update();\n    });\n  }\n\n  runPlayScene() {\n    this.isPlaying = true;\n    this.resetScene();\n    this.buildEntities();\n  }\n  \n  runEditScene() {\n    this.isPlaying = false;\n    this.resetScene();\n    this.buildEntities();\n  }\n\n  private resetScene() {\n    this._entities.forEach(entity => {\n      entity.destroy();\n      this._scene.remove(entity.mesh);\n    });\n    // this._scene = new THREE.Scene();\n    this._entities = [];\n  }\n\n  private buildEntities() {\n    if (!this._scenePayload) return;\n    this._scenePayload.sceneConfig.entities.forEach(entityProps => {\n      this.buildEntity(entityProps);\n    });\n  }\n\n  buildEntity(props: Engine.EntityProps): Entity {\n    const entity = new Entity(props);\n    this._entities.push(entity);\n    this._scene.add(entity.mesh);\n    return entity;\n  }\n}","import * as THREE from 'three';\nimport oc from 'three-orbit-controls';\nimport SceneManager from './SceneManager';\nconst OrbitControls = oc(THREE);\n\nexport default class CameraManager {\n  public static instance: CameraManager;\n  private renderer = new THREE.WebGLRenderer({ antialias: true });\n  private renderElement: HTMLElement | undefined;\n  private fov = 45;\n  private near = 0.01;\n  private far = 20000;\n  private camera!: THREE.PerspectiveCamera;\n  private controls: any;\n\n  constructor() {\n    if (CameraManager.instance) return CameraManager.instance;\n    CameraManager.instance = this;\n    this._setCamera();\n    window.addEventListener('resize', () => this.handleResize());\n  }\n\n  setup(renderElement: HTMLElement, scene: THREE.Scene) {\n    this.renderer.setSize(renderElement.clientWidth, renderElement.clientHeight);\n    this.renderElement = renderElement;\n    this.renderElement.appendChild(this.renderer.domElement);\n    this.handleResize();\n    this._setControls();\n    this._runSceneLoop(scene);\n  }\n\n  resetCamera() {\n    this.renderer.setAnimationLoop(null);\n  }\n\n  private _setCamera() {\n    if (!this.renderElement) {\n      this.camera = new THREE.PerspectiveCamera(this.fov, window.innerWidth / window.innerHeight, this.near, this.far);\n      return;\n    }\n  }\n\n  private _runSceneLoop(scene: THREE.Scene) {\n    this.renderer.setAnimationLoop((time: number) => this.Update(scene));\n  }\n\n  private _setControls() {\n    // this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    // this.controls.autoRotate = false;\n    // this.controls.enableDamping = true;\n    // this.controls.dampingFactor = 0.39;\n\n    this.camera.position.z = 50;\n\n    // this.controls.update();\n  }\n\n  handleResize() {\n    if (!this.renderElement) return;\n    this.camera.aspect = this.renderElement.clientWidth / this.renderElement.clientHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.renderElement.clientWidth, this.renderElement.clientHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n  }\n\n  Update(scene: THREE.Scene) {\n    // this.controls.update();\n    this.renderer.render(scene, this.camera);\n    SceneManager.instance.updateScene();\n  }\n}","import CameraManager from \"./CameraManager\";\nimport ComponentManager from \"./ComponentManager\";\nimport GeometryManager from \"./GeometryManager\";\nimport MaterialManager from \"./MaterialManager\";\nimport SceneManager from \"./SceneManager\";\n\nclass EngineContext {\n  sceneManager: SceneManager;\n  cameraManager: CameraManager;\n  componentManager: ComponentManager;\n  materialManager: MaterialManager;\n  geometryManager: GeometryManager;\n  private _renderElement!: HTMLElement;\n\n  constructor() {\n    this.sceneManager = new SceneManager();\n    this.cameraManager = new CameraManager();\n    this.componentManager = new ComponentManager();\n    this.materialManager = new MaterialManager();\n    this.geometryManager = new GeometryManager();\n  }\n\n  init(renderElement: HTMLElement, payload?: Engine.ScenePayload) {\n    this._renderElement = renderElement;\n    if (payload) this.updateScenePayload(payload);\n    this.runEditMode();\n  }\n\n  runPlayMode() {\n    this.sceneManager.runPlayScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  runEditMode() {\n    this.sceneManager.runEditScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  updateScenePayload(payload: Engine.ScenePayload) {\n    this.sceneManager.setScenePayload(payload);\n  }\n\n  updateSpecificEntity(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    this.sceneManager.updateEntityPayload(entityID, entityProps);\n  }\n\n  addNewEntity(entity: Engine.EntityProps) {\n    this.sceneManager.buildEntity(entity);\n\n  }\n\n  isPlaying(): boolean {\n    return SceneManager.isPlaying() ?? false\n  }\n}\n\nconst context = new EngineContext();\n\nexport default context;","import * as THREE from 'three';\nimport { ReactElement, useEffect, useMemo } from 'react';\nimport { createContext } from 'react';\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport context from '../../engine/core/EngineContext';\n\ninterface ISceneContext {\n  sceneConfig: Engine.SceneConfig;\n  setEntities: (props: Engine.EntityProps[]) => void;\n  selectedEntityID: string | null;\n  setSelectedEntityID: (entityID: string | null) => void;\n  setCameraProps: (cameraProps: Engine.CameraProps) => void;\n};\n\nconst initialValue = {\n  sceneConfig: {\n    entities: [] as Engine.EntityProps[],\n    camera: {\n      position: new THREE.Vector3(),\n      fov: 70,\n      near: 0.1,\n      far: 1000,\n      controls: \"orbit\" as Engine.ControlType\n    }\n  },\n  selectedEntityID: null,\n  setEntities: (entities: Engine.EntityProps[]) => { },\n  setSelectedEntityID: (entityID: string | null) => { },\n  setCameraProps: (cameraProps: Engine.CameraProps) => { }\n};\n\nexport const SceneContext = createContext<ISceneContext>(initialValue);\n\nexport const SceneProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [cameraProps, setCameraProps] = useState<Engine.CameraProps>({\n    position: new THREE.Vector3(),\n    fov: 70,\n    near: 0.1,\n    far: 1000,\n    controls: \"orbit\" as Engine.ControlType\n  });\n\n  const [entities, setEntities] = useState<Engine.EntityProps[]>([\n    {\n      id: uuidv4(),\n      name: \"Entity A\",\n      material: 'normal',\n      geometry: 'box',\n      children: [],\n      components: {\n        \"transform\": {\n          position: {x: 3, y: 0.2, z: 1},\n          rotation: {x: 3, y: 3, z: 3},\n          scale: {x: 2, y: 1, z: 1},\n        },\n      }\n    },\n  ])\n  const [selectedEntityID, setSelectedEntityID] = useState<string | null>(null);\n\n  const sceneConfig = useMemo(() => (\n    {\n      entities,\n      camera: cameraProps\n    }\n  ), [entities, cameraProps]);\n\n  useEffect(() => {\n    if (selectedEntityID) {\n      const entityProps = entities.find(e => e.id === selectedEntityID);\n      if (!entityProps) return;\n      context.updateSpecificEntity(selectedEntityID, entityProps);\n    }\n  }, [sceneConfig])\n\n  const contextValue = {\n    sceneConfig,\n    selectedEntityID,\n    setEntities,\n    setCameraProps,\n    setSelectedEntityID\n  }\n  return (\n    <SceneContext.Provider value={contextValue}>\n      {children}\n    </SceneContext.Provider>\n  );\n}","import { ReactElement, useState } from 'react';\nimport { createContext } from 'react';\n\ninterface IScriptContext {\n  scripts: Engine.Script[];\n  setScripts: (scripts: Engine.Script[]) => void;\n};\n\nconst initialValue: IScriptContext = {\n  scripts: [],\n  setScripts: (scripts: Engine.Script[]) => { }\n}\n\nexport const ScriptContext = createContext<IScriptContext>(initialValue);\n\nexport const ScriptProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [scripts, setScripts] = useState<Engine.Script[]>([]);\n  const contextValue = { scripts, setScripts };\n  \n  return (\n    <ScriptContext.Provider value={contextValue}>\n      {children}\n    </ScriptContext.Provider>\n  );\n};","import { useContext, useEffect, useMemo} from \"react\";\nimport { SceneContext } from \"./SceneContext\";\nimport { v4 as uuidv4 } from 'uuid'\nimport context from \"../../engine/core/EngineContext\";\n\nconst useScene = () => {\n  const { sceneConfig, setEntities, selectedEntityID, setSelectedEntityID } = useContext(SceneContext);\n\n\n  const selectEntity = (id: Engine.EntityID) => {\n    if (id === selectedEntityID) {\n      setSelectedEntityID('')\n      return;\n    }\n    setSelectedEntityID(id);\n  };\n\n  const selectedEntity: Engine.EntityProps | null = useMemo(() => {\n    return sceneConfig.entities.find(e => e.id === selectedEntityID) ?? null;\n  }, [sceneConfig, selectedEntityID]);\n\n\n  const updateEntity = (entity: Engine.EntityProps) => {\n    const index = sceneConfig.entities.findIndex(e => e.id === entity.id);\n    if (index === -1) {\n      console.error(`Couldn't find ${entity.id} in sceneConfig.entities`);\n    };\n    sceneConfig.entities[index] = entity;\n    setEntities([...sceneConfig.entities]);\n  }\n\n  const updateEntityParent = (child: Engine.EntityID, newParent: Engine.EntityID | null) => {\n    // TODO: Implement this\n  }\n\n  const createEntity = () => {\n    const newEntity: Engine.EntityProps = {\n      id: uuidv4(),\n      name: \"New Entity\",\n      geometry: 'box',\n      material: 'normal',\n      children: [],\n      components: {\n        transform: {\n          position: {x: 0, y: 0, z: 0},\n          rotation: { x: 0, y: 0, z: 0 },\n          scale: { x: 1, y: 1, z: 1 },\n        }\n      },\n    }\n    setEntities([...sceneConfig.entities, newEntity]);\n    context.addNewEntity(newEntity);\n  }\n\n  return {\n    sceneConfig,\n    selectedEntity, \n    createEntity, \n    selectEntity,\n    updateEntity,\n    updateEntityParent,\n  };\n}\n\nexport default useScene;","import { useContext } from \"react\";\nimport { ScriptContext } from \"./ScriptContext\";\n\nconst useScripts = () => {\n  const { scripts, setScripts } = useContext(ScriptContext);\n\n  const loadScript = (name: string) => {\n    // TODO: implement this\n  };\n  const saveScript = (script: Engine.Script) => {\n    // TODO: implement this\n  };\n  const createScript = (name: string) => {\n    // TODO: implement this\n  };\n\n  return {\n    scripts,\n    setScripts,\n    loadScript,\n    saveScript,\n    createScript\n  };\n}\n\nexport default useScripts;","import { useContext, useEffect, useMemo, useState } from \"react\";\nimport context from \"../../engine/core/EngineContext\";\nimport SceneManager from \"../../engine/core/SceneManager\";\nimport useScene from \"../scene/useScene\";\nimport useScripts from \"../scripts/useScripts\";\nimport { EditorContext } from \"./EditorContext\";\n\nconst useEditor = () => {\n  const { scripts } = useScripts();\n  const { sceneConfig } = useScene();\n  const { renderElement } = useContext(EditorContext);\n  const [isRunning, setIsRunning] = useState(context.isPlaying());\n\n  const scenePayload = useMemo(() => ({ sceneConfig, scripts }), [sceneConfig, scripts]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => init(), [renderElement]);\n\n  const init = () => {\n    if (!renderElement || !renderElement.current || !scenePayload) { return; }\n    context.init(renderElement.current, scenePayload);\n  }\n\n  useEffect(() => {\n    context.updateScenePayload(scenePayload);\n  }, [scenePayload])\n\n  const toggleRun = () => {\n    if (!renderElement || !renderElement.current) { return; }\n    if (SceneManager.isPlaying()) {\n      setIsRunning(false);\n      context.runEditMode();\n      return;\n    }\n    context.runPlayMode();\n    setIsRunning(true);\n  };\n\n  return {\n    renderElement,\n    isRunning,\n    toggleRun\n  };\n}\n\nexport default useEditor;","import { useState } from 'react';\nimport { useEffect } from 'react';\nimport { generateComponentObjectFromValues } from '../../state/scene/scene.utils';\nimport useScene from '../../state/scene/useScene';\n\ninterface ComponentFieldValueProps {\n  field: Engine.ComponentPropType;\n  updateField: (field: Engine.ComponentPropType) => void;\n}\n\nconst ComponentFieldValue = ({ field, updateField }: ComponentFieldValueProps): React.ReactElement => {\n\n  const handleUpdateField = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (typeof field === 'number') {\n      // if (Number.isNaN(Number(e.target.value))) {\n      // return;\n      // }\n      updateField(Number(e.target.value));\n      // todo\n      return;\n    }\n\n    if (typeof field === 'string') {\n      updateField(e.target.value);\n    }\n\n  }\n\n\n  if (typeof field === 'number' || typeof field === 'string') return (\n    <div className=\"bg-gray-700 text-white px-1  w-max\">\n      <input\n        type={typeof field === 'string' ? 'string' : 'number'}\n        value={typeof field === 'number' ? field : field}\n        onChange={handleUpdateField}\n        className=\"bg-gray-700 w-min font-mono text-xs\"\n      />\n    </div>\n  );\n\n  if (Array.isArray(field)) return (<div>array field</div>);\n\n  return (\n    <div className=\"bg-gray-700 text-white px-2 grid grid-cols-3 gap-5\">\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">x:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.x}\n          onChange={e => updateField({ x: Number(e.target.value), y: field?.y ?? 0, z: field?.z ?? 0 })}\n          className=\"bg-gray-700 w-min font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">y:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.y}\n          onChange={e => updateField({ x: field?.x ?? 0, y: Number(e.target.value), z: field?.z ?? 0 })}\n          className=\"bg-gray-700 w-min font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">z:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.z}\n          onChange={e => updateField({ x: field?.x ?? 0, y: field?.y ?? 0, z: Number(e.target.value) })}\n          className=\"bg-gray-700 w-min font-mono text-xs\"\n        />\n      </pre>\n    </div>\n  )\n}\n\ninterface ComponentNodeProps {\n  componentType: Engine.ComponentType;\n  componentProps: Engine.ComponentProps;\n  updateComponent: (type: Engine.ComponentType, field: string, value: Engine.ComponentPropType) => void;\n}\n\nconst ComponentNode = ({\n  componentType,\n  componentProps,\n  updateComponent\n}: ComponentNodeProps): React.ReactElement => {\n\n  return (\n    <div className=\"bg-gray-800 text-white p-2\">\n      <h3 className=\"font-semibold text-gray-300 text-sm mb-2\">{componentType}</h3>\n      {\n        Object.entries(componentProps).map(([fieldName, fieldValue]) => (\n          <div key={fieldName} className=\"flex space-x-2\">\n            <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>{fieldName}</p>\n            <ComponentFieldValue field={fieldValue} updateField={e => updateComponent(componentType, fieldName, e)} />\n          </div>\n        ))\n      }\n    </div>\n  )\n}\n\nexport default function Controls() {\n  const { selectedEntity, updateEntity, sceneConfig } = useScene();\n\n  // utils\n  // const getComponentPropName = (type: Engine.ComponentType, propName: string): Engine.CombinedComponentPropName => `${type}--${propName}`\n\n  // const getControls = () => {\n  //   console.debug('getControls()');\n  //   if (!selectedEntity) return {};\n\n  //   const { components } = selectedEntity;\n\n  //   const componentControls = Object.entries(components).map(([type, props]) => {\n  //     const folderValue =\n  //       Object.fromEntries(\n  //         Object.entries(props)\n  //           .map(([propName, propValue]) => [propName, { value: propValue }]\n  //           )\n  //       );\n  //     return [type, folder(folderValue as any)]\n  //   });\n  //   return Object.fromEntries(componentControls);\n  // }\n\n  const [controls, setControls] = useState<Record<Engine.ComponentType, Engine.ComponentProps>>({});\n\n  useEffect(() => {\n    // * Handles populating all correct value fields when selecting entity\n    const updateComponentFields = (entity: Engine.EntityProps) => {\n      const propFields: Record<Engine.ComponentType, Engine.ComponentProps> = {};\n      Object.entries(entity.components).forEach(([type, props]) => {\n        propFields[type] = props;\n      });\n      setControls({ ...propFields } as any);\n    }\n\n    if (selectedEntity) updateComponentFields(selectedEntity);\n  }, [selectedEntity, sceneConfig]);\n\n  // Handles updating the entity when pressing save\n  // const saveEntityChanges = () => {\n  //   if (!selectedEntity) return;\n  //   const updatedComponents = generateComponentObjectFromValues(controls);\n  //   selectedEntity.components = updatedComponents;\n  //   updateEntity({ ...selectedEntity });\n  // }\n\n  const addComponent = () => {\n    if (!selectedEntity) return;\n    // TODO: make this feature fledged later\n    const newComponentName = 'mover';\n    const newComponentProps: Engine.ComponentProps = {\n      'speed': 0.2\n    }\n    selectedEntity.components[newComponentName] = newComponentProps;\n    updateEntity(selectedEntity);\n  }\n\n  const updateComponent = (type: Engine.ComponentType, field: string, value: Engine.ComponentPropType) => {\n    const newControls = { ...controls };\n    newControls[type][field] = value;\n    setControls(newControls);\n    if (selectedEntity) {\n      selectedEntity.components = newControls;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  return (\n    <div className=\"bg-gray-900 h-full flex flex-col space-y-1\">\n      {\n        Object.entries(controls).map(([type, props]) =>\n          <ComponentNode\n            componentType={type}\n            componentProps={props}\n            key={type}\n            updateComponent={updateComponent}\n          />\n        )\n      }\n      {\n        selectedEntity && (\n          <div className=\"space-y-1\">\n            <button\n              className=\"block mx-auto mt-12 py-2 px-4 md:w-48  rounded-md bg-indigo-100 opacity-60 transition hover:opacity-100 hover:bg-indigo-200 capitalize\"\n              onClick={addComponent}>Add component\n            </button>\n            {/* <button\n              className=\"block mx-auto mt-12 py-2 px-4 md:w-48 rounded-md bg-indigo-100 opacity-60 transition hover:opacity-100 hover:bg-indigo-200 capitalize\"\n              onClick={saveEntityChanges}>Save Changes\n            </button> */}\n          </div>\n        )\n      }\n    </div>\n  );\n}\n","import React, { useMemo, ReactElement } from 'react';\nimport useScene from '../../state/scene/useScene';\n\n// TODO: Render children\ninterface Props {\n  entity: Engine.EntityProps;\n}\n\nfunction TreeNode({ entity }: Props): ReactElement {\n  const { selectedEntity, selectEntity } = useScene();\n\n  const isSelected = useMemo(() => selectedEntity?.id === entity.id, [selectedEntity, entity.id]);\n  \n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    selectEntity(entity.id);\n  }\n\n  return (\n    <div\n      className={`\n    p-2\n    rounded-md\n    transition\n    cursor-pointer\n    select-none\n    ${isSelected ? 'hover:bg-indigo-500' : 'hover:bg-indigo-400'}\n    ${isSelected && 'bg-indigo-300'}`} onClick={handleClick}>\n      <h1>{entity?.name ?? '__ENTITY__'}</h1>\n      {/* {entity.children.map(child => <TreeNode key={child.id} entity={child}/>)} */}\n    </div>\n  )\n\n}\n\nexport default function TreeViewPanel(): ReactElement {\n  const { sceneConfig } = useScene();\n  return (\n    <div className=\"bg-indigo-200 p-1.5 space-y-1\">\n      {\n        sceneConfig.entities.map(entity =>\n          <TreeNode\n            key={entity.id}\n            entity={entity}\n          />\n        )\n      }\n    </div>\n  )\n}\n","import { ReactElement } from 'react'\nimport useEditor from '../../state/editor/useEditor'\nimport useScene from '../../state/scene/useScene'\nimport Controls from '../components/Controls'\nimport TreeViewPanel from '../components/TreeViewPanel'\n\nexport default function BrowserEngine(): ReactElement {\n  const { createEntity, selectedEntity } = useScene()\n  const { renderElement, toggleRun, isRunning } = useEditor()\n\n  return (\n    <main className=\"w-screen h-screen overflow-hidden\">\n      <div className={`h-2 transition bg-red-400 ${isRunning && 'bg-green-400'}`}></div>\n      <nav className=\"bg-gray-900 p-2 space-x-2\">\n        <button onClick={toggleRun} className=\"p-2 bg-gray-700 rounded-md px-3 transition hover:bg-gray-600\">{isRunning ? 'Stop' : 'Run'} Scene</button>\n        <button onClick={createEntity} className=\"p-2 bg-gray-700 rounded-md px-3 transition hover:bg-gray-600\">Add Entity</button>\n      </nav>\n      <section className=\"w-full h-full grid\" style={{ gridTemplateColumns: '1fr 17rem' }}>\n        {renderElement && (<div className=\"bg-gray-600\" id=\"scene\" ref={renderElement} />)}\n        <div className=\"grid grid-rows-3 gap-0 5\">\n          <TreeViewPanel />\n          <div className=\"row-span-2\">\n            <Controls key={selectedEntity?.id ?? 'controls'} />\n          </div>\n        </div>\n      </section>\n    </main>\n  )\n}\n","import { EditorProvider } from \"./state/editor/EditorContext\";\nimport { SceneProvider } from \"./state/scene/SceneContext\";\nimport { ScriptProvider } from \"./state/scripts/ScriptContext\";\nimport BrowserEngine from \"./ui/base/BrowserEngine\";\n\nfunction App() {\n  return (\n    <SceneProvider>\n      <ScriptProvider>\n        <EditorProvider>\n          <BrowserEngine />\n        </EditorProvider>\n      </ScriptProvider>\n    </SceneProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}