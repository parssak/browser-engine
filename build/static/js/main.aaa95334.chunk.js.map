{"version":3,"sources":["state/editor/EditorContext.tsx","state/scene/SceneContext.tsx","state/scripts/ScriptContext.tsx","engine/core/CameraManager.ts","engine/core/Component.ts","engine/components/Transform.ts","engine/core/ComponentManager.ts","engine/core/Entity.ts","engine/core/SceneManager.ts","state/scene/useScene.tsx","state/scripts/useScripts.tsx","state/editor/useEditor.tsx","ui/components/Controls.tsx","utils/index.ts","state/scene/scene.utils.ts","ui/components/TreeViewPanel.tsx","ui/base/BrowserEngine.tsx","App.tsx","index.tsx"],"names":["initialValue","EditorContext","createContext","EditorProvider","children","contextValue","renderElement","useRef","Provider","value","sceneConfig","entities","camera","position","THREE","fov","near","far","controls","selectedEntityID","setEntities","setSelectedEntityID","entityID","setCameraProps","cameraProps","SceneContext","SceneProvider","useState","id","uuidv4","name","material","geometry","components","rotation","scale","scripts","setScripts","ScriptContext","ScriptProvider","OrbitControls","oc","CameraManager","renderer","antialias","instance","this","_setCamera","window","addEventListener","handleResize","scene","setSize","clientWidth","clientHeight","appendChild","domElement","_setControls","_runSceneLoop","setAnimationLoop","innerWidth","innerHeight","time","Update","autoRotate","enableDamping","dampingFactor","z","update","aspect","updateProjectionMatrix","setPixelRatio","devicePixelRatio","render","SceneManager","UpdateScene","Component","_entity","entity","props","Transform","console","debug","mesh","setX","x","setY","y","setZ","ComponentManager","registerComponent","component","componentType","componentProps","getComponent","Object","entries","forEach","prop","Array","isArray","length","componentInstance","init","error","Entity","_id","mat","_initComponents","type","setComponent","child","isRunning","_updateComponents","values","parent","addChild","_entities","push","_scene","add","cameraManager","componentManager","_renderElement","setup","scenePayload","ResetScene","entityProps","CreateEntity","resetCamera","useScene","useContext","selectedEntity","useMemo","find","e","createEntity","newEntity","selectEntity","updateEntity","index","findIndex","updateEntityParent","newParent","useScripts","loadScript","saveScript","script","createScript","useEditor","setIsRunning","useEffect","current","Initialize","toggleRun","Stop","payload","Run","Controls","getComponentPropName","propName","useControls","componentControls","map","folderValue","fromEntries","propValue","label","folder","set","flattenedPropFields","updateComponentFields","input","updatedComponents","componentObject","entry","split","typeName","propFieldName","generateComponentObjectFromValues","JSON","stringify","parse","handleEntityUpdate","className","fill","flat","titleBar","TreeNode","isSelected","onClick","stopPropagation","TreeViewPanel","BrowserEngine","style","gridTemplateColumns","ref","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaa95334.chunk.js","sourcesContent":["import { ReactElement, useRef } from 'react';\nimport { createContext } from 'react';\n\ninterface IEditorContext {\n  renderElement?: React.MutableRefObject<HTMLDivElement | null>;\n};\n\nconst initialValue: IEditorContext = {}\n\nexport const EditorContext = createContext<IEditorContext>(initialValue);\n\nexport const EditorProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const renderElement = useRef<HTMLDivElement>(null)\n  const contextValue = { renderElement };\n\n  return (\n    <EditorContext.Provider value={contextValue}>\n      {children}\n    </EditorContext.Provider>\n  );\n};","import * as THREE from 'three';\nimport { ReactElement } from 'react';\nimport { createContext } from 'react';\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface ISceneContext {\n  sceneConfig: Engine.SceneConfig;\n  setEntities: (props: Engine.EntityProps[]) => void;\n  selectedEntityID: string | null;\n  setSelectedEntityID: (entityID: string | null) => void;\n  setCameraProps: (cameraProps: Engine.CameraProps) => void;\n};\n\nconst initialValue = {\n  sceneConfig: {\n    entities: [] as Engine.EntityProps[],\n    camera: {\n      position: new THREE.Vector3(),\n      fov: 70,\n      near: 0.1,\n      far: 1000,\n      controls: \"orbit\" as Engine.ControlType\n    }\n  },\n  selectedEntityID: null,\n  setEntities: (entities: Engine.EntityProps[]) => { },\n  setSelectedEntityID: (entityID: string | null) => { },\n  setCameraProps: (cameraProps: Engine.CameraProps) => { }\n};\n\nexport const SceneContext = createContext<ISceneContext>(initialValue);\n\nexport const SceneProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [cameraProps, setCameraProps] = useState<Engine.CameraProps>({\n    position: new THREE.Vector3(),\n    fov: 70,\n    near: 0.1,\n    far: 1000,\n    controls: \"orbit\" as Engine.ControlType\n  });\n\n  const [entities, setEntities] = useState<Engine.EntityProps[]>([\n    {\n      id: uuidv4(),\n      name: \"Entity A\",\n      material: new THREE.MeshNormalMaterial(),\n      geometry: new THREE.BoxBufferGeometry(),\n      children: [],\n      components: {\n        \"transform\": {\n          position: [0, 0, 0],\n          rotation: [0, 0, 0],\n          scale: [1, 1, 1],\n        },\n        // \"custom_component_1\": {\n        //   speed: 12\n        // }\n      }\n    },\n    // {\n    //   id: uuidv4(),\n    //   name: \"Entity B\",\n    //   material: new THREE.MeshNormalMaterial(),\n    //   geometry: new THREE.BoxBufferGeometry(),\n    //   children: [],\n    //   components: {\n    //     \"transform\": {\n    //       position: [10, 10, 10],\n    //       rotation: [0, 0, 0],\n    //       scale: [0, 0, 0],\n    //     },\n    //   }\n    // }\n  ])\n  const [selectedEntityID, setSelectedEntityID] = useState<string | null>(null);\n\n  const contextValue = {\n    sceneConfig: { entities, camera: cameraProps },\n    setEntities,\n    setCameraProps,\n    selectedEntityID,\n    setSelectedEntityID\n  }\n  return (\n    <SceneContext.Provider value={contextValue}>\n      {children}\n    </SceneContext.Provider>\n  );\n}","import { ReactElement, useState } from 'react';\nimport { createContext } from 'react';\n\ninterface IScriptContext {\n  scripts: Engine.Script[];\n  setScripts: (scripts: Engine.Script[]) => void;\n};\n\nconst initialValue: IScriptContext = {\n  scripts: [],\n  setScripts: (scripts: Engine.Script[]) => { }\n}\n\nexport const ScriptContext = createContext<IScriptContext>(initialValue);\n\nexport const ScriptProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [scripts, setScripts] = useState<Engine.Script[]>([]);\n  const contextValue = { scripts, setScripts };\n  \n  return (\n    <ScriptContext.Provider value={contextValue}>\n      {children}\n    </ScriptContext.Provider>\n  );\n};","import * as THREE from 'three';\nimport oc from 'three-orbit-controls';\nimport SceneManager from './SceneManager';\nconst OrbitControls = oc(THREE);\n\nexport default class CameraManager {\n  public static instance: CameraManager;\n  private renderer = new THREE.WebGLRenderer({ antialias: true });\n  private renderElement: HTMLElement | undefined;\n  private fov = 45;\n  private near = 0.01;\n  private far = 20000;\n  private camera!: THREE.PerspectiveCamera;\n  private controls: any;\n\n  constructor() {\n    if (CameraManager.instance) return CameraManager.instance;\n    CameraManager.instance = this;\n    this._setCamera();\n    window.addEventListener('resize', () => this.handleResize());\n  }\n\n  setup(renderElement: HTMLElement, scene: THREE.Scene) {\n    this.renderer.setSize(renderElement.clientWidth, renderElement.clientHeight);\n    this.renderElement = renderElement;\n    this.renderElement.appendChild(this.renderer.domElement);\n    this.handleResize();\n    this._setControls();\n    this._runSceneLoop(scene);\n  }\n\n  resetCamera() {\n    this.renderer.setAnimationLoop(null);\n  }\n\n  private _setCamera() {\n    if (!this.renderElement) {\n      this.camera = new THREE.PerspectiveCamera(this.fov, window.innerWidth / window.innerHeight, this.near, this.far);\n      return;\n    }\n  }\n\n  private _runSceneLoop(scene: THREE.Scene) {\n    this.renderer.setAnimationLoop(time => this.Update(scene));\n  }\n\n  private _setControls() {\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.controls.autoRotate = false;\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.39;\n    this.camera.position.z = 200;\n\n    this.controls.update();\n  }\n\n  handleResize() {\n    if (!this.renderElement) return;\n    this.camera.aspect = this.renderElement.clientWidth / this.renderElement.clientHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.renderElement.clientWidth, this.renderElement.clientHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n  }\n\n  Update(scene: THREE.Scene) {\n    this.controls.update();\n    this.renderer.render(scene, this.camera);\n    SceneManager.UpdateScene();\n  }\n}","import Entity from \"./Entity\";\n\nexport default abstract class Component {\n  _entity!: Entity;\n\n  init(entity: Entity, props: Engine.ComponentProps) {\n    this._entity = entity;\n  }\n\n  abstract Update(): void;\n}\n\n// This is only used for generating the BaseComponentType for internal use, \n// when creating Components, extend the abstract Component class instead.\nclass BaseComponent extends Component {\n  _entity!: Entity;\n\n  init(entity: Entity, props: Engine.ComponentProps) {\n    this._entity = entity;\n  }\n\n  Update() { }\n}\n\nexport type BaseComponentType = typeof BaseComponent;","import * as THREE from 'three';\nimport Component from '../core/Component';\nimport Entity from '../core/Entity';\ninterface ITransformProps {\n  position?: THREE.Vector3;\n  rotation?: THREE.Euler;\n  scale?: THREE.Vector3;\n}\n\nexport default class Transform extends Component {\n  name = \"transform\";\n  _entity!: Entity;\n\n  public position: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n  public rotation: THREE.Euler = new THREE.Euler(0, 0, 0, 'XYZ');\n  public scale: THREE.Vector3 = new THREE.Vector3(1, 1, 1);\n\n  init(entity: Entity, props?: ITransformProps) {\n    console.debug('created new transform');\n    this._entity = entity;\n    this.position = props?.position ?? this.position;\n    this.rotation = props?.rotation ?? this.rotation;\n    this.scale = props?.scale ?? this.scale;\n  }\n\n  Update() {\n    if (!this._entity) return;\n    console.debug('transform update');\n    // Position\n    this._entity.mesh.position.setX(this.position.x);\n    this._entity.mesh.position.setY(this.position.y);\n    this._entity.mesh.position.setZ(this.position.z);\n\n    // Rotation\n    // this._entity.mesh.rotation.x = this.rotation.x;\n    // this._entity.mesh.rotation.y = this.rotation.y;\n    // this._entity.mesh.rotation.z = this.rotation.z;\n\n    // Scale\n    // this._entity.mesh.scale.setX(this.scale.x);\n    // this._entity.mesh.scale.setY(this.scale.y);\n    // this._entity.mesh.scale.setZ(this.scale.z);\n  }\n}\n","import * as THREE from 'three';\nimport Transform from \"../components/Transform\";\nimport Component, { BaseComponentType } from \"./Component\";\nimport Entity from \"./Entity\";\nexport default class ComponentManager {\n  public static instance: ComponentManager;\n  private components: { [key: string]: BaseComponentType } = {};\n  \n  constructor() {\n    if (ComponentManager.instance) return;\n    ComponentManager.instance = this;\n    this.registerComponent('transform', Transform);\n  }\n\n  public registerComponent(name: Engine.ComponentType, component: BaseComponentType): void {\n    this.components[name] = component;\n  };\n\n  private getComponent(name: Engine.ComponentType): BaseComponentType | null {\n    return this.components[name] ?? null;\n  }\n\n  public setComponent(entity: Entity, componentType: Engine.ComponentType, componentProps: Engine.ComponentProps): void {\n    const component = this.getComponent(componentType);\n    if (!component) {\n      console.error(`Component ${componentType} not found`);\n      return;\n    }\n  \n    // Translate vector props \n    Object.entries(componentProps).forEach(([name, prop]) => {\n      if (Array.isArray(prop)) {\n        if (prop.length === 3) {\n          componentProps[name] = new THREE.Vector3(prop[0], prop[1], prop[2]) as any;\n        }\n        else if (prop.length === 2) {\n          componentProps[name] = new THREE.Vector2(prop[0], prop[1]) as any;\n        }\n      }\n    });\n    console.debug(componentProps);\n    const componentInstance = new component();\n    componentInstance.init(entity, componentProps);\n    entity.components[componentType] = componentInstance;\n  }\n}","import { v4 as uuidv4 } from 'uuid';\nimport * as THREE from 'three';\nimport SceneManager from './SceneManager';\nimport Component from './Component';\nimport ComponentManager from './ComponentManager';\n\nexport default class Entity {\n  public name: string = \"\";\n  public mesh: THREE.Mesh;\n  private _id;\n  private children: Entity[] = [];\n  components: Record<Engine.ComponentType, Component> = {};\n\n  constructor(props: Engine.EntityProps) {\n    const mat = props.material ?? new THREE.MeshBasicMaterial();\n    const geometry = props.geometry ?? new THREE.BoxBufferGeometry();\n    this.mesh = new THREE.Mesh(geometry, mat);\n    this._id = props.id;\n\n    // TODO: New approach to creating children in SceneManager.\n    // props.children.forEach(entityProps => {\n    //   const child: Entity = SceneManager.CreateEntity(entityProps, this);\n    //   this.addChild(child);\n    // });\n\n    // TODO: build components\n    this._initComponents(props.components);\n  }\n\n  private _initComponents(components: Record<Engine.ComponentType, Engine.ComponentProps>) {\n    console.debug('Called init components:', components);\n    Object.entries(components).forEach(([type, props]) => {\n      ComponentManager.instance.setComponent(this, type, props);\n    })\n  }\n\n  addChild(child: Entity) {\n    // TODO: Implement\n  }\n\n  addComponent(type: Engine.ComponentType, componentProps: Engine.ComponentProps) {\n    // TODO: Implement\n  }\n\n  getProps(): Record<Engine.ComponentType, Engine.ComponentProps> {\n    // TODO: Implement\n    return {};\n  }\n\n  Update() {\n    // TODO: Implement\n    console.debug('calling update on entity', this._id);\n    // TODO: If SceneManager.isRunning, call Update() for each component\n    if (SceneManager.isRunning) {\n      this._updateComponents();\n    }\n  }\n\n  private _updateComponents() {\n    Object.values(this.components).forEach((component) => component.Update())\n  }\n}","import * as THREE from 'three';\nimport CameraManager from \"./CameraManager\";\nimport Component from './Component';\nimport ComponentManager from './ComponentManager';\nimport Entity from \"./Entity\";\n\nexport default class SceneManager {\n  public static instance: SceneManager;\n  public static isRunning: boolean = false;\n  \n  private static _scene = new THREE.Scene();\n  private static cameraManager: CameraManager = CameraManager.instance;\n  private static componentManager: ComponentManager = ComponentManager.instance;\n  private static _entities: Entity[] = [];\n  private static _renderElement: HTMLElement;\n\n  constructor() {\n    if (SceneManager.instance) return;\n    SceneManager.instance = this;\n  }\n\n  static CreateEntity(props: Engine.EntityProps, parent?: Entity): Entity {\n    const entity = new Entity(props);\n    if (parent) {\n      parent.addChild(entity);\n    }\n    SceneManager._entities.push(entity);\n    this._scene.add(entity.mesh);\n    return entity;\n  }\n\n  static Initialize(renderElement: HTMLElement) {\n    if (!this.cameraManager) this.cameraManager = new CameraManager();\n    if (!this.componentManager) this.componentManager = new ComponentManager();\n    \n    this._renderElement = renderElement;\n    this.cameraManager.setup(renderElement, this._scene);\n  }\n\n  static UpdateScene() {\n    SceneManager._entities.forEach(entity => {\n      entity.Update();\n    });\n  }\n\n  static CreateComponent(type: Engine.ComponentType, componentProps: Engine.ComponentProps) {\n    // TODO: Implement this\n  }\n\n  static Run(scenePayload: Engine.ScenePayload) {\n    // TODO: Implement this thoroughly\n    SceneManager.isRunning = true;\n    this.ResetScene();\n    scenePayload.sceneConfig.entities.forEach(entityProps => {\n      SceneManager.CreateEntity(entityProps);\n    });\n    this.cameraManager.setup(this._renderElement, this._scene);\n  }\n\n  static Stop() {\n    SceneManager.isRunning = false;\n    this.ResetScene();\n    this.cameraManager.setup(this._renderElement, this._scene);\n  }\n\n  private static ResetScene() {\n    this._scene = new THREE.Scene();\n    this._entities = [];\n    this.cameraManager.resetCamera();\n  }\n}","import { useContext, useMemo} from \"react\";\nimport { SceneContext } from \"./SceneContext\";\nimport { v4 as uuidv4 } from 'uuid'\n\nconst useScene = () => {\n  const { sceneConfig, setEntities, selectedEntityID, setSelectedEntityID } = useContext(SceneContext);\n\n  const selectEntity = (id: Engine.EntityID) => {\n    if (id === selectedEntityID) {\n      setSelectedEntityID('')\n      return;\n    }\n    setSelectedEntityID(id);\n  };\n\n  const selectedEntity: Engine.EntityProps | null = useMemo(() => {\n    return sceneConfig.entities.find(e => e.id === selectedEntityID) ?? null;\n  }, [sceneConfig, selectedEntityID]);\n\n  const updateEntity = (entity: Engine.EntityProps) => {\n    console.debug(\"Called update entity\", entity);\n    const index = sceneConfig.entities.findIndex(e => e.id === entity.id);\n    if (index === -1) {\n      console.error(\"Couldn't find \" + entity.id + \" in sceneConfig.entities\");\n    };\n    sceneConfig.entities[index] = entity;\n    setEntities(sceneConfig.entities);\n    // TODO: Make sure actual scene updates when doing this\n  }\n\n  const updateEntityParent = (child: Engine.EntityID, newParent: Engine.EntityID | null) => {\n    // TODO: Implement this\n  }\n\n  const createEntity = () => {\n    const newEntity: Engine.EntityProps = {\n      id: uuidv4(),\n      name: \"New Entity\",\n      children: [],\n      components: {},\n    }\n    setEntities([...sceneConfig.entities, newEntity]);\n  }\n\n  return {\n    sceneConfig,\n    selectedEntity, \n    createEntity, \n    selectEntity,\n    updateEntity,\n    updateEntityParent,\n  };\n}\n\nexport default useScene;","import { useContext } from \"react\";\nimport { ScriptContext } from \"./ScriptContext\";\n\nconst useScripts = () => {\n  const { scripts, setScripts } = useContext(ScriptContext);\n\n  const loadScript = (name: string) => {\n    // TODO: implement this\n  };\n  const saveScript = (script: Engine.Script) => {\n    // TODO: implement this\n  };\n  const createScript = (name: string) => {\n    // TODO: implement this\n  };\n\n  return {\n    scripts,\n    setScripts,\n    loadScript,\n    saveScript,\n    createScript\n  };\n}\n\nexport default useScripts;","import { useContext, useEffect, useState } from \"react\";\nimport SceneManager from \"../../engine/core/SceneManager\";\nimport useScene from \"../scene/useScene\";\nimport useScripts from \"../scripts/useScripts\";\nimport { EditorContext } from \"./EditorContext\";\n\nconst useEditor = () => {\n  const { scripts } = useScripts();\n  const { sceneConfig } = useScene();\n  const { renderElement } = useContext(EditorContext);\n  const [isRunning, setIsRunning] = useState(SceneManager.isRunning);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => init(), [renderElement]);\n\n  const init = () => {\n    if (!renderElement || !renderElement.current) { return; }\n    SceneManager.Initialize(renderElement.current);\n  }\n\n  const generateScenePayload = (): Engine.ScenePayload => {\n    return { sceneConfig, scripts }\n  }\n\n  const toggleRun = () => {\n    if (!renderElement || !renderElement.current) { return; }\n    if (SceneManager.isRunning) {\n      console.debug('stopping scene');\n      SceneManager.Stop();\n      setIsRunning(false);\n      return;\n    }\n    console.debug('Going to run scene...')\n    const payload: Engine.ScenePayload = generateScenePayload();\n    console.debug('Made payload:', payload)\n    SceneManager.Run(payload);\n    setIsRunning(true);\n  };\n\n  return {\n    renderElement,\n    isRunning,\n    toggleRun\n  };\n}\n\nexport default useEditor;","import { folder, Leva,  useControls } from 'leva'\nimport { type } from 'os';\nimport { useEffect } from 'react';\nimport { generateComponentObjectFromValues } from '../../state/scene/scene.utils';\nimport useScene from '../../state/scene/useScene';\nimport { deepClone } from '../../utils';\n\nexport default function Controls() {\n  const { selectedEntity, updateEntity } = useScene();\n\n  // utils\n  const getComponentPropName = (type: Engine.ComponentType, propName: string): Engine.CombinedComponentPropName => `${type}--${propName}`\n\n  const getControls = () => {\n    if (!selectedEntity) return {};\n    const { components } = selectedEntity;\n\n    const componentControls = Object.entries(components).map(([type, props]) => {\n      const folderValue =\n        Object.fromEntries(\n          Object.entries(props)\n            .map(([propName, propValue]) => [getComponentPropName(type, propName),{ value: propValue, label: propName }]\n          )\n        );\n      return [type, folder(folderValue as any)]\n    });\n    return Object.fromEntries(componentControls);\n  }\n\n  const [values, set]: any = useControls(getControls as any, [selectedEntity]);\n\n  // Handles populating all correct value fields when selecting entity\n  useEffect(() => {\n    const updateComponentFields = (entity: Engine.EntityProps) => {\n      const flattenedPropFields: Record<string, Engine.ComponentPropType> = {};\n      Object.entries(entity.components).forEach(([type, props]) => {\n        const [propName, propValue] = Object.entries(props)[0];\n        flattenedPropFields[getComponentPropName(type, propName)] = propValue;\n      });\n      console.debug('setting', flattenedPropFields);\n      set(flattenedPropFields);\n    }\n\n    if (selectedEntity) updateComponentFields(selectedEntity);\n  }, [selectedEntity, set])\n\n  // Handles updating the entity when a field is changed\n  useEffect(() => {\n    const handleEntityUpdate = (entity: Engine.EntityProps, values: Record<Engine.CombinedComponentPropName, Engine.ComponentPropType>) => {\n      const updatedComponents = generateComponentObjectFromValues(values);\n      if (JSON.stringify(updatedComponents) !== JSON.stringify(entity.components)) {\n        const newEntity = deepClone<Engine.EntityProps>(entity);\n        newEntity.components = updatedComponents;\n        updateEntity(newEntity);\n      }\n    }\n\n    if (selectedEntity) handleEntityUpdate(selectedEntity, values);\n  }, [values, selectedEntity]);\n\n  return (\n    <div className=\"bg-indigo-500 space-y-1\">\n      <Leva fill flat titleBar={false} />\n    </div>\n  );\n}\n","export const deepClone = <T>(input: T): T => {\n  return JSON.parse(JSON.stringify(input)) as T\n}","/** Recursively flattens all entity props and detaches children */\n// export const flattenEntities = (entities: Engine.EntityProps[]): Engine.EntityProps[] => {\n//   const input = [...entities];\n//   const flattened: Engine.EntityProps[] = [];\n//   for (const entity of input) {\n//     if (entity.children.length > 0) {\n//       const { children } = entity;\n\n//       // entity.children = []; // TODO: Do I need to detach children to prevent cyclic ref?\n//       flattened.push(entity);\n\n//       // Pass all children\n//       const childrenEntities = flattenEntities(children);\n//       flattened.push(...childrenEntities);\n//     } else {\n//       flattened.push(entity);\n//     }\n//   }\n//   return flattened;\n// }\n\n/** Takes all values from controls and converts it into an EntityProps-friendly component object */\nexport const generateComponentObjectFromValues = (values: Record<Engine.CombinedComponentPropName, Engine.ComponentPropType>): Record<Engine.ComponentType, Engine.ComponentProps> => {\n  const componentObject: Record<Engine.ComponentType, Engine.ComponentProps> = {};\n  Object.entries(values).forEach(entry => {\n    const [type, prop]: [Engine.CombinedComponentPropName, Engine.ComponentPropType] = entry as any;\n    // @ts-ignore\n    const [typeName, propFieldName]: [Engine.ComponentType, string] = type.split('--');\n    if (componentObject[typeName]) {\n      componentObject[typeName][propFieldName] = prop;\n    } else {\n      componentObject[typeName] = { [propFieldName]: prop };\n    }\n  })\n  return componentObject as Record<Engine.ComponentType, Engine.ComponentProps>;\n}","import React, { useMemo, ReactElement } from 'react';\nimport useScene from '../../state/scene/useScene';\n\n// TODO: Render children\ninterface Props {\n  entity: Engine.EntityProps;\n}\n\nfunction TreeNode({ entity }: Props): ReactElement {\n  const { selectedEntity, selectEntity } = useScene();\n\n  const isSelected = useMemo(() => selectedEntity?.id === entity.id, [selectedEntity, entity.id]);\n  \n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    selectEntity(entity.id);\n  }\n\n  return (\n    <div\n      className={`\n    p-2\n    rounded-md\n    transition\n    cursor-pointer\n    ${isSelected ? 'hover:bg-indigo-500' : 'hover:bg-indigo-400'}\n    ${isSelected && 'bg-indigo-300'}`} onClick={handleClick}>\n      <h1>{entity?.name ?? '__ENTITY__'}</h1>\n      {/* {entity.children.map(child => <TreeNode key={child.id} entity={child}/>)} */}\n    </div>\n  )\n\n}\n\nexport default function TreeViewPanel(): ReactElement {\n  const { sceneConfig } = useScene();\n  return (\n    <div className=\"bg-indigo-200 p-1.5 space-y-1\">\n      {\n        sceneConfig.entities.map(entity =>\n          <TreeNode\n            key={entity.id}\n            entity={entity}\n          />\n        )\n      }\n    </div>\n  )\n}\n","import { ReactElement } from 'react'\nimport useEditor from '../../state/editor/useEditor'\nimport useScene from '../../state/scene/useScene'\nimport Controls from '../components/Controls'\nimport TreeViewPanel from '../components/TreeViewPanel'\n\nexport default function BrowserEngine(): ReactElement {\n  const { createEntity } = useScene()\n  const { renderElement,  toggleRun, isRunning } = useEditor()\n  \n  return (\n    <main className=\"w-screen h-screen overflow-hidden\">\n      <div className={`h-2 transition bg-red-400 ${isRunning && 'bg-green-400'}`}></div>\n      <nav className=\"bg-gray-900 p-2 space-x-2\">\n        <button onClick={toggleRun} className=\"p-2 bg-gray-700 rounded-md px-3 transition hover:bg-gray-600\">{isRunning ? 'Stop' : 'Run'} Scene</button>\n        <button onClick={createEntity} className=\"p-2 bg-gray-700 rounded-md px-3 transition hover:bg-gray-600\">Add Entity</button>\n      </nav>\n      <section className=\"w-full h-full grid\" style={{ gridTemplateColumns: '1fr 17rem' }}>\n        {renderElement && (<div className=\"bg-gray-600\" id=\"scene\" ref={renderElement} />)}\n        <div className=\"grid grid-rows-2 gap-0 5\">\n        <TreeViewPanel />\n        <Controls />\n        </div>\n      </section>\n    </main>\n  )\n}\n","import { EditorProvider } from \"./state/editor/EditorContext\";\nimport { SceneProvider } from \"./state/scene/SceneContext\";\nimport { ScriptProvider } from \"./state/scripts/ScriptContext\";\nimport BrowserEngine from \"./ui/base/BrowserEngine\";\n\nfunction App() {\n  return (\n    <SceneProvider>\n      <ScriptProvider>\n        <EditorProvider>\n          <BrowserEngine />\n        </EditorProvider>\n      </ScriptProvider>\n    </SceneProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}