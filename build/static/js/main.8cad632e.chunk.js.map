{"version":3,"sources":["engine/core/CameraController.ts","engine/core/Scene.ts","engine/core/EventController.ts","engine/utils/excludedEntityProps.ts","engine/core/index.ts","state/SceneContext.tsx","state/useScene.tsx","engine/components/Transform.ts","engine/entities/Agent.ts","engine/utils/getComponentProps.ts","ui/components/Controls.tsx","ui/base/BrowserEngine.tsx","App.tsx","index.tsx"],"names":["OrbitControls","oc","THREE","CameraController","scene","fov","near","far","camera","renderer","antialias","container","controls","this","setSize","clientWidth","clientHeight","appendChild","domElement","AddCamera","AddControls","window","addEventListener","HandleResize","innerWidth","innerHeight","aspect","updateProjectionMatrix","autoRotate","enableDamping","dampingFactor","position","z","update","setPixelRatio","devicePixelRatio","render","_entities","Scene","cameraController","running","SetupScene","entity","mesh","add","push","group","time","forEach","inGroup","Update","setAnimationLoop","Initialize","EventController","SetupEvents","document","e","keyCode","Stop","Run","Entity","params","_id","uuidv4","_scene","material","geometry","entityParams","Awake","BuildMesh","Error","Add","Object","entries","filter","key","excludedEntityProps","some","prop","initialValue","undefined","SceneContext","createContext","SceneProvider","children","useMemo","activeScene","Provider","value","useScene","useContext","ref","useRef","useEffect","current","Transform","props","rotation","scale","_mesh","console","debug","setX","x","setY","y","setZ","error","Agent","transform","speed","SetMesh","getComponentProps","name","component","Controls","useState","setEntity","getControls","useCallback","GetProps","propControls","folder","useControls","button","inspectorProps","entityProps","ep","subProps","sp","inspectorSubProp","find","p","inspectorBasicProp","onInspectorValueChange","BrowserEngine","className","style","gridTemplateColumns","minWidth","maxWidth","onResize","id","height","theme","defaultLanguage","defaultValue","App","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8cad632e.chunk.js","sourcesContent":["import * as THREE from 'three';\nimport oc from 'three-orbit-controls';\nconst OrbitControls = oc(THREE);\n\nexport default class CameraController {\n  scene: THREE.Scene;\n  fov = 45;\n  near = 0.01;\n  far = 20000;\n  camera: THREE.PerspectiveCamera | undefined;\n  renderer = new THREE.WebGLRenderer({ antialias: true });\n  container: any;\n  controls: any;\n\n  constructor(scene: THREE.Scene) {\n    this.scene = scene;\n  }\n\n\n  Initialize(container: any) {\n    this.renderer.setSize(container.clientWidth, container.clientHeight);\n    this.container = container;\n    this.container.appendChild(this.renderer.domElement);\n    this.AddCamera();\n    this.AddControls();\n    window.addEventListener('resize', () => this.HandleResize())\n  }\n\n\n  /** Initializes Camera */\n  AddCamera() {\n    this.camera = new THREE.PerspectiveCamera(this.fov, window.innerWidth / window.innerHeight, this.near, this.far);\n    this.camera.aspect = this.container.clientWidth / this.container.clientHeight;\n    this.camera.updateProjectionMatrix();\n  }\n\n  /** Initializes Controls */\n  AddControls() {\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.autoRotate = false;\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.39;\n    if (this.camera) { this.camera.position.z = 200; }\n    this.controls.update();\n  }\n\n  /** Handles recalibrating the camera when container is resized. */\n  HandleResize() {\n    if (!this.camera) return;\n    this.camera.aspect = this.container.clientWidth / this.container.clientHeight;\n    this.camera.updateProjectionMatrix();\n\n    this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n  }\n\n  /** Updates the controls, and re-renders everything.\n   *  Note: This is called by the Scene update loop externally.\n   */\n  Update() {\n    if (this.controls) {\n      this.controls.update();\n    }\n    if (this.camera && this.scene) {\n      this.renderer.render(this.scene, this.camera);\n    }\n  }\n}","import * as THREE from 'three';\nimport CameraController from './CameraController'\n\nconst _entities: IEntity[] = [];\nexport default class Scene {\n  // todo determine if these need to be public\n  public scene = new THREE.Scene();\n  public cameraController = new CameraController(this.scene);\n  public running = false;\n\n  constructor() {\n    this.SetupScene()\n  }\n\n  /** Include any Scene setup logic here */\n  SetupScene() {\n  }\n\n  /**\n   * Adds a new mesh to the scene.\n   * @param {THREE.Mesh} mesh New Mesh to add to scene\n   */\n  Add(entity: IEntity) {\n    if (entity.mesh) {\n      this.scene.add(entity.mesh)\n      _entities.push(entity)\n    }\n    else if (entity.group) {\n      this.scene.add(entity.group)\n      _entities.push(entity)\n    }\n  }\n\n  /**\n   * Runs once per frame, call's Update for each entity\n   * @param {float} time Time since the Scene began\n   */\n  Update(time: number) {\n    if (this.running)\n      _entities.forEach(entity => !entity.inGroup && entity.Update(time));\n    this.cameraController.Update()\n  }\n\n  Run() {\n    if (!this.running || !this.cameraController || !this.cameraController.renderer) {\n      this?.cameraController?.renderer?.setAnimationLoop(time => this.Update(time))\n      this.running = true;\n    }\n  }\n\n  Stop() {\n    if (this.running) {\n      this.running = false;\n    }\n  }\n\n  Initialize(container: any) {\n    this.cameraController.Initialize(container);\n  }\n}","export default class EventController {\n  scene: any;\n  constructor(scene: any) {\n    this.scene = scene;\n    this.SetupEvents();\n  }\n\n  SetupEvents() {\n    document.addEventListener('keydown', (e) => {\n      if (e.keyCode !== 32) return;\n      this.scene.running ? this.scene.Stop() : this.scene.Run();\n    });\n  }\n}","export default [\n  \"_id\",\n  \"_scene\",\n  \"geometry\",\n  \"material\",\n  \"mesh\",\n  \"inGroup\"\n];","import Scene from './Scene'\nimport EventController from './EventController'\nimport { v4 as uuidv4 } from 'uuid';\nimport * as THREE from 'three';\nimport excludedEntityProps from '../utils/excludedEntityProps';\n\n/**\n * -  THREE-SETUP -\n * \n * An Object-Oriented setup for three.js\n * \n * By Parssa Kyanzadeh\n * www.parssak.com\n */\n\n// All Entities use the same scene singleton\nexport const scene = new Scene();\n\nnew EventController(scene);\n\n/**\n * Abstract Class Entity.\n *\n * @class Entity\n */\nexport default abstract class Entity implements IEntity {\n  _id = uuidv4();\n  _scene = scene;\n  inGroup: boolean = false;\n  material: THREE.Material;\n  geometry: THREE.BufferGeometry;\n  mesh: THREE.Mesh;\n  constructor(params?: IEntityParams) {\n    this.inGroup = params?.entityParams?.inGroup ?? this.inGroup;\n    this.material = new THREE.MeshBasicMaterial();\n    this.geometry = new THREE.BoxBufferGeometry(3, 3, 3);\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    this.Awake();\n  }\n\n  // Use this to define the mesh of the Entity\n  abstract BuildMesh(): void;\n\n  // Called Once on Initialization, before Start()\n  Awake() {\n    this.BuildMesh()\n    if (!this.mesh) {\n      throw new Error('Entity.BuildMesh() must set .mesh field')\n    }\n    this._scene.Add(this)\n  }\n\n  // Called every frame\n  abstract Update(time?: number): void;\n\n\n  GetProps(): [string, any][] {\n    const allProps = Object.entries(this);\n    return allProps.filter(([key, _]) => !excludedEntityProps.some(prop => prop === key));\n  };\n}","// create a typescript react global context and provider for SceneContext and SceneProvider\nimport { ReactElement, useMemo } from 'react';\nimport { createContext } from 'react';\nimport { scene as activeScene } from '../engine/core';\nimport Scene from '../engine/core/Scene';\n\ninterface ISceneContext {\n  scene: Scene | undefined;\n};\n\nconst initialValue = {\n  scene: undefined\n};\n\nexport const SceneContext = createContext<ISceneContext>(initialValue);\n\nexport const SceneProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const scene = useMemo(() => activeScene, []);\n    return (\n      <SceneContext.Provider value={{scene}}>\n            {children}\n        </SceneContext.Provider>\n    );\n}","import { useContext, useEffect, useRef } from \"react\";\nimport { SceneContext } from \"./SceneContext\";\n\nconst useScene = () => {\n  const { scene } = useContext(SceneContext);\n  const ref = useRef<any>();\n\n  useEffect(() => {\n    scene?.Initialize(ref.current);\n    scene?.Run();\n  }, [ref, scene]);\n\n\n  return { ref, scene };\n}\n\nexport default useScene;","import * as THREE from 'three';\n\ninterface ITransformProps {\n  position?: THREE.Vector3;\n  rotation?: THREE.Euler;\n  scale?: THREE.Vector3;\n}\n\nexport default class Transform {\n  public position: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n  public rotation: THREE.Euler = new THREE.Euler(0, 0, 0, 'XYZ');\n  public scale: THREE.Vector3 = new THREE.Vector3(1, 1, 1);\n  private _mesh?: THREE.Mesh;\n\n  constructor(props?: ITransformProps) {\n    console.debug('created new transform');\n    this.position = props?.position ?? this.position;\n    this.rotation = props?.rotation ?? this.rotation;\n    this.scale = props?.scale ?? this.scale;\n  }\n\n  SetMesh(mesh: THREE.Mesh) {\n    this._mesh = mesh;\n  }\n\n  Update() {\n    if (!this._mesh) {\n      console.error('Attempting to update transform without setting mesh!');\n      return;\n    }\n    this._mesh.position.setX(this.position.x);\n    this._mesh.position.setY(this.position.y);\n    this._mesh.position.setZ(this.position.z);\n    this._mesh.rotation.x = this.rotation.x;\n    this._mesh.rotation.y = this.rotation.y;\n    this._mesh.rotation.z = this.rotation.z;\n    this._mesh.scale.setX(this.scale.x);\n    this._mesh.scale.setY(this.scale.y);\n    this._mesh.scale.setZ(this.scale.z);\n  }\n}\n","import * as THREE from 'three';\nimport Transform from '../components/Transform';\nimport Entity from '../core'\n\ninterface Props extends IEntityParams {\n  transform?: {\n    position?: THREE.Vector3;\n    rotation?: THREE.Euler;\n    scale?: THREE.Vector3;\n  }\n  speed?: number;\n};\nexport default class Agent extends Entity {\n  transform: Transform;\n  speed: number = 0.03;\n\n  constructor(props?: Props) {\n    super(props);\n    this.transform = new Transform(props?.transform);\n    this.transform.SetMesh(this.mesh);\n    this.speed = props?.speed ?? this.speed;\n  }\n\n  BuildMesh() {\n    this.geometry = new THREE.CylinderGeometry(0, 4, 8, 10);\n    this.material = new THREE.MeshNormalMaterial();\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n  }\n\n\n  Update() {\n    // console.log(this.transform.position.x);\n    this.transform.Update();\n    this.transform.rotation.x += this.speed;\n    this.transform.rotation.y += this.speed;\n    this.transform.rotation.z += this.speed;\n  }\n}","const getComponentProps = (name: Component, component: any) => {\n  switch (name) {\n    case 'transform':\n      return { position: component.position, rotation: component.rotation, scale: component.scale };\n    default:\n      return {};\n  }\n}\nexport default getComponentProps;","import { button, folder, useControls } from 'leva'\nimport { useCallback, useEffect, useState } from 'react';\nimport Entity from '../../engine/core';\nimport Agent from '../../engine/entities/Agent';\nimport getComponentProps from '../../engine/utils/getComponentProps';\n\nexport default function Controls() {\n  const [entity, setEntity] = useState<Entity>();\n  const addEntity = () => {\n    setEntity(new Agent());\n  }\n\n  const getControls: any = useCallback(() => {\n    if (!entity) return {};\n    const props = entity.GetProps();\n    const propControls: any = {};\n    for (const prop of props) {\n      if (typeof prop[1] === 'object') {\n        propControls[prop[0]] = folder(getComponentProps(prop[0] as Component, prop[1]) as any);\n        continue;\n      }\n      propControls[prop[0]] = prop[1];\n    }\n    return propControls;\n  }, [entity]);\n  \n\n  const controls = useControls(() => ({...getControls()}),  [entity]);\n  useControls({ 'New Agent': button(addEntity) })\n  \n  const onInspectorValueChange = () => {\n    if (!entity) return;\n    const inspectorProps = Object.entries(controls[0]);\n    const entityProps = entity.GetProps();\n    for (const ep of entityProps) {\n      if (typeof ep[1] === 'object') {\n        const subProps = getComponentProps(ep[0] as Component, ep[1])\n        for (const sp of Object.entries(subProps)) {\n          const inspectorSubProp = inspectorProps.find(p => p[0] === sp[0]);\n          if (inspectorSubProp) {\n            // @ts-ignore\n            entity[ep[0]][sp[0]] = inspectorSubProp[1];\n          }\n        }\n        continue;\n      }\n      const inspectorBasicProp = inspectorProps.find(p => p[0] === ep[0]);\n      if (inspectorBasicProp) {\n        // @ts-ignore\n        entity[ep[0]] = inspectorBasicProp[1];\n      }\n    }\n  }\n\n  useEffect(() => {\n    onInspectorValueChange();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [controls]);\n  return <></>;\n}\n","import Editor from '@monaco-editor/react'\nimport { Resizable } from 're-resizable'\nimport React, { ReactElement } from 'react'\nimport useScene from '../../state/useScene'\nimport Controls from '../components/Controls'\n\nconst defaultEditorValue = `// Welcome to Browser Engine!\n// A Project by @parssak (Parssa Kyanzadeh)\n//\n// This is a simple example of a TypeScript file.\n//\n// This editor doesn't do much yet.\n`\n\nexport default function BrowserEngine(): ReactElement {\n  const { ref, scene } = useScene()\n\n  return (\n    <main className=\"w-screen h-screen overflow-hidden \">\n      <nav className=\"bg-gray-900 p-2\"></nav>\n      <section className=\"w-full h-full grid\" style={{ gridTemplateColumns: 'max-content 100%' }}>\n        <Resizable className=\"border-r-4 border-gray-700 z-20\" minWidth=\"30vw\" maxWidth=\"70vw\" onResize={() => scene?.cameraController.HandleResize()}>\n          <div className=\"bg-black h-full\" id=\"scene\" ref={ref} ></div>\n        </Resizable>\n        <div className=\"h-full\">\n          <Controls />\n          <Editor\n            height=\"100%\"\n            theme=\"vs-dark\"\n            defaultLanguage=\"typescript\"\n            defaultValue={defaultEditorValue}\n          />\n        </div>\n      </section>\n    </main>\n  )\n}\n","import { SceneProvider } from \"./state/SceneContext\";\nimport BrowserEngine from \"./ui/base/BrowserEngine\";\n\nfunction App() {\n  return (\n    <SceneProvider>\n      <BrowserEngine />\n    </SceneProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}