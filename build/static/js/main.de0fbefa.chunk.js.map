{"version":3,"sources":["engine/core/Component.ts","engine/components/Transform.ts","engine/core/ComponentManager.ts","state/scripts/ScriptContext.tsx","utils/script.utils.ts","state/editor/EditorContext.tsx","engine/core/MaterialManager.ts","engine/core/GeometryManager.ts","engine/core/Entity.ts","engine/core/SceneManager.ts","utils/index.ts","engine/core/CameraManager.ts","engine/core/EngineContext.ts","state/scene/SceneContext.tsx","state/scene/useScene.tsx","utils/entity.utils.ts","state/scripts/useScripts.tsx","state/editor/useEditor.tsx","ui/components/Controls.tsx","ui/components/TreeViewPanel.tsx","ui/components/ScriptPanel.tsx","ui/base/BrowserEngine.tsx","App.tsx","index.tsx"],"names":["Component","entity","this","props","Transform","position","THREE","rotation","scale","applyMatrix","mesh","setX","x","setY","y","setZ","z","setRotationFromEuler","applyPosition","applyRotation","applyScale","ComponentManager","components","instance","registerComponent","componentName","component","console","debug","name","constructor","componentProps","error","componentType","getComponent","Object","entries","forEach","prop","Array","isArray","length","componentInstance","init","initialValue","scripts","selectedScript","undefined","setScripts","setSelectedScript","script","compileScripts","ScriptContext","createContext","ScriptProvider","children","useState","formattedScript","formatScriptString","NewComponent","eval","setPrototypeOf","scriptCopy","content","removePrefix","substring","indexOf","pureProps","replaceAll","replace","err","useEffect","contextValue","Provider","value","COMPONENT_DEF","baseScriptContent","generateNewScript","id","uuidv4","language","type","EditorContext","EditorProvider","renderElement","useRef","MaterialManager","wireframe","GeometryManager","Entity","initMesh","initComponents","mat","getMaterial","material","geometry","getGeometry","uuid","setComponent","child","SceneManager","isPlaying","_updateComponents","values","update","_scene","_entities","_scenePayload","_selectedEntityID","_axes","_gridHelper","_selectionHelper","add","payload","sceneConfig","entities","find","e","entityID","entityProps","updateIndex","findIndex","setFromObject","_resetScene","remove","_buildEntities","select","object","push","destroy","input","JSON","parse","stringify","buildEntity","CameraManager","renderer","antialias","raycaster","fov","near","far","camera","controls","_setCamera","window","addEventListener","handleResize","scene","setSize","clientWidth","clientHeight","appendChild","domElement","_setControls","_setRaycaster","_runSceneLoop","setAnimationLoop","mouseX","mouseY","pointer","setFromCamera","intersects","intersectObjects","getScene","filter","innerWidth","innerHeight","time","dimensions","getBoundingClientRect","aspect","width","height","updateProjectionMatrix","setPixelRatio","devicePixelRatio","render","updateScene","context","sceneManager","cameraManager","componentManager","materialManager","geometryManager","_renderElement","isInitialized","updateScenePayload","runEditMode","runPlayScene","setup","runEditScene","setScenePayload","updateEntityPayload","handleClick","selectByID","getSelectedEntity","getSelectedEntityPayload","selectedEntityID","setEntities","setSelectedEntityID","setCameraProps","cameraProps","SceneContext","SceneProvider","useMemo","updateSpecificEntity","useScene","useContext","selectedEntity","createEntity","newEntity","addNewEntity","selectEntity","updateEntity","index","updateEntityParent","newParent","useScripts","loadScript","scriptID","s","saveScript","foundScript","createScript","newScript","useEditor","isRunning","setIsRunning","scenePayload","current","toggleRun","runPlayMode","handleClickScene","domRect","target","clientX","clientY","ComponentFieldValue","field","updateField","className","onChange","Number","ComponentNode","updateComponent","map","fieldName","fieldValue","style","minWidth","Controls","setControls","materialType","setMaterialType","geometryType","setGeometryType","propFields","updateComponentFields","newControls","componentOptions","getComponents","keys","label","getComponentOptions","onClick","getComponentProps","addComponent","newMaterial","defaultValue","option","newGeometry","TreeNode","isSelected","stopPropagation","TreeViewPanel","ScriptPanel","BrowserEngine","scriptBody","setScriptBody","gridTemplateColumns","ref","defaultLanguage","theme","newValue","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de0fbefa.chunk.js","sourcesContent":["import Entity from \"./Entity\";\n\nexport default abstract class Component {\n  entity: Entity;\n\n  constructor(entity: Entity) {\n    this.entity = entity;\n  }\n\n  init(props: Engine.ComponentProps) {\n  }\n\n  abstract update(): void;\n}\n\n// This is only used for generating the BaseComponentType for internal use, \n// when creating Components, extend the abstract Component class instead.\nclass BaseComponent extends Component {\n  entity!: Entity;\n\n  init(props: Engine.ComponentProps) { }\n\n  update() { }\n}\n\nexport type BaseComponentType = typeof BaseComponent;","import * as THREE from 'three';\nimport Component from '../core/Component';\nimport Entity from '../core/Entity';\ninterface ITransformProps {\n  position?: THREE.Vector3;\n  rotation?: THREE.Euler;\n  scale?: THREE.Vector3;\n}\n\nexport default class Transform extends Component {\n  entity: Entity;\n\n  // <@public>\n  public position: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n  public rotation: THREE.Euler = new THREE.Euler(0, 0, 0, 'XYZ');\n  public scale: THREE.Vector3 = new THREE.Vector3(1, 1, 1);\n  // </@public>\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.entity = entity;\n  }\n\n  init(props?: ITransformProps) {\n    this.position = props?.position ?? this.position;\n    this.rotation = props?.rotation ?? this.rotation;\n    this.scale = props?.scale ?? this.scale;\n    this.applyMatrix();\n  }\n\n  private applyPosition() {\n    this.entity.mesh.position.setX(this.position.x);\n    this.entity.mesh.position.setY(this.position.y);\n    this.entity.mesh.position.setZ(this.position.z);\n  }\n\n  private applyRotation() {\n    this.entity.mesh.setRotationFromEuler(new THREE.Euler(this.rotation.x, this.rotation.y, this.rotation.z));\n  }\n\n  private applyScale() {\n    this.entity.mesh.scale.setX(this.scale.x);\n    this.entity.mesh.scale.setY(this.scale.y);\n    this.entity.mesh.scale.setZ(this.scale.z);\n  }\n\n  private applyMatrix() {\n    if (!this.entity) { return; }\n    this.applyPosition();\n    this.applyRotation();\n    this.applyScale();\n  }\n\n  update() {\n    this.applyMatrix();\n  }\n}\n","import * as THREE from 'three';\nimport Mover from '../components/Mover';\nimport Transform from \"../components/Transform\";\nimport { BaseComponentType } from \"./Component\";\nimport Entity from \"./Entity\";\nexport default class ComponentManager {\n  public static instance: ComponentManager;\n  private components: { [key: string]: { constructor: BaseComponentType, props: Engine.ComponentProps } } = {};\n\n  constructor() {\n    if (ComponentManager.instance) return;\n    ComponentManager.instance = this;\n\n    this.registerComponent(\"Transform\", Transform, {\n      position: { x: 0, y: 0, z: 0 },\n      rotation: { x: 0, y: 0, z: 0 },\n      scale: { x: 1, y: 1, z: 1 },\n    });\n\n    // this.registerComponent(\"Mover\", Mover, { speed: 0.4 });\n  }\n\n  public getComponents() {\n    return { ...this.components };\n  };\n\n  public registerComponent(componentName: string, component: BaseComponentType, props: Engine.ComponentProps): void {\n    console.debug('registering', component, component.name);\n    this.components[componentName] = { constructor: component, props };\n  };\n\n  public getComponentProps(name: Engine.ComponentType): Engine.ComponentProps | null {\n    const componentProps = this.components[name].props ?? null;\n    if (!componentProps) {\n      console.error(`Component ${name} not found`);\n      return null;\n    }\n    console.debug('got component props', componentProps);\n    return componentProps;\n  }\n\n  private getComponent(name: Engine.ComponentType): BaseComponentType | null {\n    return this.components[name].constructor ?? null;\n  }\n\n  public setComponent(entity: Entity, componentType: Engine.ComponentType, componentProps: Engine.ComponentProps): void {\n    const component = this.getComponent(componentType);\n    if (!component) {\n      console.error(`Component ${componentType} not found`);\n      return;\n    }\n\n    // Translate vector props \n    Object.entries(componentProps).forEach(([name, prop]) => {\n      if (Array.isArray(prop)) {\n        if (prop.length === 3) {\n          componentProps[name] = new THREE.Vector3(prop[0], prop[1], prop[2]) as any;\n        }\n        else if (prop.length === 2) {\n          componentProps[name] = new THREE.Vector2(prop[0], prop[1]) as any;\n        }\n      }\n    });\n    const componentInstance = new component(entity);\n    componentInstance.init(componentProps);\n    entity.components[componentType] = componentInstance;\n  }\n}","import { Component, ReactElement, useEffect, useState } from 'react';\nimport { createContext } from 'react';\nimport ComponentManager from '../../engine/core/ComponentManager';\nimport { formatScriptString } from '../../utils/script.utils';\n\ninterface IScriptContext {\n  scripts: Engine.Script[];\n  selectedScript: Engine.Script | undefined;\n  setScripts: (scripts: Engine.Script[]) => void;\n  setSelectedScript: (script: Engine.Script | undefined) => void;\n  compileScripts: () => void;\n};\n\nconst initialValue: IScriptContext = {\n  scripts: [],\n  selectedScript: undefined,\n  setScripts: (scripts: Engine.Script[]) => { },\n  setSelectedScript: (script: Engine.Script | undefined) => { },\n  compileScripts: () => { }\n}\n\nexport const ScriptContext = createContext<IScriptContext>(initialValue);\n\nexport const ScriptProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [scripts, setScripts] = useState<Engine.Script[]>([]);\n  const [selectedScript, setSelectedScript] = useState<Engine.Script | undefined>()\n\n  const compileScripts = () => {\n    scripts.forEach(script => {\n      try {\n        const formattedScript = formatScriptString(script);\n        const NewComponent: any = eval(`(${formattedScript})`);\n        Object.setPrototypeOf(NewComponent, Component);\n        const scriptCopy = `${script.content}`;\n        const removePrefix = scriptCopy.substring(scriptCopy.indexOf(\"// <public>\") + 11);\n        // take substring of entire string justPublic until // </public>\n        let pureProps = removePrefix.substring(0, removePrefix.indexOf(\"// </public>\"));\n        pureProps = pureProps.replaceAll(';', ',');\n        pureProps = pureProps.replaceAll('=', ':');\n        let props = {};\n        if (`${pureProps}`.replace(/\\s/g, \"\").length) {\n          pureProps = `{${pureProps}}`\n          console.debug(pureProps);\n          props = eval(`(${pureProps})`);\n        }\n        ComponentManager.instance.registerComponent(script.name, NewComponent, props);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    )\n  }\n\n  useEffect(() => {\n    compileScripts();\n  }, [scripts])\n\n  const contextValue = { scripts, setScripts, selectedScript, setSelectedScript, compileScripts };\n\n  return (\n    <ScriptContext.Provider value={contextValue}>\n      {children}\n    </ScriptContext.Provider>\n  );\n};","import { v4 as uuidv4 } from 'uuid';\n\nconst COMPONENT_DEF = `// @defineComponent`;\nconst baseScriptContent = `class Name {\n  \n  // <public>\n\n  // </public>\n\n  ${COMPONENT_DEF}\n\n  init(props) {\n\n  }\n\n  update() {\n\n  }\n}`\nexport const generateNewScript = (name: string): Engine.Script => {\n  const id = uuidv4();\n  return {\n    id,\n    name,\n    language: 'js',\n    content: baseScriptContent,\n    type: 'component'\n  }\n};\n\nexport const formatScriptString = (script: Engine.Script): string => {\n  const formatted = `(${script.content})`;\n  return formatted.replace(COMPONENT_DEF, `\n          entity;\n        \n          constructor(entity) {\n            this.entity = entity;\n          }\n        `);\n};","import { ReactElement, useEffect, useRef } from 'react';\nimport { createContext } from 'react';\n\ninterface IEditorContext {\n  renderElement?: React.MutableRefObject<HTMLDivElement | null>;\n};\n\nconst initialValue: IEditorContext = {}\n\nexport const EditorContext = createContext<IEditorContext>(initialValue);\n\nexport const EditorProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const renderElement = useRef<HTMLDivElement>(null)\n  const contextValue = { renderElement };\n\n\n  return (\n    <EditorContext.Provider value={contextValue}>\n      {children}\n    </EditorContext.Provider>\n  );\n};","import * as THREE from 'three';\n\nexport default class MaterialManager {\n  public static instance: MaterialManager;\n\n  constructor() {\n    if (MaterialManager.instance) return;\n    MaterialManager.instance = this;\n  }\n\n  getMaterial(type: Engine.MaterialType): THREE.Material {\n    switch (type) {\n      case 'normal':\n        return new THREE.MeshNormalMaterial();\n      case 'basic':\n        return new THREE.MeshBasicMaterial();\n      case 'phong':\n        return new THREE.MeshPhongMaterial();\n      case 'lambert':\n        return new THREE.MeshLambertMaterial();\n      case 'wireframe':\n        return new THREE.MeshBasicMaterial({ wireframe: true });\n      default:\n        return new THREE.MeshBasicMaterial();\n    }\n  }\n}\n","import * as THREE from 'three';\n\nexport default class GeometryManager {\n  public static instance: GeometryManager;\n\n  constructor() {\n    if (GeometryManager.instance) return;\n    GeometryManager.instance = this;\n  }\n\n  getGeometry(type: Engine.MaterialType): THREE.BufferGeometry {\n    switch (type) {\n      case 'box':\n        return new THREE.BoxBufferGeometry();\n      case 'sphere':\n        return new THREE.SphereBufferGeometry(1, 16, 8);\n      case 'cylinder':\n        return new THREE.CylinderBufferGeometry(1, 1, 1, 16, 1);\n      case 'torus':\n        return new THREE.TorusBufferGeometry(6, 1.1, 10, 32, 6.3);\n      case 'plane':\n        return new THREE.PlaneBufferGeometry(1, 1);\n      case 'tetrahedron':\n        return new THREE.TetrahedronBufferGeometry();\n      case 'octahedron':\n        return new THREE.OctahedronBufferGeometry();\n      case 'dodecahedron':\n        return new THREE.DodecahedronBufferGeometry();\n      case 'icosahedron':\n        return new THREE.IcosahedronBufferGeometry();\n      default:\n        return new THREE.SphereBufferGeometry();\n    }\n  }\n}","import * as THREE from 'three';\nimport Component from './Component';\nimport ComponentManager from './ComponentManager';\nimport MaterialManager from './MaterialManager';\nimport GeometryManager from './GeometryManager';\nimport SceneManager from './SceneManager';\n\nexport default class Entity {\n  public name: string = \"\";\n  public mesh!: THREE.Mesh;\n  public readonly id: Engine.EntityID;\n  public components: Record<Engine.ComponentType, Component> = {};\n\n  constructor(props: Engine.EntityProps) {\n    this.id = props.id;\n    this.name = props.name;\n    this.init(props);\n  }\n\n  init(props: Engine.EntityProps) {\n    this.initMesh(props);\n    this.initComponents(props.components);\n  }\n\n  initMesh(props: Engine.EntityProps) {\n    const mat = MaterialManager.instance.getMaterial(props.material);\n    const geometry = GeometryManager.instance.getGeometry(props.geometry);\n    if (!this.mesh) {\n      this.mesh = new THREE.Mesh(geometry, mat);\n    }\n    else {\n      this.mesh.geometry = geometry;\n      this.mesh.material = mat;\n    }\n    this.mesh.uuid = this.id;\n    this.mesh.name = this.name;\n  }\n\n  initComponents(components: Record<Engine.ComponentType, Engine.ComponentProps>) {\n    this.components = {};\n    Object.entries(components).forEach(([type, props]) => {\n      ComponentManager.instance.setComponent(this, type, props);\n    })\n  }\n\n  // TODO: Implement\n  addChild(child: Entity) { }\n\n  // TODO: Implement\n  destroy() { }\n\n  update() {\n    if (SceneManager.isPlaying()) {\n      this._updateComponents();\n    }\n  }\n\n  private _updateComponents() {\n    Object.values(this.components).forEach((component) => component.update())\n  }\n}","import { throws } from 'assert';\nimport * as THREE from 'three';\nimport { deepClone } from '../../utils';\nimport Entity from \"./Entity\";\n\nexport default class SceneManager {\n  public static instance: SceneManager;\n  private isPlaying: boolean = false; // If true, in play mode, else in edit mode\n  private _scene!: THREE.Scene;\n  private _entities: Entity[] = [];\n  private _scenePayload: Engine.ScenePayload | undefined;\n\n  // Selection\n  private _selectedEntityID: Engine.EntityID | undefined;\n  \n  // Helpers\n  private _axes = new THREE.AxesHelper(2);\n  private _gridHelper = new THREE.GridHelper(60, 6);\n  private _selectionHelper: THREE.BoxHelper | undefined;\n\n  constructor() {\n    if (SceneManager.instance) { return; }\n    SceneManager.instance = this;\n    this._scene = new THREE.Scene();\n    this._scene?.add(this._axes);\n    this._scene?.add(this._gridHelper);\n    this._scene?.add(new THREE.DirectionalLight(0xffffff, 0.6));\n    this._scene?.add(new THREE.AmbientLight(0x555555));\n  }\n\n  static isPlaying() {\n    return SceneManager.instance.isPlaying;\n  }\n\n  getScene(): THREE.Scene {\n    return this._scene;\n  }\n\n  setScenePayload(payload: Engine.ScenePayload) {\n    this._scenePayload = payload;\n  }\n\n  getSelectedEntityPayload(): Engine.EntityProps | undefined {\n    return this._scenePayload?.sceneConfig.entities.find(e => e.id === this._selectedEntityID);\n  }\n\n  updateEntityPayload(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    const updateIndex = this._entities.findIndex(e => e.id === entityID);\n    if (updateIndex === -1) return;\n    this._entities[updateIndex].init(entityProps);\n    this._selectionHelper?.setFromObject(this._entities[updateIndex].mesh);\n  }\n\n  updateScene() {\n    this._entities.forEach(entity => {\n      entity.update();\n    });\n  }\n\n  /** Runs scene in play mode.\n   * \n   *  In play mode, the components in all \n   *  entities are updated each frame.\n   */\n  runPlayScene() {\n    this.isPlaying = true;\n    this._resetScene();\n    this._scene.remove(this._axes);\n    this._scene.remove(this._gridHelper);\n    if (this._selectionHelper) this._scene.remove(this._selectionHelper);\n    \n    this._buildEntities();\n  }\n\n  /** Runs scene in edit mode\n   * \n   *  In edit mode, the scene is reset and all\n   *  entities are reverted to their initial states, \n   *  based on the scenePayload.\n   */\n  runEditScene() {\n    this.isPlaying = false;\n    this._resetScene();\n    this._scene.add(this._axes);\n    this._scene.add(this._gridHelper);\n    if (this._selectionHelper) this._scene.add(this._selectionHelper);\n    this._buildEntities();\n  }\n\n  /** Select an entity by ID */\n  selectByID(entityID: Engine.EntityID) {\n    console.debug('selecting by id', entityID);\n    this.select(this._entities.find(e => e.id === entityID)?.mesh ?? undefined);\n  }\n\n  /** Sets Entity with corresponding object as selected,\n   *  if no object is passed, deselects any selected entity\n   * @param object THREE.Object3D\n   */\n  select(object?: THREE.Object3D) {\n    if (this.isPlaying) return;\n    if (!object && this._selectionHelper && this._selectedEntityID) {\n      this._scene.remove(this._selectionHelper);\n      this._selectedEntityID = undefined;\n      return;\n    }\n    \n    if (object) {\n      this._selectedEntityID = object.uuid;\n      if (!this._selectionHelper) {\n        this._selectionHelper = new THREE.BoxHelper(object, 0xffff00);\n        this._scene.add(this._selectionHelper);\n        return;\n      }\n      \n      this._selectionHelper?.setFromObject(object);\n      this._scene.add(this._selectionHelper);\n    }\n  }\n\n  getSelectedEntity(): Engine.EntityID | undefined {\n    return this._selectedEntityID;\n  }\n\n  buildEntity(props: Engine.EntityProps): Entity {\n    const entity = new Entity(props);\n    this._entities.push(entity);\n    this._scene.add(entity.mesh);\n    return entity;\n  }\n\n  private _resetScene() {\n    this._entities.forEach(entity => {\n      this._scene.remove(entity.mesh);\n      entity.destroy();\n    });\n    this._entities = [];\n  }\n\n  private _buildEntities() {\n    if (!this._scenePayload) return;\n    // This prevents all of the strange object mutation\n    const localPayloadCopy = deepClone<Engine.ScenePayload>(this._scenePayload);\n    localPayloadCopy.sceneConfig.entities.forEach(entityProps => {\n      this.buildEntity(entityProps);\n    });\n  }\n}","export const deepClone = <T>(input: T): T => {\n  return JSON.parse(JSON.stringify(input)) as T\n}","import * as THREE from 'three';\nimport SceneManager from './SceneManager';\n\nexport default class CameraManager {\n  public static instance: CameraManager;\n  private renderer = new THREE.WebGLRenderer({ antialias: true });\n  private renderElement: HTMLElement | undefined;\n  private raycaster: THREE.Raycaster = new THREE.Raycaster();\n  private fov = 60;\n  private near = 0.01;\n  private far = 20000;\n  private camera!: THREE.PerspectiveCamera;\n  private controls: any;\n\n\n  constructor() {\n    if (CameraManager.instance) return CameraManager.instance;\n    CameraManager.instance = this;\n    this._setCamera();\n    window.addEventListener('resize', () => this.handleResize());\n  }\n\n  setup(renderElement: HTMLElement, scene: THREE.Scene) {\n    this.renderer.setSize(renderElement.clientWidth, renderElement.clientHeight);\n    this.renderElement = renderElement;\n    this.renderElement.appendChild(this.renderer.domElement);\n    this.handleResize();\n    this._setControls();\n    this._setRaycaster();\n    this._runSceneLoop(scene);\n  }\n\n  resetCamera() {\n    this.renderer.setAnimationLoop(null);\n  }\n\n  handleClick(mouseX: number, mouseY: number) {\n    const pointer = new THREE.Vector2(mouseX, mouseY);\n    this.raycaster.setFromCamera(pointer, this.camera);\n    const intersects = this.raycaster.intersectObjects(SceneManager.instance.getScene().children, true).filter(e => e.object.type === 'Mesh');\n    \n    if (intersects.length > 0) {\n      SceneManager.instance.select(intersects[0].object);\n    }\n    else {\n      SceneManager.instance.select();\n    }\n  }\n\n  private _setCamera() {\n    if (!this.renderElement) {\n      this.camera = new THREE.PerspectiveCamera(this.fov, window.innerWidth / window.innerHeight, this.near, this.far);\n      this.camera.position.y = 10;\n      this.camera.rotation.x = -0.1;\n    }\n  }\n\n  private _runSceneLoop(scene: THREE.Scene) {\n    this.renderer.setAnimationLoop((time: number) => this.update(scene));\n  }\n\n  private _setRaycaster() {\n    this.raycaster = new THREE.Raycaster();\n  }\n\n  private _setControls() {\n    this.camera.position.z = 50;\n  }\n\n  handleResize() {\n    if (!this.renderElement) return;\n    const dimensions = this.renderElement.getBoundingClientRect();\n    this.camera.aspect = dimensions.width / dimensions.height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.renderElement.clientWidth, this.renderElement.clientHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n  }\n\n  update(scene: THREE.Scene) {\n    this.renderer.render(scene, this.camera);\n    SceneManager.instance.updateScene();\n  }\n}","import CameraManager from \"./CameraManager\";\nimport ComponentManager from \"./ComponentManager\";\nimport GeometryManager from \"./GeometryManager\";\nimport MaterialManager from \"./MaterialManager\";\nimport SceneManager from \"./SceneManager\";\n\nclass EngineContext {\n  sceneManager: SceneManager;\n  cameraManager: CameraManager;\n  componentManager: ComponentManager;\n  materialManager: MaterialManager;\n  geometryManager: GeometryManager;\n  private _renderElement!: HTMLElement;\n  private isInitialized = false;\n\n  constructor() {\n    this.sceneManager = new SceneManager();\n    this.cameraManager = new CameraManager();\n    this.componentManager = new ComponentManager();\n    this.materialManager = new MaterialManager();\n    this.geometryManager = new GeometryManager();\n  }\n\n  init(renderElement: HTMLElement, payload?: Engine.ScenePayload) {\n    if (this.isInitialized) return;\n    this._renderElement = renderElement;\n    if (payload) this.updateScenePayload(payload);\n    this.runEditMode();\n    this.isInitialized = true;\n  }\n\n  runPlayMode() {\n    this.sceneManager.runPlayScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  runEditMode() {\n    console.debug('ran run edit mode');\n    this.sceneManager.runEditScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  updateScenePayload(payload: Engine.ScenePayload) {\n    this.sceneManager.setScenePayload(payload);\n  }\n\n  updateSpecificEntity(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    this.sceneManager.updateEntityPayload(entityID, entityProps);\n  }\n\n  addNewEntity(entity: Engine.EntityProps) {\n    this.sceneManager.buildEntity(entity);\n\n  }\n\n  isPlaying(): boolean {\n    return SceneManager.isPlaying() ?? false\n  }\n\n  handleClick(mouseX: number, mouseY: number) {\n    this.cameraManager.handleClick(mouseX, mouseY);\n  }\n\n  selectEntity(entityID: Engine.EntityID) {\n    this.sceneManager.selectByID(entityID);\n  }\n\n  getSelectedEntity(): Engine.EntityID | undefined {\n    return this.sceneManager.getSelectedEntity();\n  }\n\n  getSelectedEntityProps(): Engine.EntityProps | undefined {\n    return this.sceneManager.getSelectedEntityPayload();\n  }\n}\n\nconst context = new EngineContext();\n\nexport default context;","import * as THREE from 'three';\nimport { ReactElement, useEffect, useMemo } from 'react';\nimport { createContext } from 'react';\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport context from '../../engine/core/EngineContext';\n\ninterface ISceneContext {\n  sceneConfig: Engine.SceneConfig;\n  setEntities: (props: Engine.EntityProps[]) => void;\n  selectedEntityID: string | null;\n  setSelectedEntityID: (entityID: string | null) => void;\n  setCameraProps: (cameraProps: Engine.CameraProps) => void;\n};\n\nconst initialValue = {\n  sceneConfig: {\n    entities: [] as Engine.EntityProps[],\n    camera: {\n      position: new THREE.Vector3(),\n      fov: 70,\n      near: 0.1,\n      far: 1000,\n      controls: \"orbit\" as Engine.ControlType\n    }\n  },\n  selectedEntityID: null,\n  setEntities: (entities: Engine.EntityProps[]) => { },\n  setSelectedEntityID: (entityID: string | null) => { },\n  setCameraProps: (cameraProps: Engine.CameraProps) => { }\n};\n\nexport const SceneContext = createContext<ISceneContext>(initialValue);\n\nexport const SceneProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [cameraProps, setCameraProps] = useState<Engine.CameraProps>({\n    position: new THREE.Vector3(),\n    fov: 70,\n    near: 0.1,\n    far: 1000,\n    controls: \"orbit\" as Engine.ControlType\n  });\n\n  const [entities, setEntities] = useState<Engine.EntityProps[]>([\n    {\n      id: uuidv4(),\n      name: \"Entity A\",\n      material: 'normal',\n      geometry: 'box',\n      children: [],\n      components: {\n        \"Transform\": {\n          position: {x: 3, y: 0.2, z: 1},\n          rotation: {x: 3, y: 3, z: 3},\n          scale: {x: 2, y: 1, z: 1},\n        },\n      }\n    },\n  ])\n  const [selectedEntityID, setSelectedEntityID] = useState<string | null>(null);\n\n  const sceneConfig = useMemo(() => (\n    {\n      entities,\n      camera: cameraProps\n    }\n  ), [entities, cameraProps]);\n\n  useEffect(() => {\n    if (selectedEntityID) {\n      const entityProps = entities.find(e => e.id === selectedEntityID);\n      if (!entityProps) return;\n      context.updateSpecificEntity(selectedEntityID, entityProps);\n    }\n  }, [sceneConfig])\n\n  const contextValue = {\n    sceneConfig,\n    selectedEntityID,\n    setEntities,\n    setCameraProps,\n    setSelectedEntityID\n  }\n  return (\n    <SceneContext.Provider value={contextValue}>\n      {children}\n    </SceneContext.Provider>\n  );\n}","import { useContext, useMemo} from \"react\";\nimport { SceneContext } from \"./SceneContext\";\nimport context from \"../../engine/core/EngineContext\";\nimport { generateNewEntity } from \"../../utils/entity.utils\";\n\nconst useScene = () => {\n  const { sceneConfig, setEntities, selectedEntityID, setSelectedEntityID } = useContext(SceneContext);\n\n\n  const selectEntity = (id: Engine.EntityID) => {\n    if (id === selectedEntityID) {\n      context.selectEntity('')\n      setSelectedEntityID('')\n      return;\n    }\n    context.selectEntity(id);\n    setSelectedEntityID(id);\n  };\n\n  const selectedEntity: Engine.EntityProps | null = useMemo(() => {\n    return sceneConfig.entities.find(e => e.id === selectedEntityID) ?? null;\n  }, [sceneConfig, selectedEntityID]);\n\n\n  const updateEntity = (entity: Engine.EntityProps) => {\n    const index = sceneConfig.entities.findIndex(e => e.id === entity.id);\n    if (index === -1) {\n      console.error(`Couldn't find ${entity.id} in sceneConfig.entities`);\n    };\n    sceneConfig.entities[index] = entity;\n    setEntities([...sceneConfig.entities]);\n  }\n\n  const updateEntityParent = (child: Engine.EntityID, newParent: Engine.EntityID | null) => {\n    // TODO: Implement this\n  }\n\n  const createEntity = () => {\n    const newEntity: Engine.EntityProps = generateNewEntity();\n    setEntities([...sceneConfig.entities, newEntity]);\n    context.addNewEntity(newEntity);\n  }\n\n  return {\n    sceneConfig,\n    selectedEntity, \n    createEntity, \n    selectEntity,\n    updateEntity,\n    updateEntityParent,\n  };\n}\n\nexport default useScene;","import { v4 as uuidv4 } from 'uuid';\nexport const generateNewEntity = (): Engine.EntityProps => {\n  const id = uuidv4();\n  return {\n    id,\n    name: \"New Entity\",\n    geometry: 'box',\n    material: 'normal',\n    children: [],\n    components: {\n      Transform: {\n        position: { x: 0, y: 0, z: 0 },\n        rotation: { x: 0, y: 0, z: 0 },\n        scale: { x: 1, y: 1, z: 1 },\n      }\n    },\n  };\n}","import { useContext, } from \"react\";\nimport { generateNewScript } from \"../../utils/script.utils\";\nimport { ScriptContext } from \"./ScriptContext\";\n\nconst useScripts = () => {\n  const { scripts, setScripts, selectedScript, setSelectedScript, compileScripts } = useContext(ScriptContext);\n\n  const loadScript = (scriptID: string) => {\n    const script = scripts.find(s => s.id === scriptID);\n    setSelectedScript(script);\n  };\n  \n  const saveScript = (script: Engine.Script) => {\n    const foundScript = scripts.find(s => s.id === script.id);\n    if (!foundScript) return;\n    foundScript.content = script.content;\n    compileScripts();\n  };\n  \n  const createScript = (name: string) => {\n    const newScript = generateNewScript(name);\n    setScripts([...scripts, newScript]);\n  };\n\n\n  return {\n    scripts,\n    setScripts,\n    selectedScript,\n    setSelectedScript,\n    loadScript,\n    saveScript,\n    createScript,\n  };\n}\n\nexport default useScripts;","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport context from \"../../engine/core/EngineContext\";\nimport SceneManager from \"../../engine/core/SceneManager\";\nimport useScene from \"../scene/useScene\";\nimport useScripts from \"../scripts/useScripts\";\nimport { EditorContext } from \"./EditorContext\";\n\nconst useEditor = () => {\n  const { scripts } = useScripts();\n  const { sceneConfig, selectEntity } = useScene();\n  const { renderElement } = useContext(EditorContext);\n  const [isRunning, setIsRunning] = useState(context.isPlaying());\n\n  const scenePayload = useMemo(() => ({ sceneConfig, scripts }), [sceneConfig, scripts]);\n\n  useEffect(() => {\n    const init = () => {\n      if (!renderElement || !renderElement.current || !scenePayload) { return; }\n      context.init(renderElement.current, scenePayload);\n    };\n    init();\n  }, [renderElement]);\n\n  useEffect(() => {\n    context.updateScenePayload(scenePayload);\n  }, [scenePayload])\n\n  const toggleRun = () => {\n    if (!renderElement || !renderElement.current) { return; }\n    if (SceneManager.isPlaying()) {\n      setIsRunning(false);\n      context.runEditMode();\n      return;\n    }\n    context.runPlayMode();\n    setIsRunning(true);\n  };\n\n  const handleClickScene = (e: React.MouseEvent) => {\n    const canvas: HTMLCanvasElement = e.target as unknown as HTMLCanvasElement;\n    const domRect: DOMRect = canvas.getBoundingClientRect();\n    const [mouseX, mouseY]: [number, number] = [((e.clientX - domRect.x) / domRect.width) * 2 - 1, -((e.clientY - domRect.y) / domRect.height) * 2 + 1];\n    context.handleClick(mouseX, mouseY);\n    selectEntity(context.getSelectedEntity() ?? '');\n  }\n\n  return {\n    renderElement,\n    isRunning,\n    toggleRun,\n    handleClickScene\n  };\n}\n\nexport default useEditor;","import { useState } from 'react';\nimport { useEffect } from 'react';\nimport ComponentManager from '../../engine/core/ComponentManager';\nimport useEditor from '../../state/editor/useEditor';\nimport useScene from '../../state/scene/useScene';\n\ninterface ComponentFieldValueProps {\n  field: Engine.ComponentPropType;\n  updateField: (field: Engine.ComponentPropType) => void;\n}\n\nconst ComponentFieldValue = ({ field, updateField }: ComponentFieldValueProps): React.ReactElement => {\n\n  const handleUpdateField = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (typeof field === 'number') {\n      updateField(Number(e.target.value));\n      return;\n    }\n\n    if (typeof field === 'string') {\n      updateField(e.target.value);\n    }\n  }\n\n  if (typeof field === 'number' || typeof field === 'string') return (\n    <div className=\"bg-gray-700 text-white px-1  w-max\">\n      <input\n        type={typeof field === 'string' ? 'string' : 'number'}\n        value={typeof field === 'number' ? field : field}\n        onChange={handleUpdateField}\n        className=\"bg-gray-700 w-16 font-mono text-xs\"\n      />\n    </div>\n  );\n\n  if (Array.isArray(field)) return (\n    <div>array field</div>\n  );\n\n  return (\n    <div className=\"bg-gray-700 text-white px-2 grid grid-cols-3 gap-1\">\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">x:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.x}\n          onChange={e => updateField({ x: Number(e.target.value), y: field?.y ?? 0, z: field?.z ?? 0 })}\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">y:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.y}\n          onChange={e => updateField({ x: field?.x ?? 0, y: Number(e.target.value), z: field?.z ?? 0 })}\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">z:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.z}\n          onChange={e => updateField({ x: field?.x ?? 0, y: field?.y ?? 0, z: Number(e.target.value) })}\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n    </div>\n  )\n}\n\ninterface ComponentNodeProps {\n  componentType: Engine.ComponentType;\n  componentProps: Engine.ComponentProps;\n  updateComponent: (type: Engine.ComponentType, field: string, value: Engine.ComponentPropType) => void;\n}\n\nconst ComponentNode = ({\n  componentType,\n  componentProps,\n  updateComponent\n}: ComponentNodeProps): React.ReactElement => {\n\n  return (\n    <div className=\"bg-gray-800 text-white p-2\">\n      <h3 className=\"mb-2\">{componentType}</h3>\n      <div className=\"space-y-2\">\n        {\n          Object.entries(componentProps).map(([fieldName, fieldValue]) => (\n            <div key={fieldName} className=\"flex space-x-2\">\n              <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>{fieldName}</p>\n              <ComponentFieldValue field={fieldValue} updateField={e => updateComponent(componentType, fieldName, e)} />\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default function Controls() {\n  const { isRunning } = useEditor()\n  const { selectedEntity, updateEntity, sceneConfig, } = useScene();\n\n  const [controls, setControls] = useState<Record<Engine.ComponentType, Engine.ComponentProps>>({});\n  const [materialType, setMaterialType] = useState<Engine.MaterialType>('normal');\n  const [geometryType, setGeometryType] = useState<Engine.GeometryType>('box');\n\n  useEffect(() => {\n    if (!selectedEntity) return;\n    setMaterialType(selectedEntity.material);\n    setGeometryType(selectedEntity.geometry);\n  }, [selectedEntity])\n\n  // * Handles populating all correct value fields when selecting entity */\n  useEffect(() => {\n    console.debug('update component fields', selectedEntity);\n    const updateComponentFields = (entity: Engine.EntityProps) => {\n      const propFields: Record<Engine.ComponentType, Engine.ComponentProps> = {};\n      Object.entries(entity.components).forEach(([type, props]) => {\n        propFields[type] = props;\n      });\n      setControls({ ...propFields } as any);\n    }\n    if (selectedEntity) updateComponentFields(selectedEntity);\n  }, [selectedEntity, sceneConfig, isRunning]);\n\n  const addComponent = (componentName: Engine.ComponentType) => {\n    if (!selectedEntity) return;\n    const componentProps = ComponentManager.instance.getComponentProps(componentName);\n    // const newComponentName = 'mover';\n    // const newComponentProps: Engine.ComponentProps = {\n    //   speed: 0.05\n    // };\n    // const newComponentName = 'rotator';\n    // const newComponentProps: Engine.ComponentProps = {\n    //   speed: 0.05\n    // };\n    if (!componentProps) return;\n    selectedEntity.components[componentName] = componentProps;\n    updateEntity(selectedEntity);\n  }\n\n  const updateComponent = (type: Engine.ComponentType, field: string, value: Engine.ComponentPropType) => {\n    const newControls = { ...controls };\n    newControls[type][field] = value;\n    setControls(newControls);\n    if (selectedEntity) {\n      selectedEntity.components = newControls;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  const updateMaterial = (newMaterial: Engine.MaterialType) => {\n    setMaterialType(newMaterial);\n    if (selectedEntity) {\n      selectedEntity.material = newMaterial;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  const updateGeometry = (newGeometry: Engine.GeometryType) => {\n    setGeometryType(newGeometry);\n    if (selectedEntity) {\n      selectedEntity.geometry = newGeometry;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  // todo: context.sceneManager.getSelectedEntityPayload()?.components?.transform.rotation\n\n  if (!selectedEntity) return (<div className=\"bg-gray-900 h-full flex flex-col space-y-1\"></div>)\n\n  const getComponentOptions = (): { label: string, value: string }[] => {\n    const components = ComponentManager.instance.getComponents();\n    return Object.keys(components).map(component => ({ label: component, value: component }));\n  }\n\n  const componentOptions = getComponentOptions();\n\n  const materialOptions: { label: string, value: string }[] = [\n    {\n      label: 'Normal',\n      value: 'normal',\n    },\n    {\n      label: 'Basic',\n      value: 'basic',\n    },\n    {\n      label: 'Lambert',\n      value: 'lambert',\n    },\n    {\n      label: 'Phong',\n      value: 'phong'\n    }\n  ]\n\n  const geometryOptions: { label: string, value: string }[] = [\n    {\n      label: 'Box',\n      value: 'box'\n    },\n    {\n      label: 'Sphere',\n      value: 'sphere',\n    },\n    {\n      label: 'Torus',\n      value: 'torus',\n    },\n  ]\n\n  return (\n    <div className=\"bg-gray-900 h-full flex flex-col space-y-1\">\n      <section className=\"space-y-2\">\n        {\n          Object.entries(controls).map(([type, props]) =>\n            <ComponentNode\n              componentType={type}\n              componentProps={props}\n              key={type}\n              updateComponent={updateComponent}\n            />\n          )\n        }\n      </section>\n      <section>\n        {\n          componentOptions.map(({ label, value }) => (\n            <button\n              className=\"block mx-auto mt-2\"\n              onClick={() => addComponent(value)}\n              key={value}>Add {label}</button>\n          ))\n        }\n      </section>\n      <section>\n        <div className=\"bg-gray-800 text-white p-2\">\n          <h3>Mesh</h3>\n          <div className=\"space-y-2\">\n            <div className=\"flex space-x-2 items-center\">\n              <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>Material</p>\n              <select onChange={e => updateMaterial(e.target.value)} defaultValue={materialType}>\n                {\n                  materialOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)\n                }\n              </select>\n            </div>\n            <div className=\"flex space-x-2 items-center\">\n              <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>Geometry</p>\n              <select onChange={e => updateGeometry(e.target.value)} value={geometryType}>\n                {\n                  geometryOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)\n                }\n              </select>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div >\n  )\n}","import React, { useMemo, ReactElement } from 'react';\nimport useScene from '../../state/scene/useScene';\n\ninterface Props {\n  entity: Engine.EntityProps;\n}\n\nfunction TreeNode({ entity }: Props): ReactElement {\n  const { selectedEntity, selectEntity } = useScene();\n\n  const isSelected = useMemo(() => selectedEntity?.id === entity.id, [selectedEntity, entity.id]);\n  \n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    selectEntity(entity.id);\n  }\n\n  return (\n    <div\n      className={`\n    p-2\n    rounded-md\n    transition\n    cursor-pointer\n    select-none\n    ${isSelected ? 'hover:bg-indigo-500' : 'hover:bg-indigo-400'}\n    ${isSelected && 'bg-indigo-300'}`} onClick={handleClick}>\n      <h1>{entity?.name ?? '__ENTITY__'}</h1>\n    </div>\n  )\n\n}\n\nexport default function TreeViewPanel(): ReactElement {\n  const { sceneConfig } = useScene();\n  return (\n    <div className=\"bg-indigo-200 p-1.5 space-y-1\">\n      {\n        sceneConfig.entities.map(entity =>\n          <TreeNode\n            key={entity.id}\n            entity={entity}\n          />\n        )\n      }\n    </div>\n  )\n}\n","import { ReactElement } from 'react'\nimport useScripts from '../../state/scripts/useScripts'\n\nexport default function ScriptPanel(): ReactElement {\n  const { scripts, loadScript } = useScripts()\n\n  return (\n    <div className=\"bg-indigo-400 h-full p-2\">\n      {\n        scripts.map(s => (\n          <div\n            className=\"transition hover:bg-indigo-500 p-0.5 rounded-md font-mono text-sm\"\n            onClick={() => loadScript(s.id)} key={s.id}>\n            {s.name}.{s.language}\n          </div>)\n        )\n      }\n    </div>\n  )\n}\n","import React, { ReactElement, useEffect, useState } from 'react'\nimport useEditor from '../../state/editor/useEditor'\nimport useScene from '../../state/scene/useScene'\nimport useScripts from '../../state/scripts/useScripts'\nimport Controls from '../components/Controls'\nimport TreeViewPanel from '../components/TreeViewPanel'\nimport Editor from \"@monaco-editor/react\";\nimport ScriptPanel from '../components/ScriptPanel'\n\nexport default function BrowserEngine(): ReactElement {\n  const { createEntity, selectedEntity } = useScene()\n  const { renderElement, toggleRun, isRunning, handleClickScene } = useEditor()\n  const { createScript, selectedScript, loadScript, saveScript } = useScripts();\n\n  const [scriptBody, setScriptBody] = useState(selectedScript?.content ?? '');\n\n  useEffect(() => {\n    if (!scriptBody && selectedScript) {\n      setScriptBody(selectedScript.content);\n    }\n  }, [selectedScript]);\n\n  const handleEditorChange = (newValue: string | undefined) => {\n    setScriptBody(newValue ?? '')\n  }\n\n  const handleCreateScript = () => {\n    createScript('Component')\n  }\n\n  const handleSaveScript = () => {\n    if (selectedScript) {\n      saveScript({ ...selectedScript, content: scriptBody })\n    }\n  }\n\n  const handleCloseScript = () => {\n    loadScript('');\n  }\n\n  return (\n    <main className=\"w-screen h-screen overflow-hidden\">\n      <div className={`h-0.5 transition bg-red-600 ${isRunning && 'bg-green-500'}`}></div>\n      <nav className=\"bg-gray-900 p-2 flex w-full\">\n        <div className=\"space-x-2\">\n          <button onClick={toggleRun} className=\"primary\">{isRunning ? 'Stop' : 'Run'} Scene</button>\n          <button onClick={createEntity} className=\"secondary\">Add Entity</button>\n          <button onClick={handleCreateScript} className=\"secondary\">Add Script</button>\n        </div>\n        {\n          selectedScript &&\n          (\n            <div className=\"space-x-2 ml-auto\">\n              <button\n                className=\"secondary\"\n                onClick={handleCloseScript}\n              >Close Editor</button>\n              <button\n                onClick={handleSaveScript}\n                className=\"submit\">Save script</button>\n            </div>\n          )\n        }\n      </nav>\n      <section className=\"w-full h-full grid\" style={{ gridTemplateColumns: '1fr 17rem' }}>\n        <div className=\"h-full w-full grid relative\">\n          {renderElement && (<div className=\"bg-gray-600\" id=\"scene\" ref={renderElement} onClick={(e) => handleClickScene(e)} />)}\n          {\n            selectedScript && (\n              <>\n                <div className=\"absolute h-full w-full\" key={selectedScript.id}>\n                  <Editor\n                    height=\"100%\"\n                    width=\"100%\"\n                    defaultLanguage=\"javascript\"\n                    defaultValue={selectedScript.content}\n                    theme=\"vs-dark\"\n                    onChange={handleEditorChange} />\n                </div>\n              </>\n            )\n          }\n        </div>\n        <div className=\"grid grid-rows-5 gap-0 5\">\n          <TreeViewPanel />\n          <div className=\"row-span-2\">\n            <Controls />\n          </div>\n          <div className=\"row-span-2\">\n            <ScriptPanel />\n          </div>\n        </div>\n      </section>\n      {/* {selectedScript && (<section className=\"fixed inset-0 grid place-items-center\" onClick={() => loadScript('')}>\n        <div\n          onClick={e => {\n            e.stopPropagation();\n            saveScript({ ...selectedScript, content: scriptBody });\n          }}\n          className=\"absolute top-10 right-10 py-2 px-4 cursor-pointer rounded-md bg-green-600 text-white\">\n          Save\n        </div>\n        <div className=\"bg-black monaco-editor\" style={{ width: '60vw' }} onClick={e => e.stopPropagation()}>\n          <Editor\n            height=\"90vh\"\n            defaultLanguage=\"javascript\"\n            defaultValue={selectedScript.content}\n            theme=\"vs-dark\"\n            onChange={handleEditorChange} />\n        </div>\n      </section>)} */}\n    </main>\n  )\n}\n","import { EditorProvider } from \"./state/editor/EditorContext\";\nimport { SceneProvider } from \"./state/scene/SceneContext\";\nimport { ScriptProvider } from \"./state/scripts/ScriptContext\";\nimport BrowserEngine from \"./ui/base/BrowserEngine\";\n\nfunction App() {\n  return (\n    <SceneProvider>\n      <ScriptProvider>\n        <EditorProvider>\n          <BrowserEngine />\n        </EditorProvider>\n      </ScriptProvider>\n    </SceneProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}