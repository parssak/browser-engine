{"version":3,"sources":["engine/core/Entity.ts","engine/core/SceneManager.ts","utils/index.ts","engine/core/Component.ts","engine/core/Transform.ts","engine/core/ComponentManager.ts","utils/script.utils.ts","engine/core/MaterialManager.ts","engine/core/GeometryManager.ts","state/scripts/ScriptContext.tsx","utils/entity.utils.ts","state/editor/EditorContext.tsx","engine/core/CameraManager.ts","engine/core/EngineContext.ts","state/scene/SceneContext.tsx","state/scene/useScene.tsx","state/scripts/useScripts.tsx","state/editor/useEditor.tsx","ui/components/inspector/ComponentFieldValue.tsx","ui/components/inspector/ComponentNode.tsx","ui/components/inspector/InspectorPanel.tsx","ui/components/nav/Nav.tsx","ui/components/editor/EditorPanel.tsx","ui/components/scene/ScenePanel.tsx","ui/components/hierarchy/HierarchyNode.tsx","ui/components/hierarchy/HierarchyPanel.tsx","ui/components/project/ProjectPanel.tsx","ui/base/BrowserEngine.tsx","App.tsx","index.tsx"],"names":["Entity","props","name","mesh","id","components","this","init","initMesh","initComponents","mat","MaterialManager","instance","getMaterial","material","geometry","GeometryManager","getGeometry","THREE","uuid","Object","entries","forEach","type","ComponentManager","setComponent","child","SceneManager","isPlaying","_startComponents","_updateComponents","componentName","values","component","start","update","_scene","_entities","_scenePayload","_selectedEntityID","_axes","_gridHelper","_selectionHelper","add","load","payload","sceneConfig","entities","find","e","entityID","entityProps","updateIndex","findIndex","setFromObject","entity","_resetScene","remove","background","_buildEntities","_startEntities","error","console","select","undefined","object","push","destroy","input","JSON","parse","stringify","buildEntity","Component","Transform","position","rotation","scale","applyMatrix","setX","x","setY","y","setZ","z","setRotationFromEuler","applyPosition","applyRotation","applyScale","registerComponent","constructor","componentProps","componentType","getComponent","prop","Array","isArray","length","componentInstance","COMPONENT_DEF","baseScriptContent","generateNewScript","uuidv4","language","content","initPropPlaceholder","formatScriptString","script","replace","injectInitSection","scriptBody","actualInitSection","map","key","value","join","wireframe","initialValue","scripts","selectedScript","setScriptBody","setScripts","setSelectedScript","compileScripts","ScriptContext","createContext","ScriptProvider","children","useState","three","Instantiate","bind","CreateEntity","generateNewEntity","scriptCopy","removePrefix","substring","indexOf","pureProps","replaceAll","eval","formattedScript","NewComponent","setPrototypeOf","err","useEffect","contextValue","Provider","EditorContext","EditorProvider","renderElement","useRef","CameraManager","renderer","antialias","alpha","raycaster","fov","near","far","camera","controls","_setCamera","window","addEventListener","handleResize","scene","setSize","clientWidth","clientHeight","appendChild","domElement","_setControls","_setRaycaster","_runSceneLoop","setAnimationLoop","mouseX","mouseY","pointer","setFromCamera","intersects","intersectObjects","getScene","filter","innerWidth","innerHeight","time","dimensions","getBoundingClientRect","aspect","width","height","updateProjectionMatrix","setPixelRatio","devicePixelRatio","render","updateScene","context","sceneManager","cameraManager","componentManager","materialManager","geometryManager","_renderElement","isInitialized","updateScenePayload","runEditMode","runPlayScene","setup","runEditScene","setScenePayload","updateEntityPayload","handleClick","selectByID","getSelectedEntity","getSelectedEntityPayload","selectedEntityID","setEntities","setSelectedEntityID","setCameraProps","cameraProps","SceneContext","SceneProvider","useMemo","updateSpecificEntity","useScene","useContext","selectedEntity","createEntity","newEntity","addNewEntity","selectEntity","updateEntity","index","updateEntityParent","newParent","useScripts","loadScript","scriptName","foundScript","saveScript","s","createScript","newScript","useEditor","isRunning","setIsRunning","scenePayload","current","toggleRun","runPlayMode","handleClickScene","domRect","target","clientX","clientY","ComponentFieldValue","field","updateField","className","onChange","Number","ComponentNode","updateComponent","onClick","fieldName","fieldValue","style","minWidth","InspectorPanel","setControls","materialType","setMaterialType","geometryType","setGeometryType","propFields","updateComponentFields","newControls","componentOptions","getComponents","currentComponents","keys","c","includes","label","getComponentOptions","log","getComponentProps","addComponent","newMaterial","defaultValue","option","newGeometry","Nav","EditorPanel","defaultLanguage","theme","newValue","ScenePanel","ref","HierarchyNode","isSelected","stopPropagation","HierarchyPanel","ProjectPanel","BrowserEngine","gridTemplateColumns","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b06eb405.chunk.js","sourcesContent":["import * as THREE from 'three';\nimport Component from './Component';\nimport ComponentManager from './ComponentManager';\nimport MaterialManager from './MaterialManager';\nimport GeometryManager from './GeometryManager';\nimport SceneManager from './SceneManager';\n\nexport default class Entity {\n  public name: string = \"\";\n  public mesh!: THREE.Mesh;\n  public readonly id: Engine.EntityID;\n  public components: Record<Engine.ComponentType, Component> = {};\n\n  constructor(props: Engine.EntityProps) {\n    this.id = props.id;\n    this.name = props.name;\n    this.init(props);\n  }\n\n  init(props: Engine.EntityProps) {\n    this.initMesh(props);\n    this.initComponents(props.components);\n  }\n\n  initMesh(props: Engine.EntityProps) {\n    const mat = MaterialManager.instance.getMaterial(props.material);\n    const geometry = GeometryManager.instance.getGeometry(props.geometry);\n    if (!this.mesh) {\n      this.mesh = new THREE.Mesh(geometry, mat);\n    }\n    else {\n      this.mesh.geometry = geometry;\n      this.mesh.material = mat;\n    }\n    this.mesh.uuid = this.id;\n    this.mesh.name = this.name;\n  }\n\n  initComponents(components: Record<Engine.ComponentType, Engine.ComponentProps>) {\n    this.components = {};\n    Object.entries(components).forEach(([type, props]) => {\n      ComponentManager.instance.setComponent(this, type, props);\n    })\n  }\n\n  // TODO: Implement\n  addChild(child: Entity) { }\n\n  // TODO: Implement\n  destroy() { }\n\n  start() {\n    if (SceneManager.isPlaying()) {\n      this._startComponents();\n    }\n  }\n\n  update() {\n    if (SceneManager.isPlaying()) {\n      this._updateComponents();\n    }\n  }\n\n  getComponent(componentName: string): Component | undefined {\n    return this.components[componentName];\n  }\n\n  private _startComponents() {\n    Object.values(this.components).forEach((component) => component.start())\n  }\n\n  private _updateComponents() {\n    Object.values(this.components).forEach((component) => component.update())\n  }\n}","import * as THREE from \"three\"\nimport { deepClone } from \"../../utils\"\nimport Entity from \"./Entity\"\n\nexport default class SceneManager {\n  public static instance: SceneManager\n  private isPlaying: boolean = false // If true, in play mode, else in edit mode\n  private _scene!: THREE.Scene\n  private _entities: Entity[] = []\n  private _scenePayload: Engine.ScenePayload | undefined\n\n  // Selection\n  private _selectedEntityID: Engine.EntityID | undefined\n\n  // Helpers\n  private _axes = new THREE.AxesHelper(2)\n  private _gridHelper = new THREE.GridHelper(60, 6)\n  private _selectionHelper: THREE.BoxHelper | undefined\n\n  constructor() {\n    if (SceneManager.instance) {\n      return\n    }\n    SceneManager.instance = this\n    this._scene = new THREE.Scene()\n    this._scene?.add(this._axes)\n    this._scene?.add(this._gridHelper)\n    this._scene?.add(new THREE.DirectionalLight(0xffffff, 0.6))\n    this._scene?.add(new THREE.AmbientLight(0x555555))\n    const loader = new THREE.CubeTextureLoader()\n    const texture = loader.load([\n      \"resources/images/cubemaps/computer-history-museum/pos-x.jpg\",\n      \"resources/images/cubemaps/computer-history-museum/neg-x.jpg\",\n      \"resources/images/cubemaps/computer-history-museum/pos-y.jpg\",\n      \"resources/images/cubemaps/computer-history-museum/neg-y.jpg\",\n      \"resources/images/cubemaps/computer-history-museum/pos-z.jpg\",\n      \"resources/images/cubemaps/computer-history-museum/neg-z.jpg\",\n    ])\n  }\n\n  static isPlaying() {\n    return SceneManager.instance.isPlaying\n  }\n\n  getScene(): THREE.Scene {\n    return this._scene\n  }\n\n  setScenePayload(payload: Engine.ScenePayload) {\n    this._scenePayload = payload\n  }\n\n  getSelectedEntityPayload(): Engine.EntityProps | undefined {\n    return this._scenePayload?.sceneConfig.entities.find(\n      (e) => e.id === this._selectedEntityID\n    )\n  }\n\n  updateEntityPayload(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    const updateIndex = this._entities.findIndex((e) => e.id === entityID)\n    if (updateIndex === -1) return\n    this._entities[updateIndex].init(entityProps)\n    this._selectionHelper?.setFromObject(this._entities[updateIndex].mesh)\n  }\n\n  updateScene() {\n    this._entities.forEach((entity) => {\n      entity.update()\n    })\n  }\n\n  /** Runs scene in play mode.\n   *\n   *  In play mode, the components in all\n   *  entities are updated each frame.\n   */\n  runPlayScene() {\n    this.isPlaying = true\n    this._resetScene()\n    this._scene.remove(this._axes)\n    this._scene.remove(this._gridHelper)\n    this._scene.background = new THREE.Color(\"rgb(0,0,0)\")\n    if (this._selectionHelper) this._scene.remove(this._selectionHelper)\n    try {\n      this._buildEntities()\n      this._startEntities()\n    } catch (error) {\n      console.error(\"Error whilst setting up play scene\")\n    }\n  }\n\n  /** Runs scene in edit mode\n   *\n   *  In edit mode, the scene is reset and all\n   *  entities are reverted to their initial states,\n   *  based on the scenePayload.\n   */\n  runEditScene() {\n    this.isPlaying = false\n    this._resetScene()\n    this._scene.background = new THREE.Color(\"rgb(0,2,60)\")\n    this._scene.add(this._axes)\n    this._scene.add(this._gridHelper)\n    if (this._selectionHelper) this._scene.add(this._selectionHelper)\n    this._buildEntities()\n  }\n\n  /** Select an entity by ID */\n  selectByID(entityID: Engine.EntityID) {\n    this.select(this._entities.find((e) => e.id === entityID)?.mesh ?? undefined)\n  }\n\n  /** Sets Entity with corresponding object as selected,\n   *  if no object is passed, deselects any selected entity\n   * @param object THREE.Object3D\n   */\n  select(object?: THREE.Object3D) {\n    if (this.isPlaying) return\n    if (!object && this._selectionHelper && this._selectedEntityID) {\n      this._scene.remove(this._selectionHelper)\n      this._selectedEntityID = undefined\n      return\n    }\n\n    if (object) {\n      this._selectedEntityID = object.uuid\n      if (!this._selectionHelper) {\n        this._selectionHelper = new THREE.BoxHelper(object, 0xffff00)\n        this._scene.add(this._selectionHelper)\n        return\n      }\n\n      this._selectionHelper?.setFromObject(object)\n      this._scene.add(this._selectionHelper)\n    }\n  }\n\n  getSelectedEntity(): Engine.EntityID | undefined {\n    return this._selectedEntityID\n  }\n\n  buildEntity(props: Engine.EntityProps): Entity {\n    const entity = new Entity(props)\n    this._entities.push(entity)\n    this._scene.add(entity.mesh)\n    return entity\n  }\n\n  private _startEntities() {\n    this._entities.forEach((entity) => {\n      entity.start()\n    })\n  }\n\n  private _resetScene() {\n    this._entities.forEach((entity) => {\n      this._scene.remove(entity.mesh)\n      entity.destroy()\n    })\n    this._entities = []\n  }\n\n  private _buildEntities() {\n    if (!this._scenePayload) return\n    // This prevents all of the strange object mutation\n    const localPayloadCopy = deepClone<Engine.ScenePayload>(this._scenePayload)\n    localPayloadCopy.sceneConfig.entities.forEach((entityProps) => {\n      this.buildEntity(entityProps)\n    })\n  }\n}\n","export const deepClone = <T>(input: T): T => {\n  return JSON.parse(JSON.stringify(input)) as T\n}","import Entity from \"./Entity\";\n\nexport default abstract class Component {\n  entity: Entity;\n\n  constructor(entity: Entity) {\n    this.entity = entity;\n  }\n\n  abstract init(props: Engine.ComponentProps): void;\n\n  abstract start(): void;\n\n  abstract update(): void;\n}\n\n// This is only used for generating the BaseComponentType for internal use, \n// when creating Components, extend the abstract Component class instead.\nclass BaseComponent extends Component {\n  entity!: Entity;\n\n  init(props: Engine.ComponentProps) { }\n\n  start() { }\n\n  update() { }\n}\n\nexport type BaseComponentType = typeof BaseComponent;","import * as THREE from 'three';\nimport Component from './Component';\nimport Entity from './Entity';\ninterface ITransformProps {\n  position?: THREE.Vector3;\n  rotation?: THREE.Euler;\n  scale?: THREE.Vector3;\n}\n\nexport default class Transform extends Component {\n  entity: Entity;\n\n  // <@public>\n  public position: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n  public rotation: THREE.Euler = new THREE.Euler(0, 0, 0, 'XYZ');\n  public scale: THREE.Vector3 = new THREE.Vector3(1, 1, 1);\n  // </@public>\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.entity = entity;\n  }\n\n  init(props?: ITransformProps) {\n    this.position = props?.position ?? this.position;\n    this.rotation = props?.rotation ?? this.rotation;\n    this.scale = props?.scale ?? this.scale;\n    this.applyMatrix();\n  }\n\n  start() {\n    this.applyMatrix();\n  }\n\n  private applyPosition() {\n    this.entity.mesh.position.setX(this.position.x);\n    this.entity.mesh.position.setY(this.position.y);\n    this.entity.mesh.position.setZ(this.position.z);\n  }\n\n  private applyRotation() {\n    this.entity.mesh.setRotationFromEuler(new THREE.Euler(this.rotation.x, this.rotation.y, this.rotation.z));\n  }\n\n  private applyScale() {\n    this.entity.mesh.scale.setX(this.scale.x);\n    this.entity.mesh.scale.setY(this.scale.y);\n    this.entity.mesh.scale.setZ(this.scale.z);\n  }\n\n  private applyMatrix() {\n    if (!this.entity) { return; }\n    this.applyPosition();\n    this.applyRotation();\n    this.applyScale();\n  }\n\n  update() {\n    this.applyMatrix();\n  }\n}\n","import * as THREE from 'three';\nimport Transform from \"./Transform\";\nimport { BaseComponentType } from \"./Component\";\nimport Entity from \"./Entity\";\nexport default class ComponentManager {\n  public static instance: ComponentManager;\n  private components: { [key: string]: { constructor: BaseComponentType, props: Engine.ComponentProps } } = {};\n\n  constructor() {\n    if (ComponentManager.instance) return;\n    ComponentManager.instance = this;\n\n    this.registerComponent(\"Transform\", Transform, {\n      position: { x: 0, y: 0, z: 0 },\n      rotation: { x: 0, y: 0, z: 0 },\n      scale: { x: 1, y: 1, z: 1 },\n    });\n  }\n\n  public getComponents() {\n    return { ...this.components };\n  };\n\n  public registerComponent(componentName: string, component: BaseComponentType, props: Engine.ComponentProps): void {\n    this.components[componentName] = { constructor: component, props };\n  };\n\n  public getComponentProps(name: Engine.ComponentType): Engine.ComponentProps | null {\n    const componentProps = this.components[name].props ?? null;\n    if (!componentProps) {\n      return null;\n    }\n    return componentProps;\n  }\n\n  private getComponent(name: Engine.ComponentType): BaseComponentType | null {\n    return this.components[name].constructor ?? null;\n  }\n\n  public setComponent(entity: Entity, componentType: Engine.ComponentType, componentProps: Engine.ComponentProps): void {\n    \n    const component = this.getComponent(componentType);\n    if (!component) {\n      console.error(`Component ${componentType} not found`);\n      return;\n    }\n\n    // Translate vector props \n    Object.entries(componentProps).forEach(([name, prop]) => {\n      if (Array.isArray(prop)) {\n        if (prop.length === 3) {\n          componentProps[name] = new THREE.Vector3(prop[0], prop[1], prop[2]) as any;\n        }\n        else if (prop.length === 2) {\n          componentProps[name] = new THREE.Vector2(prop[0], prop[1]) as any;\n        }\n      }\n    });\n    const componentInstance = new component(entity);\n    try {\n      componentInstance.init(componentProps);\n      entity.components[componentType] = componentInstance;\n    } catch (e) {\n      console.error('Error whilst initializing component', e);\n    }\n  }\n}","import { v4 as uuidv4 } from 'uuid';\n\nconst COMPONENT_DEF = `// @defineComponent`;\nconst baseScriptContent = `class Component {\n  \n  // <public>\n\n  // </public>\n\n  ${COMPONENT_DEF}\n\n  start() {\n    \n  }\n\n  update() {\n\n  }\n}`\n\nexport const generateNewScript = (name: string): Engine.Script => {\n  const id = uuidv4();\n  return {\n    id,\n    name,\n    language: 'js',\n    content: baseScriptContent,\n    type: 'component'\n  }\n};\n\nconst initPropPlaceholder = '// <initPropPlaceholder />';\n\nexport const formatScriptString = (script: Engine.Script): string => {\n  const formatted = `(${script.content})`;\n  return formatted.replace(COMPONENT_DEF, `\n          entity;\n        \n          constructor(entity) {\n            this.entity = entity;\n          }\n\n          ${initPropPlaceholder}\n        `);\n};\n\nexport const injectInitSection = (scriptBody: string, props: Record<string, Engine.ComponentPropType>): string => {\n  const actualInitSection = `\n  init(props) {\n    this.transform = this.entity.getComponent('Transform');\n    ${Object.entries(props).map(([key, value]) => `this.${key} = props?.${key} ?? ${value};`).join('\\n')}\n  }`;\n  return scriptBody.replace(initPropPlaceholder, actualInitSection);\n}","import * as THREE from 'three';\n\nexport default class MaterialManager {\n  public static instance: MaterialManager;\n\n  constructor() {\n    if (MaterialManager.instance) return;\n    MaterialManager.instance = this;\n  }\n\n  getMaterial(type: Engine.MaterialType): THREE.Material {\n    switch (type) {\n      case 'normal':\n        return new THREE.MeshNormalMaterial();\n      case 'basic':\n        return new THREE.MeshBasicMaterial();\n      case 'phong':\n        return new THREE.MeshPhongMaterial();\n      case 'lambert':\n        return new THREE.MeshLambertMaterial();\n      case 'wireframe':\n        return new THREE.MeshBasicMaterial({ wireframe: true });\n      default:\n        return new THREE.MeshBasicMaterial();\n    }\n  }\n}\n","import * as THREE from 'three';\n\nexport default class GeometryManager {\n  public static instance: GeometryManager;\n\n  constructor() {\n    if (GeometryManager.instance) return;\n    GeometryManager.instance = this;\n  }\n\n  getGeometry(type: Engine.MaterialType): THREE.BufferGeometry {\n    switch (type) {\n      case 'box':\n        return new THREE.BoxBufferGeometry();\n      case 'sphere':\n        return new THREE.SphereBufferGeometry(1, 16, 8);\n      case 'cylinder':\n        return new THREE.CylinderBufferGeometry(1, 1, 1, 16, 1);\n      case 'torus':\n        return new THREE.TorusBufferGeometry(6, 1.1, 10, 32, 6.3);\n      case 'plane':\n        return new THREE.PlaneBufferGeometry(1, 1);\n      case 'tetrahedron':\n        return new THREE.TetrahedronBufferGeometry();\n      case 'octahedron':\n        return new THREE.OctahedronBufferGeometry();\n      case 'dodecahedron':\n        return new THREE.DodecahedronBufferGeometry();\n      case 'icosahedron':\n        return new THREE.IcosahedronBufferGeometry();\n      default:\n        return new THREE.SphereBufferGeometry();\n    }\n  }\n}","import * as three from \"three\"\nimport { Component, ReactElement, useEffect, useState } from \"react\"\nimport { createContext } from \"react\"\nimport ComponentManager from \"../../engine/core/ComponentManager\"\nimport { formatScriptString, injectInitSection } from \"../../utils/script.utils\"\nimport SceneManager from \"../../engine/core/SceneManager\"\nimport { generateNewEntity } from \"../../utils/entity.utils\"\n\ninterface IScriptContext {\n  scripts: Record<string, Engine.Script>\n  selectedScript: Engine.Script | undefined\n  scriptBody: string\n  setScriptBody: (scriptBody: string) => void\n  setScripts: (scripts: Record<string, Engine.Script>) => void\n  setSelectedScript: (script: Engine.Script | undefined) => void\n  compileScripts: () => void\n}\n\nconst initialValue: IScriptContext = {\n  scripts: {},\n  selectedScript: undefined,\n  scriptBody: \"\",\n  setScriptBody: (scriptBody: string) => {},\n  setScripts: (scripts: Record<string, Engine.Script>) => {},\n  setSelectedScript: (script: Engine.Script | undefined) => {},\n  compileScripts: () => {},\n}\n\nexport const ScriptContext = createContext<IScriptContext>(initialValue)\n\nexport const ScriptProvider = ({\n  children,\n}: {\n  children: ReactElement | ReactElement[]\n}) => {\n  const [scripts, setScripts] = useState<Record<string, Engine.Script>>({})\n  const [selectedScript, setSelectedScript] = useState<Engine.Script | undefined>()\n  const [scriptBody, setScriptBody] = useState(selectedScript?.content ?? \"\")\n\n  const compileScripts = () => {\n    const THREE = three                           \n    const Instantiate = SceneManager.instance.buildEntity.bind(SceneManager.instance)\n    const CreateEntity = generateNewEntity\n\n    Object.values(scripts).forEach((script) => {\n      try {\n        const scriptCopy = `${script.content}`\n        const removePrefix = scriptCopy.substring(\n          scriptCopy.indexOf(\"// <public>\") + 11\n        )\n        let pureProps = removePrefix.substring(\n          0,\n          removePrefix.indexOf(\"// </public>\")\n        )\n        pureProps = pureProps.replaceAll(\";\", \",\")\n        pureProps = pureProps.replaceAll(\"=\", \":\")\n        let props: Record<string, Engine.ComponentType> = {}\n        if (`${pureProps}`.replace(/\\s/g, \"\").length) {\n          pureProps = `{${pureProps}}`\n          props = eval(`(${pureProps})`) // ! <-- Eval\n        }\n        let formattedScript = formatScriptString(script)\n        formattedScript = injectInitSection(formattedScript, props)\n        const NewComponent: any = eval(`(${formattedScript})`) // ! <-- Eval\n        Object.setPrototypeOf(NewComponent, Component)\n        ComponentManager.instance.registerComponent(script.name, NewComponent, props)\n      } catch (err) {\n        console.error(err)\n      }\n    })\n  }\n\n  useEffect(() => {\n    compileScripts()\n  }, [scripts])\n\n  const contextValue = {\n    scripts,\n    setScripts,\n    scriptBody,\n    setScriptBody,\n    selectedScript,\n    setSelectedScript,\n    compileScripts,\n  }\n\n  return (\n    <ScriptContext.Provider value={contextValue}>{children}</ScriptContext.Provider>\n  )\n}\n","import { v4 as uuidv4 } from 'uuid';\nexport const generateNewEntity = (): Engine.EntityProps => {\n  const id = uuidv4();\n  return {\n    id,\n    name: \"New Entity\",\n    geometry: 'box',\n    material: 'normal',\n    children: [],\n    components: {\n      Transform: {\n        position: { x: 0, y: 0, z: 0 },\n        rotation: { x: 0, y: 0, z: 0 },\n        scale: { x: 1, y: 1, z: 1 },\n      }\n    },\n  };\n}","import { ReactElement, useEffect, useRef } from 'react';\nimport { createContext } from 'react';\n\ninterface IEditorContext {\n  renderElement?: React.MutableRefObject<HTMLDivElement | null>;\n};\n\nconst initialValue: IEditorContext = {}\n\nexport const EditorContext = createContext<IEditorContext>(initialValue);\n\nexport const EditorProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const renderElement = useRef<HTMLDivElement>(null)\n  const contextValue = { renderElement };\n\n\n  return (\n    <EditorContext.Provider value={contextValue}>\n      {children}\n    </EditorContext.Provider>\n  );\n};","import * as THREE from 'three';\nimport SceneManager from './SceneManager';\n\nexport default class CameraManager {\n  public static instance: CameraManager;\n  private renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true});\n  private renderElement: HTMLElement | undefined;\n  private raycaster: THREE.Raycaster = new THREE.Raycaster();\n  private fov = 60;\n  private near = 0.01;\n  private far = 20000;\n  private camera!: THREE.PerspectiveCamera;\n  private controls: any;\n\n\n  constructor() {\n    if (CameraManager.instance) return CameraManager.instance;\n    CameraManager.instance = this;\n    this._setCamera();\n    window.addEventListener('resize', () => this.handleResize());\n  }\n\n  setup(renderElement: HTMLElement, scene: THREE.Scene) {\n    this.renderer.setSize(renderElement.clientWidth, renderElement.clientHeight);\n    this.renderElement = renderElement;\n    this.renderElement.appendChild(this.renderer.domElement);\n    this.handleResize();\n    this._setControls();\n    this._setRaycaster();\n    this._runSceneLoop(scene);\n  }\n\n  resetCamera() {\n    this.renderer.setAnimationLoop(null);\n  }\n\n  handleClick(mouseX: number, mouseY: number) {\n    const pointer = new THREE.Vector2(mouseX, mouseY);\n    this.raycaster.setFromCamera(pointer, this.camera);\n    const intersects = this.raycaster.intersectObjects(SceneManager.instance.getScene().children, true).filter(e => e.object.type === 'Mesh');\n    \n    if (intersects.length > 0) {\n      SceneManager.instance.select(intersects[0].object);\n    }\n    else {\n      SceneManager.instance.select();\n    }\n  }\n\n  private _setCamera() {\n    if (!this.renderElement) {\n      this.camera = new THREE.PerspectiveCamera(this.fov, window.innerWidth / window.innerHeight, this.near, this.far);\n      this.camera.position.y = 10;\n      this.camera.rotation.x = -0.1;\n    }\n  }\n\n  private _runSceneLoop(scene: THREE.Scene) {\n    this.renderer.setAnimationLoop((time: number) => this.update(scene));\n  }\n\n  private _setRaycaster() {\n    this.raycaster = new THREE.Raycaster();\n  }\n\n  private _setControls() {\n    this.camera.position.z = 50;\n  }\n\n  handleResize() {\n    if (!this.renderElement) return;\n    const dimensions = this.renderElement.getBoundingClientRect();\n    this.camera.aspect = dimensions.width / dimensions.height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.renderElement.clientWidth, this.renderElement.clientHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n  }\n\n  update(scene: THREE.Scene) {\n    this.renderer.render(scene, this.camera);\n    SceneManager.instance.updateScene();\n  }\n}","import CameraManager from \"./CameraManager\";\nimport ComponentManager from \"./ComponentManager\";\nimport GeometryManager from \"./GeometryManager\";\nimport MaterialManager from \"./MaterialManager\";\nimport SceneManager from \"./SceneManager\";\n\nclass EngineContext {\n  sceneManager: SceneManager;\n  cameraManager: CameraManager;\n  componentManager: ComponentManager;\n  materialManager: MaterialManager;\n  geometryManager: GeometryManager;\n  private _renderElement!: HTMLElement;\n  private isInitialized = false;\n\n  constructor() {\n    this.sceneManager = new SceneManager();\n    this.cameraManager = new CameraManager();\n    this.componentManager = new ComponentManager();\n    this.materialManager = new MaterialManager();\n    this.geometryManager = new GeometryManager();\n  }\n\n  init(renderElement: HTMLElement, payload?: Engine.ScenePayload) {\n    if (this.isInitialized) return;\n    this._renderElement = renderElement;\n    if (payload) this.updateScenePayload(payload);\n    this.runEditMode();\n    this.isInitialized = true;\n  }\n\n  runPlayMode() {\n    this.sceneManager.runPlayScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  runEditMode() {\n    this.sceneManager.runEditScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  updateScenePayload(payload: Engine.ScenePayload) {\n    this.sceneManager.setScenePayload(payload);\n  }\n\n  updateSpecificEntity(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    this.sceneManager.updateEntityPayload(entityID, entityProps);\n  }\n\n  addNewEntity(entity: Engine.EntityProps) {\n    this.sceneManager.buildEntity(entity);\n\n  }\n\n  isPlaying(): boolean {\n    return SceneManager.isPlaying() ?? false\n  }\n\n  handleClick(mouseX: number, mouseY: number) {\n    this.cameraManager.handleClick(mouseX, mouseY);\n  }\n\n  selectEntity(entityID: Engine.EntityID) {\n    this.sceneManager.selectByID(entityID);\n  }\n\n  getSelectedEntity(): Engine.EntityID | undefined {\n    return this.sceneManager.getSelectedEntity();\n  }\n\n  getSelectedEntityProps(): Engine.EntityProps | undefined {\n    return this.sceneManager.getSelectedEntityPayload();\n  }\n}\n\nconst context = new EngineContext();\n\nexport default context;","import * as THREE from 'three';\nimport { ReactElement, useEffect, useMemo } from 'react';\nimport { createContext } from 'react';\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport context from '../../engine/core/EngineContext';\n\ninterface ISceneContext {\n  sceneConfig: Engine.SceneConfig;\n  setEntities: (props: Engine.EntityProps[]) => void;\n  selectedEntityID: string | null;\n  setSelectedEntityID: (entityID: string | null) => void;\n  setCameraProps: (cameraProps: Engine.CameraProps) => void;\n};\n\nconst initialValue = {\n  sceneConfig: {\n    entities: [] as Engine.EntityProps[],\n    camera: {\n      position: new THREE.Vector3(),\n      fov: 70,\n      near: 0.1,\n      far: 1000,\n      controls: \"orbit\" as Engine.ControlType\n    }\n  },\n  selectedEntityID: null,\n  setEntities: (entities: Engine.EntityProps[]) => { },\n  setSelectedEntityID: (entityID: string | null) => { },\n  setCameraProps: (cameraProps: Engine.CameraProps) => { }\n};\n\nexport const SceneContext = createContext<ISceneContext>(initialValue);\n\nexport const SceneProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [cameraProps, setCameraProps] = useState<Engine.CameraProps>({\n    position: new THREE.Vector3(),\n    fov: 70,\n    near: 0.1,\n    far: 1000,\n    controls: \"orbit\" as Engine.ControlType\n  });\n\n  const [entities, setEntities] = useState<Engine.EntityProps[]>([\n    {\n      id: uuidv4(),\n      name: \"Entity A\",\n      material: 'normal',\n      geometry: 'box',\n      children: [],\n      components: {\n        \"Transform\": {\n          position: {x: 0, y: 0, z: 0},\n          rotation: { x: 0, y: 0, z: 0 },\n          scale: {x: 1, y: 1, z: 1},\n        },\n      }\n    },\n  ])\n  const [selectedEntityID, setSelectedEntityID] = useState<string | null>(null);\n\n  const sceneConfig = useMemo(() => (\n    {\n      entities,\n      camera: cameraProps\n    }\n  ), [entities, cameraProps]);\n\n  useEffect(() => {\n    if (selectedEntityID) {\n      const entityProps = entities.find(e => e.id === selectedEntityID);\n      if (!entityProps) return;\n      context.updateSpecificEntity(selectedEntityID, entityProps);\n    }\n  }, [sceneConfig])\n\n  const contextValue = {\n    sceneConfig,\n    selectedEntityID,\n    setEntities,\n    setCameraProps,\n    setSelectedEntityID\n  }\n  return (\n    <SceneContext.Provider value={contextValue}>\n      {children}\n    </SceneContext.Provider>\n  );\n}","import { useContext, useMemo} from \"react\";\nimport { SceneContext } from \"./SceneContext\";\nimport context from \"../../engine/core/EngineContext\";\nimport { generateNewEntity } from \"../../utils/entity.utils\";\n\nconst useScene = () => {\n  const { sceneConfig, setEntities, selectedEntityID, setSelectedEntityID } = useContext(SceneContext);\n\n\n  const selectEntity = (id: Engine.EntityID) => {\n    if (id === selectedEntityID) {\n      context.selectEntity('')\n      setSelectedEntityID('')\n      return;\n    }\n    context.selectEntity(id);\n    setSelectedEntityID(id);\n  };\n\n  const selectedEntity: Engine.EntityProps | null = useMemo(() => {\n    return sceneConfig.entities.find(e => e.id === selectedEntityID) ?? null;\n  }, [sceneConfig, selectedEntityID]);\n\n\n  const updateEntity = (entity: Engine.EntityProps) => {\n    const index = sceneConfig.entities.findIndex(e => e.id === entity.id);\n    if (index === -1) {\n      console.error(`Couldn't find ${entity.id} in sceneConfig.entities`);\n    };\n    sceneConfig.entities[index] = entity;\n    setEntities([...sceneConfig.entities]);\n  }\n\n  const updateEntityParent = (child: Engine.EntityID, newParent: Engine.EntityID | null) => {\n    // TODO: Implement this\n  }\n\n  const createEntity = () => {\n    const newEntity: Engine.EntityProps = generateNewEntity();\n    setEntities([...sceneConfig.entities, newEntity]);\n    context.addNewEntity(newEntity);\n  }\n\n  return {\n    sceneConfig,\n    selectedEntity, \n    createEntity, \n    selectEntity,\n    updateEntity,\n    updateEntityParent,\n  };\n}\n\nexport default useScene;","import { useContext, useEffect, useState } from \"react\"\nimport { generateNewScript } from \"../../utils/script.utils\"\nimport { ScriptContext } from \"./ScriptContext\"\n\nconst useScripts = () => {\n  const {\n    scripts,\n    setScripts,\n    selectedScript,\n    setSelectedScript,\n    compileScripts,\n    scriptBody,\n    setScriptBody,\n  } = useContext(ScriptContext)\n\n  const loadScript = (scriptName: string) => {\n    const foundScript = scripts[scriptName]\n    setSelectedScript(foundScript)\n    setScriptBody(foundScript?.content ?? \"\")\n  }\n\n  const saveScript = (script: Engine.Script) => {\n    const foundScript = Object.values(scripts).find((s) => s.id === script.id)\n    if (!foundScript) return\n    foundScript.content = scriptBody;\n    compileScripts()\n  }\n\n  const createScript = (name: string) => {\n    const newScript = generateNewScript(name)\n    setScripts({ ...scripts, [newScript.name]: newScript })\n  }\n\n  return {\n    scripts: Object.values(scripts),\n    setScripts,\n    scriptBody,\n    setScriptBody,\n    selectedScript,\n    setSelectedScript,\n    loadScript,\n    saveScript,\n    createScript,\n  }\n}\n\nexport default useScripts\n","import { useContext, useEffect, useMemo, useState } from \"react\"\nimport context from \"../../engine/core/EngineContext\"\nimport SceneManager from \"../../engine/core/SceneManager\"\nimport useScene from \"../scene/useScene\"\nimport useScripts from \"../scripts/useScripts\"\nimport { EditorContext } from \"./EditorContext\"\n\nconst useEditor = () => {\n  const { scripts } = useScripts()\n  const { sceneConfig, selectEntity } = useScene()\n  const { renderElement } = useContext(EditorContext)\n  const [isRunning, setIsRunning] = useState(context.isPlaying())\n\n  const scenePayload = useMemo(\n    () => ({ sceneConfig, scripts }),\n    [sceneConfig, scripts]\n  )\n\n  useEffect(() => {\n    const init = () => {\n      if (!renderElement || !renderElement.current || !scenePayload) {\n        return\n      }\n      context.init(renderElement.current, scenePayload)\n    }\n    init()\n  }, [renderElement])\n\n  useEffect(() => {\n    context.updateScenePayload(scenePayload)\n  }, [scenePayload])\n\n  const toggleRun = () => {\n    if (!renderElement || !renderElement.current) {\n      return\n    }\n    if (SceneManager.isPlaying()) {\n      setIsRunning(false)\n      context.runEditMode()\n      return\n    }\n    context.runPlayMode()\n    setIsRunning(true)\n  }\n\n  const handleClickScene = (e: React.MouseEvent) => {\n    const canvas: HTMLCanvasElement = e.target as unknown as HTMLCanvasElement\n    const domRect: DOMRect = canvas.getBoundingClientRect()\n    const [mouseX, mouseY]: [number, number] = [\n      ((e.clientX - domRect.x) / domRect.width) * 2 - 1,\n      -((e.clientY - domRect.y) / domRect.height) * 2 + 1,\n    ]\n    context.handleClick(mouseX, mouseY)\n    selectEntity(context.getSelectedEntity() ?? \"\")\n  }\n\n  return {\n    renderElement,\n    isRunning,\n    toggleRun,\n    handleClickScene,\n  }\n}\n\nexport default useEditor\n","interface Props {\n  field: Engine.ComponentPropType\n  updateField: (field: Engine.ComponentPropType) => void\n}\n\nconst ComponentFieldValue = ({ field, updateField }: Props): React.ReactElement => {\n  const handleUpdateField = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (typeof field === \"number\") {\n      updateField(Number(e.target.value))\n      return\n    }\n\n    if (typeof field === \"string\") {\n      updateField(e.target.value)\n    }\n  }\n\n  if (typeof field === \"number\" || typeof field === \"string\")\n    return (\n      <div className=\"bg-gray-700 text-white px-1  w-max\">\n        <input\n          type={typeof field === \"string\" ? \"string\" : \"number\"}\n          value={typeof field === \"number\" ? field : field}\n          onChange={handleUpdateField}\n          className=\"bg-gray-700 w-16 font-mono text-xs\"\n        />\n      </div>\n    )\n\n  if (Array.isArray(field)) return <div>array field</div>\n\n  return (\n    <div className=\"bg-gray-700 text-white px-2 grid grid-cols-3 gap-1\">\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">x:</span>\n        <input\n          type={typeof field === \"string\" ? \"string\" : \"number\"}\n          value={field.x}\n          onChange={(e) =>\n            updateField({\n              x: Number(e.target.value),\n              y: field?.y ?? 0,\n              z: field?.z ?? 0,\n            })\n          }\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">y:</span>\n        <input\n          type={typeof field === \"string\" ? \"string\" : \"number\"}\n          value={field.y}\n          onChange={(e) =>\n            updateField({\n              x: field?.x ?? 0,\n              y: Number(e.target.value),\n              z: field?.z ?? 0,\n            })\n          }\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">z:</span>\n        <input\n          type={typeof field === \"string\" ? \"string\" : \"number\"}\n          value={field.z}\n          onChange={(e) =>\n            updateField({\n              x: field?.x ?? 0,\n              y: field?.y ?? 0,\n              z: Number(e.target.value),\n            })\n          }\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n    </div>\n  )\n}\n\nexport default ComponentFieldValue\n","import useScripts from \"../../../state/scripts/useScripts\"\nimport ComponentFieldValue from \"./ComponentFieldValue\"\n\ninterface Props {\n  componentType: Engine.ComponentType\n  componentProps: Engine.ComponentProps\n  updateComponent: (\n    type: Engine.ComponentType,\n    field: string,\n    value: Engine.ComponentPropType\n  ) => void\n}\n\nconst ComponentNode = ({\n  componentType,\n  componentProps,\n  updateComponent,\n}: Props): React.ReactElement => {\n  const { loadScript } = useScripts()\n  return (\n    <div className=\"bg-gray-800 text-white pb-4\">\n      <div className=\"flex w-full justify-between items-center mb-2\">\n        <h3>{componentType}</h3>\n        {componentType !== \"Transform\" && (\n          <small\n            className=\"text-xs font-light underline text-gray-400 cursor-pointer hover:text-gray-300\"\n            onClick={() => {\n              loadScript(componentType)\n            }}\n          >\n            Open in editor\n          </small>\n        )}\n      </div>\n      <div className=\"space-y-2\">\n        {Object.entries(componentProps).map(([fieldName, fieldValue]) => (\n          <div key={fieldName} className=\"flex space-x-2\">\n            <p\n              className=\"text-xs capitalize text-gray-200\"\n              style={{ minWidth: \"10ch\" }}\n            >\n              {fieldName}\n            </p>\n            <ComponentFieldValue\n              field={fieldValue}\n              updateField={(e) => updateComponent(componentType, fieldName, e)}\n            />\n          </div>\n        ))}\n      </div>\n      <hr className=\"mt-4\" />\n    </div>\n  )\n}\n\nexport default ComponentNode\n","import { useState } from \"react\"\nimport { useEffect } from \"react\"\nimport ComponentManager from \"../../../engine/core/ComponentManager\"\nimport useEditor from \"../../../state/editor/useEditor\"\nimport useScene from \"../../../state/scene/useScene\"\nimport ComponentNode from \"./ComponentNode\"\n\nexport default function InspectorPanel() {\n  const { isRunning } = useEditor()\n  const { selectedEntity, updateEntity, sceneConfig } = useScene()\n\n  const [controls, setControls] = useState<\n    Record<Engine.ComponentType, Engine.ComponentProps>\n  >({})\n  const [materialType, setMaterialType] = useState<Engine.MaterialType>(\"normal\")\n  const [geometryType, setGeometryType] = useState<Engine.GeometryType>(\"box\")\n\n  useEffect(() => {\n    if (!selectedEntity) return\n    setMaterialType(selectedEntity.material)\n    setGeometryType(selectedEntity.geometry)\n  }, [selectedEntity])\n\n  // * Handles populating all correct value fields when selecting entity */\n  useEffect(() => {\n    const updateComponentFields = (entity: Engine.EntityProps) => {\n      const propFields: Record<Engine.ComponentType, Engine.ComponentProps> = {}\n      Object.entries(entity.components).forEach(([type, props]) => {\n        propFields[type] = props\n      })\n      setControls({ ...propFields } as any)\n    }\n    if (selectedEntity) updateComponentFields(selectedEntity)\n  }, [selectedEntity, sceneConfig, isRunning])\n\n  const addComponent = (componentName: Engine.ComponentType) => {\n    if (!selectedEntity) return\n    const componentProps = ComponentManager.instance.getComponentProps(componentName)\n    if (!componentProps) return\n    selectedEntity.components[componentName] = componentProps\n    updateEntity(selectedEntity)\n  }\n\n  const updateComponent = (\n    type: Engine.ComponentType,\n    field: string,\n    value: Engine.ComponentPropType\n  ) => {\n    const newControls = { ...controls }\n    newControls[type][field] = value\n    setControls(newControls)\n    if (selectedEntity) {\n      selectedEntity.components = newControls\n      updateEntity({ ...selectedEntity })\n    }\n  }\n\n  const updateMaterial = (newMaterial: Engine.MaterialType) => {\n    setMaterialType(newMaterial)\n    if (selectedEntity) {\n      selectedEntity.material = newMaterial\n      updateEntity({ ...selectedEntity })\n    }\n  }\n\n  const updateGeometry = (newGeometry: Engine.GeometryType) => {\n    setGeometryType(newGeometry)\n    if (selectedEntity) {\n      selectedEntity.geometry = newGeometry\n      updateEntity({ ...selectedEntity })\n    }\n  }\n\n  const getComponentOptions = (): { label: string; value: string }[] => {\n    const components = ComponentManager.instance.getComponents()\n    if (!selectedEntity) return []\n    const currentComponents = Object.keys(selectedEntity?.components)\n    return Object.keys(components)\n      .filter((c) => !currentComponents.includes(c))\n      .map((component) => ({\n        label: component,\n        value: component,\n      }))\n  }\n\n  const componentOptions = getComponentOptions()\n\n  const materialOptions: { label: string; value: string }[] = [\n    {\n      label: \"Normal\",\n      value: \"normal\",\n    },\n    {\n      label: \"Basic\",\n      value: \"basic\",\n    },\n    {\n      label: \"Lambert\",\n      value: \"lambert\",\n    },\n    {\n      label: \"Phong\",\n      value: \"phong\",\n    },\n  ]\n\n  const geometryOptions: { label: string; value: string }[] = [\n    {\n      label: \"Box\",\n      value: \"box\",\n    },\n    {\n      label: \"Sphere\",\n      value: \"sphere\",\n    },\n    {\n      label: \"Torus\",\n      value: \"torus\",\n    },\n  ]\n\n  if (!selectedEntity)\n    return (\n      <div className=\"panel\">\n        <h4 className=\"panel-label\">Inspector</h4>\n      </div>\n    )\n\n  return (\n    <div className=\"panel\">\n      <h4 className=\"panel-label mb-1\">Inspector</h4>\n      {/* Components */}\n      <section className=\"space-y-2\">\n        {Object.entries(controls).map(([type, props]) => (\n          <ComponentNode\n            componentType={type}\n            componentProps={props}\n            key={type}\n            updateComponent={updateComponent}\n          />\n        ))}\n      </section>\n\n      {/* Add components */}\n      {componentOptions.length > 0 && (\n        <section>\n          <select onChange={(e) => console.log(e.target.value)}>\n            {componentOptions.map(({ label, value }) => (\n              <option key={value} value={value}>\n                {label}\n              </option>\n            ))}\n          </select>\n          <div className=\"grid place-items-center mt-2\">\n            <button onClick={() => addComponent(componentOptions[0].value)}>\n              Add Component\n            </button>\n          </div>\n        </section>\n      )}\n\n      {/* Mesh */}\n      <section>\n        <div className=\"bg-gray-800 text-white\">\n          <h3>Mesh</h3>\n          <div className=\"space-y-2\">\n            <div className=\"flex space-x-2 items-center\">\n              <p\n                className=\"text-xs font-mono text-gray-200\"\n                style={{ minWidth: \"10ch\" }}\n              >\n                Material\n              </p>\n              <select\n                onChange={(e) => updateMaterial(e.target.value)}\n                defaultValue={materialType}\n              >\n                {materialOptions.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"flex space-x-2 items-center\">\n              <p\n                className=\"text-xs font-mono text-gray-200\"\n                style={{ minWidth: \"10ch\" }}\n              >\n                Geometry\n              </p>\n              <select\n                onChange={(e) => updateGeometry(e.target.value)}\n                value={geometryType}\n              >\n                {geometryOptions.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  )\n}\n","import { ReactElement } from 'react'\nimport useEditor from '../../../state/editor/useEditor';\nimport useScene from '../../../state/scene/useScene'\nimport useScripts from '../../../state/scripts/useScripts';\n\nexport default function Nav(): ReactElement {\n  const { createEntity } = useScene();\n  const { toggleRun, isRunning } = useEditor();\n  const { createScript, selectedScript, loadScript, saveScript, scriptBody } = useScripts();\n\n  const handleCreateScript = () => {\n    createScript(\"Component\")\n  }\n\n  const handleSaveScript = () => {\n    if (selectedScript) {\n      saveScript({ ...selectedScript, content: scriptBody })\n    }\n  }\n\n  const handleCloseScript = () => {\n    loadScript(\"\")\n  }\n  return (\n    <div>\n      <header\n        className={`h-0.5 transition bg-red-600 ${isRunning && \"bg-green-500\"}`}\n      />\n      <nav className=\"bg-gray-900 p-2 flex w-full\">\n        <div className=\"space-x-2\">\n          <button onClick={toggleRun} className=\"primary\">\n            {isRunning ? \"Stop\" : \"Run\"} Scene\n          </button>\n          <button onClick={createEntity} className=\"secondary\">\n            Add Entity\n          </button>\n          <button onClick={handleCreateScript} className=\"secondary\">\n            Add Script\n          </button>\n        </div>\n        {selectedScript && (\n          <div className=\"space-x-2 ml-auto\">\n            <button className=\"secondary\" onClick={handleCloseScript}>\n              Close Editor\n            </button>\n            <button onClick={handleSaveScript} className=\"submit\">\n              Save script\n            </button>\n          </div>\n        )}\n      </nav>\n    </div>\n  )\n}\n","import Editor from '@monaco-editor/react';\nimport { ReactElement, useEffect } from 'react'\nimport useScripts from '../../../state/scripts/useScripts';\n\nexport default function EditorPanel(): ReactElement {\n  const { selectedScript, scriptBody, setScriptBody } = useScripts();\n\n  useEffect(() => {\n    if (!scriptBody && selectedScript) {\n      setScriptBody(selectedScript.content)\n    }\n  }, [selectedScript])\n\n  const handleEditorChange = (newValue: string | undefined) => {\n    setScriptBody(newValue ?? \"\")\n  }\n\n  return (\n    <>\n      {selectedScript && (\n        <>\n          <div className=\"absolute h-full w-full\" key={selectedScript.id}>\n            <Editor\n              height=\"100%\"\n              width=\"100%\"\n              defaultLanguage=\"javascript\"\n              defaultValue={selectedScript.content}\n              theme=\"vs-dark\"\n              onChange={handleEditorChange}\n            />\n          </div>\n        </>\n      )}\n    </>\n  )\n}\n","import { ReactElement } from 'react'\nimport useEditor from '../../../state/editor/useEditor'\n\nexport default function ScenePanel(): ReactElement {\n  const { renderElement, handleClickScene } = useEditor()\n  \n  return (\n    <>\n      {renderElement && (\n        <div\n          id=\"scene\"\n          ref={renderElement}\n          onClick={(e) => handleClickScene(e)}\n        />\n      )}\n    </>\n  )\n}\n","import { ReactElement, useMemo } from \"react\"\nimport useScene from \"../../../state/scene/useScene\"\n\ninterface Props {\n  entity: Engine.EntityProps\n}\n\nfunction HierarchyNode({ entity }: Props): ReactElement {\n  const { selectedEntity, selectEntity } = useScene()\n\n  const isSelected = useMemo(\n    () => selectedEntity?.id === entity.id,\n    [selectedEntity, entity.id]\n  )\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation()\n    selectEntity(entity.id)\n  }\n\n  return (\n    <div\n      className={`\n          p-1\n          rounded-sm\n          transition\n          cursor-pointer\n          select-none\n        text-white\n          text-sm\n          ${isSelected && \"bg-gray-500\"}\n          ${isSelected ? \"hover:bg-gray-600\" : \"hover:bg-gray-500\"}\n    `}\n      onClick={handleClick}\n    >\n      {entity?.name ?? \"__ENTITY__\"}\n    </div>\n  )\n}\n\nexport default HierarchyNode\n","import { ReactElement } from \"react\"\nimport useScene from \"../../../state/scene/useScene\"\nimport HierarchyNode from \"./HierarchyNode\"\n\nexport default function HierarchyPanel(): ReactElement {\n  const { sceneConfig } = useScene()\n  return (\n    <div className=\"panel\">\n      <h4 className=\"panel-label\">Hierarchy</h4>\n      {sceneConfig.entities.map((entity) => (\n        <HierarchyNode key={entity.id} entity={entity} />\n      ))}\n    </div>\n  )\n}\n","import React, { ReactElement } from \"react\"\nimport useScripts from \"../../../state/scripts/useScripts\"\n\nexport default function ProjectPanel(): ReactElement {\n  const { scripts, loadScript, selectedScript } = useScripts()\n  return (\n    <div className=\"panel text-white\">\n      <h4 className=\"panel-label\">Project</h4>\n\n      {/* Scripts */}\n      <details>\n        <summary>Scripts</summary>\n        {scripts.map((s) => (\n          <div\n            className={`p-1\n          rounded-sm\n          transition\n          cursor-pointer\n          select-none\n        text-white\n          ${selectedScript?.id === s.id && \"bg-gray-500\"}\n          ${\n            selectedScript?.id === s.id ? \"hover:bg-gray-600\" : \"hover:bg-gray-500\"\n          }`}\n            onClick={() => loadScript(s.name)}\n            key={s.id}\n          >\n            {s.name}.{s.language}\n          </div>\n        ))}\n      </details>\n\n      {/* Prefabs */}\n      <details>\n        <summary>Prefabs</summary>\n        No prefabs.\n      </details>\n\n      {/* Shaders */}\n      <details>\n        <summary>Shaders</summary>\n        No shaders.\n      </details>\n    </div>\n  )\n}\n","import  { ReactElement } from \"react\"\nimport InspectorPanel from \"../components/inspector/InspectorPanel\"\nimport Nav from \"../components/nav/Nav\"\nimport EditorPanel from \"../components/editor/EditorPanel\"\nimport ScenePanel from \"../components/scene/ScenePanel\"\nimport HierarchyPanel from \"../components/hierarchy/HierarchyPanel\"\nimport ProjectPanel from \"../components/project/ProjectPanel\"\n\nexport default function BrowserEngine(): ReactElement {\n\n  return (\n    <div className=\"w-screen h-screen overflow-hidden\">\n      <Nav />\n      <section\n        className=\"w-full h-full grid\"\n        style={{ gridTemplateColumns: \"1fr 14rem 14rem\" }}\n      >\n        <div className=\"h-full w-full grid relative\">\n          <ScenePanel />\n          <EditorPanel />\n        </div>\n        <aside className=\"grid grid-rows-5\">\n          <div className=\"row-span-3\">\n            <HierarchyPanel />\n          </div>\n          <div className=\"row-span-2\">\n            <ProjectPanel />\n          </div>\n        </aside>\n        <aside className=\"grid\">\n          <InspectorPanel />\n        </aside>\n      </section>\n    </div>\n  )\n}\n","import { EditorProvider } from \"./state/editor/EditorContext\"\nimport { SceneProvider } from \"./state/scene/SceneContext\"\nimport { ScriptProvider } from \"./state/scripts/ScriptContext\"\nimport BrowserEngine from \"./ui/base/BrowserEngine\"\n\nfunction App() {\n  return (\n    <SceneProvider>\n      <ScriptProvider>\n        <EditorProvider>\n          <BrowserEngine />\n        </EditorProvider>\n      </ScriptProvider>\n    </SceneProvider>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}