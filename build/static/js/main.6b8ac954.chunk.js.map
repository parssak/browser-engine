{"version":3,"sources":["state/editor/EditorContext.tsx","engine/core/Component.ts","engine/components/Mover.ts","engine/components/Transform.ts","engine/core/ComponentManager.ts","engine/core/MaterialManager.ts","engine/core/GeometryManager.ts","engine/core/Entity.ts","engine/core/SceneManager.ts","engine/core/CameraManager.ts","engine/core/EngineContext.ts","state/scene/SceneContext.tsx","state/scripts/ScriptContext.tsx","state/scene/useScene.tsx","state/scripts/useScripts.tsx","state/editor/useEditor.tsx","ui/components/Controls.tsx","ui/components/TreeViewPanel.tsx","ui/base/BrowserEngine.tsx","App.tsx","index.tsx"],"names":["initialValue","EditorContext","createContext","EditorProvider","children","contextValue","renderElement","useRef","Provider","value","Component","entity","_entity","this","props","Mover","name","speed","transform","components","rotation","x","y","Transform","position","THREE","scale","applyMatrix","mesh","setX","setY","setZ","z","setRotationFromEuler","applyPosition","applyRotation","applyScale","ComponentManager","instance","registerComponent","component","componentType","componentProps","getComponent","Object","entries","forEach","prop","Array","isArray","length","componentInstance","init","console","error","MaterialManager","type","wireframe","GeometryManager","Entity","id","debug","initMesh","initComponents","mat","getMaterial","material","geometry","getGeometry","uuid","setComponent","child","SceneManager","isPlaying","_updateComponents","values","update","_scene","_entities","_scenePayload","_axes","_gridHelper","_selectionHelper","_selectedEntityID","add","payload","entityID","entityProps","updateIndex","findIndex","e","setFromObject","resetScene","remove","buildEntities","select","find","object","undefined","destroy","sceneConfig","entities","buildEntity","push","oc","CameraManager","renderer","antialias","raycaster","fov","near","far","camera","controls","_setCamera","window","addEventListener","handleResize","scene","setSize","clientWidth","clientHeight","appendChild","domElement","_setControls","_setRaycaster","_runSceneLoop","setAnimationLoop","mouseX","mouseY","pointer","setFromCamera","intersects","intersectObjects","getScene","filter","intersect","target","innerWidth","innerHeight","time","Update","params","Line","aspect","updateProjectionMatrix","setPixelRatio","devicePixelRatio","render","updateScene","context","sceneManager","cameraManager","componentManager","materialManager","geometryManager","_renderElement","updateScenePayload","runEditMode","runPlayScene","setup","runEditScene","setScenePayload","updateEntityPayload","handleClick","selectByID","getSelectedEntity","selectedEntityID","setEntities","setSelectedEntityID","setCameraProps","cameraProps","SceneContext","SceneProvider","useState","uuidv4","useMemo","useEffect","updateSpecificEntity","scripts","setScripts","ScriptContext","ScriptProvider","useScene","useContext","selectedEntity","createEntity","newEntity","addNewEntity","selectEntity","updateEntity","index","updateEntityParent","newParent","useScripts","loadScript","saveScript","script","createScript","useEditor","isRunning","setIsRunning","scenePayload","useCallback","current","toggleRun","runPlayMode","handleClickScene","domRect","getBoundingClientRect","clientX","width","clientY","height","ComponentFieldValue","field","updateField","className","onChange","Number","ComponentNode","updateComponent","map","fieldName","fieldValue","style","minWidth","Controls","setControls","materialType","setMaterialType","geometryType","setGeometryType","log","propFields","updateComponentFields","newControls","onClick","newMaterial","defaultValue","label","option","newGeometry","TreeNode","isSelected","stopPropagation","TreeViewPanel","BrowserEngine","gridTemplateColumns","ref","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b8ac954.chunk.js","sourcesContent":["import { ReactElement, useEffect, useRef } from 'react';\nimport { createContext } from 'react';\n\ninterface IEditorContext {\n  renderElement?: React.MutableRefObject<HTMLDivElement | null>;\n};\n\nconst initialValue: IEditorContext = {}\n\nexport const EditorContext = createContext<IEditorContext>(initialValue);\n\nexport const EditorProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const renderElement = useRef<HTMLDivElement>(null)\n  const contextValue = { renderElement };\n\n\n  return (\n    <EditorContext.Provider value={contextValue}>\n      {children}\n    </EditorContext.Provider>\n  );\n};","import Entity from \"./Entity\";\n\nexport default abstract class Component {\n  _entity: Entity;\n\n  constructor(entity: Entity) {\n    this._entity = entity;\n  }\n\n  init(props: Engine.ComponentProps) {\n  }\n\n  abstract update(): void;\n}\n\n// This is only used for generating the BaseComponentType for internal use, \n// when creating Components, extend the abstract Component class instead.\nclass BaseComponent extends Component {\n  _entity!: Entity;\n\n  init(props: Engine.ComponentProps) { }\n\n  update() { }\n}\n\nexport type BaseComponentType = typeof BaseComponent;","import * as THREE from 'three';\nimport Component from '../core/Component';\nimport Entity from '../core/Entity';\nimport Transform from './Transform';\n\ninterface IMoverProps {\n  speed?: number;\n}\nexport default class Mover extends Component {\n  name = \"mover\";\n  _entity!: Entity;\n  speed: number = 0.05;\n  transform!: Transform;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this._entity = entity;\n  }\n\n  init(props: IMoverProps) {\n    this.speed = props?.speed ?? 0.05;\n    this.transform = this._entity.components['transform'] as Transform;\n  }\n\n  update() {\n    this.transform.rotation.x += this.speed;\n    this.transform.rotation.y += this.speed;\n  }\n}","import * as THREE from 'three';\nimport Component from '../core/Component';\nimport Entity from '../core/Entity';\ninterface ITransformProps {\n  position?: THREE.Vector3;\n  rotation?: THREE.Euler;\n  scale?: THREE.Vector3;\n}\n\nexport default class Transform extends Component {\n  name = \"transform\";\n  _entity!: Entity;\n\n  public position: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n  public rotation: THREE.Euler = new THREE.Euler(0, 0, 0, 'XYZ');\n  public scale: THREE.Vector3 = new THREE.Vector3(1, 1, 1);\n\n  constructor(entity: Entity) {\n    super(entity);\n    this._entity = entity;\n  }\n\n  init(props?: ITransformProps) {\n    this.position = props?.position ?? this.position;\n    this.rotation = props?.rotation ?? this.rotation;\n    this.scale = props?.scale ?? this.scale;\n    this.applyMatrix();\n  }\n\n  private applyPosition() {\n    this._entity.mesh.position.setX(this.position.x);\n    this._entity.mesh.position.setY(this.position.y);\n    this._entity.mesh.position.setZ(this.position.z);\n  }\n\n  private applyRotation() {\n    this._entity.mesh.setRotationFromEuler(new THREE.Euler(this.rotation.x, this.rotation.y, this.rotation.z));\n  }\n\n  private applyScale() {\n    this._entity.mesh.scale.setX(this.scale.x);\n    this._entity.mesh.scale.setY(this.scale.y);\n    this._entity.mesh.scale.setZ(this.scale.z);\n  }\n\n  private applyMatrix() {\n    if (!this._entity) { return; }\n    this.applyPosition();\n    this.applyRotation();\n    this.applyScale();\n  }\n\n  update() {\n    this.applyMatrix();\n  }\n}\n","import * as THREE from 'three';\nimport Mover from '../components/Mover';\nimport Transform from \"../components/Transform\";\nimport Component, { BaseComponentType } from \"./Component\";\nimport Entity from \"./Entity\";\nexport default class ComponentManager {\n  public static instance: ComponentManager;\n  private components: { [key: string]: BaseComponentType } = {};\n  \n  constructor() {\n    if (ComponentManager.instance) return;\n    ComponentManager.instance = this;\n    this.registerComponent('transform', Transform);\n    this.registerComponent('mover', Mover);\n  }\n\n  public registerComponent(name: Engine.ComponentType, component: BaseComponentType): void {\n    this.components[name] = component;\n  };\n\n  private getComponent(name: Engine.ComponentType): BaseComponentType | null {\n    return this.components[name] ?? null;\n  }\n\n  public setComponent(entity: Entity, componentType: Engine.ComponentType, componentProps: Engine.ComponentProps): void {\n    const component = this.getComponent(componentType);\n    if (!component) {\n      console.error(`Component ${componentType} not found`);\n      return;\n    }\n  \n    // Translate vector props \n    Object.entries(componentProps).forEach(([name, prop]) => {\n      if (Array.isArray(prop)) {\n        if (prop.length === 3) {\n          componentProps[name] = new THREE.Vector3(prop[0], prop[1], prop[2]) as any;\n        }\n        else if (prop.length === 2) {\n          componentProps[name] = new THREE.Vector2(prop[0], prop[1]) as any;\n        }\n      }\n    });\n    const componentInstance = new component(entity);\n    componentInstance.init(componentProps);\n    entity.components[componentType] = componentInstance;\n  }\n}","import * as THREE from 'three';\n\nexport default class MaterialManager {\n  public static instance: MaterialManager;\n\n  constructor() {\n    if (MaterialManager.instance) return;\n    MaterialManager.instance = this;\n  }\n\n  getMaterial(type: Engine.MaterialType): THREE.Material {\n    switch (type) {\n      case 'normal':\n        return new THREE.MeshNormalMaterial();\n      case 'basic':\n        return new THREE.MeshBasicMaterial();\n      case 'phong':\n        return new THREE.MeshPhongMaterial();\n      case 'lambert':\n        return new THREE.MeshLambertMaterial();\n      case 'wireframe':\n        return new THREE.MeshBasicMaterial({ wireframe: true });\n      default:\n        return new THREE.MeshBasicMaterial();\n    }\n  }\n}\n","import * as THREE from 'three';\n\nexport default class GeometryManager {\n  public static instance: GeometryManager;\n\n  constructor() {\n    if (GeometryManager.instance) return;\n    GeometryManager.instance = this;\n  }\n\n  getGeometry(type: Engine.MaterialType): THREE.BufferGeometry {\n    switch (type) {\n      case 'box':\n        return new THREE.BoxBufferGeometry();\n      case 'sphere':\n        return new THREE.SphereBufferGeometry(1, 16, 8);\n      case 'cylinder':\n        return new THREE.CylinderBufferGeometry(1, 1, 1, 16, 1);\n      case 'torus':\n        return new THREE.TorusBufferGeometry(10, 3, 16, 100, 10.3);\n      case 'plane':\n        return new THREE.PlaneBufferGeometry(1, 1);\n      case 'tetrahedron':\n        return new THREE.TetrahedronBufferGeometry();\n      case 'octahedron':\n        return new THREE.OctahedronBufferGeometry();\n      case 'dodecahedron':\n        return new THREE.DodecahedronBufferGeometry();\n      case 'icosahedron':\n        return new THREE.IcosahedronBufferGeometry();\n      default:\n        return new THREE.SphereBufferGeometry();\n    }\n  }\n}","import * as THREE from 'three';\nimport Component from './Component';\nimport ComponentManager from './ComponentManager';\nimport MaterialManager from './MaterialManager';\nimport GeometryManager from './GeometryManager';\nimport SceneManager from './SceneManager';\n\nexport default class Entity {\n  public name: string = \"\";\n  public mesh!: THREE.Mesh;\n  public readonly id: Engine.EntityID;\n  private children: Entity[] = [];\n  components: Record<Engine.ComponentType, Component> = {};\n\n  constructor(props: Engine.EntityProps) {\n    this.id = props.id;\n    this.name = props.name;\n    this.init(props);\n  }\n\n  init(props: Engine.EntityProps) {\n    console.debug('Called Entity.init()');\n    // TODO: New approach to creating children in SceneManager.\n    this.initMesh(props);\n    this.initComponents(props.components);\n  }\n\n  initMesh(props: Engine.EntityProps) {\n    const mat = MaterialManager.instance.getMaterial(props.material);\n    const geometry = GeometryManager.instance.getGeometry(props.geometry);\n    if (!this.mesh) this.mesh = new THREE.Mesh(geometry, mat);\n    else {\n      this.mesh.geometry = geometry;\n      this.mesh.material = mat;\n    }\n    this.mesh.uuid = this.id;\n    this.mesh.name = this.name;\n  }\n\n  initComponents(components: Record<Engine.ComponentType, Engine.ComponentProps>) {\n    Object.entries(components).forEach(([type, props]) => {\n      ComponentManager.instance.setComponent(this, type, props);\n    })\n  }\n\n  addChild(child: Entity) {\n    // TODO: Implement\n  }\n\n  addComponent(type: Engine.ComponentType, componentProps: Engine.ComponentProps) {\n    // TODO: Implement\n  }\n\n  getProps(): Record<Engine.ComponentType, Engine.ComponentProps> {\n    // TODO: Implement\n    return {};\n  }\n\n  destroy() {\n\n    // TODO: Implement\n\n    // todo: do i need to be doing this?\n    // this.mesh.geometry.dispose();\n  }\n\n  update() {\n    if (SceneManager.isPlaying()) {\n      this._updateComponents();\n    }\n  }\n\n  private _updateComponents() {\n    Object.values(this.components).forEach((component) => component.update())\n  }\n}","import * as THREE from 'three';\nimport CameraManager from './CameraManager';\nimport Entity from \"./Entity\";\n\nexport default class SceneManager {\n  public static instance: SceneManager;\n  private isPlaying: boolean = false; // If true, in play mode, else in edit mode\n  private _scene = new THREE.Scene();\n  private _entities: Entity[] = [];\n  private _scenePayload: Engine.ScenePayload | undefined;\n  private _axes = new THREE.AxesHelper(2);\n  private _gridHelper = new THREE.GridHelper(60, 6);\n  private _selectionHelper: THREE.BoxHelper | undefined;\n  private _selectedEntityID: Engine.EntityID | undefined;\n\n  constructor() {\n    if (SceneManager.instance) { return; }\n    SceneManager.instance = this;\n    this._scene.add(this._axes);\n    this._scene.add(this._gridHelper);\n    this._scene.add(new THREE.DirectionalLight(0xffffff, 0.6));\n    this._scene.add(new THREE.AmbientLight(0x555555));\n  }\n\n  static isPlaying() {\n    return SceneManager.instance.isPlaying;\n  }\n\n  getScene(): THREE.Scene {\n    return this._scene;\n  }\n\n  setScenePayload(payload: Engine.ScenePayload) {\n    this._scenePayload = payload;\n  }\n\n  updateEntityPayload(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    console.debug('updating entity payload', entityProps);\n    const updateIndex = this._entities.findIndex(e => e.id === entityID);\n    if (updateIndex === -1) return;\n    this._entities[updateIndex].initMesh(entityProps);\n    this._entities[updateIndex].initComponents(entityProps.components);\n    this._selectionHelper?.setFromObject(this._entities[updateIndex].mesh);\n  }\n\n  updateScene() {\n    this._entities.forEach(entity => {\n      entity.update();\n    });\n  }\n\n  runPlayScene() {\n    this.isPlaying = true;\n    this.resetScene();\n    this._scene.remove(this._axes);\n    this._scene.remove(this._gridHelper);\n    if (this._selectionHelper) this._scene.remove(this._selectionHelper);\n    this.buildEntities();\n  }\n\n  runEditScene() {\n    this.isPlaying = false;\n    this.resetScene();\n    this._scene.add(this._axes);\n    this._scene.add(this._gridHelper);\n    if (this._selectionHelper) this._scene.add(this._selectionHelper);\n    this.buildEntities();\n  }\n\n  selectByID(entityID: Engine.EntityID) {\n    this.select(this._entities.find(e => e.id === entityID)?.mesh);\n  }\n\n  select(object?: THREE.Object3D) {\n    if (this.isPlaying) return;\n    if (!object && this._selectionHelper && this._selectedEntityID) {\n      console.debug('deselecting');\n      this._scene.remove(this._selectionHelper);\n      this._selectedEntityID = undefined;\n      return;\n    }\n    \n    if (object) {\n      this._selectedEntityID = object.uuid;\n      if (!this._selectionHelper) {\n        this._selectionHelper = new THREE.BoxHelper(object, 0xffff00);\n        this._scene.add(this._selectionHelper);\n        return;\n      }\n      \n      this._selectionHelper?.setFromObject(object);\n      this._scene.add(this._selectionHelper);\n    }\n  }\n\n  getSelectedEntity(): Engine.EntityID | undefined {\n    return this._selectedEntityID;\n  }\n\n  private resetScene() {\n    this._entities.forEach(entity => {\n      this._scene.remove(entity.mesh);\n      entity.destroy();\n    });\n    this._entities = [];\n  }\n\n  private buildEntities() {\n    if (!this._scenePayload) return;\n    this._scenePayload.sceneConfig.entities.forEach(entityProps => {\n      this.buildEntity(entityProps);\n    });\n  }\n\n  buildEntity(props: Engine.EntityProps): Entity {\n    const entity = new Entity(props);\n    this._entities.push(entity);\n    this._scene.add(entity.mesh);\n    return entity;\n  }\n}","import * as THREE from 'three';\nimport oc from 'three-orbit-controls';\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls.js';\nimport SceneManager from './SceneManager';\nconst OrbitControls = oc(THREE);\n\nexport default class CameraManager {\n  public static instance: CameraManager;\n  private renderer = new THREE.WebGLRenderer({ antialias: true });\n  private renderElement: HTMLElement | undefined;\n  private raycaster: THREE.Raycaster = new THREE.Raycaster();\n  private fov = 45;\n  private near = 0.01;\n  private far = 20000;\n  private camera!: THREE.PerspectiveCamera;\n  private controls: any;\n  // private transformControls!: TransformControls;\n  \n\n  constructor() {\n    if (CameraManager.instance) return CameraManager.instance;\n    CameraManager.instance = this;\n    this._setCamera();\n    window.addEventListener('resize', () => this.handleResize());\n  }\n\n  setup(renderElement: HTMLElement, scene: THREE.Scene) {\n    this.renderer.setSize(renderElement.clientWidth, renderElement.clientHeight);\n    this.renderElement = renderElement;\n    this.renderElement.appendChild(this.renderer.domElement);\n    this.handleResize();\n    this._setControls();\n    this._setRaycaster();\n    this._runSceneLoop(scene);\n  }\n\n  resetCamera() {\n    this.renderer.setAnimationLoop(null);\n  }\n\n  handleClick(mouseX: number, mouseY: number) {\n    const pointer = new THREE.Vector2(mouseX, mouseY);\n    this.raycaster.setFromCamera(pointer, this.camera);\n    const intersects = this.raycaster.intersectObjects(SceneManager.instance.getScene().children, true).filter(e => e.object.type === 'Mesh');\n    if (intersects.length > 0) {\n      const intersect = intersects[0];\n      SceneManager.instance.select(intersect.object);\n    } else {\n      SceneManager.instance.select();\n    }\n  }\n\n  setTransformControlTarget(target?: THREE.Object3D) {\n    // if (target) this.transformControls.attach(target);\n    // else this.transformControls.detach();\n  }\n\n  private _setCamera() {\n    if (!this.renderElement) {\n      this.camera = new THREE.PerspectiveCamera(this.fov, window.innerWidth / window.innerHeight, this.near, this.far);\n      this.camera.position.y = 10;\n      this.camera.rotation.x = -0.1;\n    }\n  }\n\n  private _runSceneLoop(scene: THREE.Scene) {\n    this.renderer.setAnimationLoop((time: number) => this.Update(scene));\n  }\n\n  private _setRaycaster() {\n    this.raycaster = new THREE.Raycaster();\n    if (this.raycaster && this.raycaster.params && this.raycaster.params.Line) {\n      // this.raycaster.params.Line.threshold = 3;\n    }\n  }\n\n  private _setControls() {\n    // this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    // this.controls.autoRotate = false;\n    // this.controls.enableDamping = true;\n    // this.controls.dampingFactor = 0.39;\n\n    this.camera.position.z = 50;\n    // this.transformControls = new TransformControls(this.camera, this.renderer.domElement);\n    // this.transformControls.addEventListener('dragging-changed', e => {\n    //   if (!e.value) {\n    //     console.log('changed pos');\n    //   }\n    // });\n    // SceneManager.instance.getScene().add(this.transformControls);\n    // this.controls.update();\n  }\n\n  handleResize() {\n    if (!this.renderElement) return;\n    this.camera.aspect = this.renderElement.clientWidth / this.renderElement.clientHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.renderElement.clientWidth, this.renderElement.clientHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n  }\n\n  Update(scene: THREE.Scene) {\n    this.renderer.render(scene, this.camera);\n    SceneManager.instance.updateScene();\n  }\n}","import CameraManager from \"./CameraManager\";\nimport ComponentManager from \"./ComponentManager\";\nimport GeometryManager from \"./GeometryManager\";\nimport MaterialManager from \"./MaterialManager\";\nimport SceneManager from \"./SceneManager\";\n\nclass EngineContext {\n  sceneManager: SceneManager;\n  cameraManager: CameraManager;\n  componentManager: ComponentManager;\n  materialManager: MaterialManager;\n  geometryManager: GeometryManager;\n  private _renderElement!: HTMLElement;\n\n  constructor() {\n    this.sceneManager = new SceneManager();\n    this.cameraManager = new CameraManager();\n    this.componentManager = new ComponentManager();\n    this.materialManager = new MaterialManager();\n    this.geometryManager = new GeometryManager();\n  }\n\n  init(renderElement: HTMLElement, payload?: Engine.ScenePayload) {\n    this._renderElement = renderElement;\n    if (payload) this.updateScenePayload(payload);\n    this.runEditMode();\n  }\n\n  runPlayMode() {\n    this.sceneManager.runPlayScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  runEditMode() {\n    console.debug('ran run edit mode');\n    this.sceneManager.runEditScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  updateScenePayload(payload: Engine.ScenePayload) {\n    this.sceneManager.setScenePayload(payload);\n  }\n\n  updateSpecificEntity(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    this.sceneManager.updateEntityPayload(entityID, entityProps);\n  }\n\n  addNewEntity(entity: Engine.EntityProps) {\n    this.sceneManager.buildEntity(entity);\n\n  }\n\n  isPlaying(): boolean {\n    return SceneManager.isPlaying() ?? false\n  }\n\n  handleClick(mouseX: number, mouseY: number) {\n    this.cameraManager.handleClick(mouseX, mouseY);\n  }\n\n  selectEntity(entityID: Engine.EntityID) {\n    this.sceneManager.selectByID(entityID);\n  }\n\n  getSelectedEntity(): Engine.EntityID | undefined {\n    return this.sceneManager.getSelectedEntity();\n  }\n}\n\nconst context = new EngineContext();\n\nexport default context;","import * as THREE from 'three';\nimport { ReactElement, useEffect, useMemo } from 'react';\nimport { createContext } from 'react';\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport context from '../../engine/core/EngineContext';\n\ninterface ISceneContext {\n  sceneConfig: Engine.SceneConfig;\n  setEntities: (props: Engine.EntityProps[]) => void;\n  selectedEntityID: string | null;\n  setSelectedEntityID: (entityID: string | null) => void;\n  setCameraProps: (cameraProps: Engine.CameraProps) => void;\n};\n\nconst initialValue = {\n  sceneConfig: {\n    entities: [] as Engine.EntityProps[],\n    camera: {\n      position: new THREE.Vector3(),\n      fov: 70,\n      near: 0.1,\n      far: 1000,\n      controls: \"orbit\" as Engine.ControlType\n    }\n  },\n  selectedEntityID: null,\n  setEntities: (entities: Engine.EntityProps[]) => { },\n  setSelectedEntityID: (entityID: string | null) => { },\n  setCameraProps: (cameraProps: Engine.CameraProps) => { }\n};\n\nexport const SceneContext = createContext<ISceneContext>(initialValue);\n\nexport const SceneProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [cameraProps, setCameraProps] = useState<Engine.CameraProps>({\n    position: new THREE.Vector3(),\n    fov: 70,\n    near: 0.1,\n    far: 1000,\n    controls: \"orbit\" as Engine.ControlType\n  });\n\n  const [entities, setEntities] = useState<Engine.EntityProps[]>([\n    {\n      id: uuidv4(),\n      name: \"Entity A\",\n      material: 'normal',\n      geometry: 'box',\n      children: [],\n      components: {\n        \"transform\": {\n          position: {x: 3, y: 0.2, z: 1},\n          rotation: {x: 3, y: 3, z: 3},\n          scale: {x: 2, y: 1, z: 1},\n        },\n      }\n    },\n  ])\n  const [selectedEntityID, setSelectedEntityID] = useState<string | null>(null);\n\n  const sceneConfig = useMemo(() => (\n    {\n      entities,\n      camera: cameraProps\n    }\n  ), [entities, cameraProps]);\n\n  useEffect(() => {\n    if (selectedEntityID) {\n      const entityProps = entities.find(e => e.id === selectedEntityID);\n      if (!entityProps) return;\n      context.updateSpecificEntity(selectedEntityID, entityProps);\n    }\n  }, [sceneConfig])\n\n  const contextValue = {\n    sceneConfig,\n    selectedEntityID,\n    setEntities,\n    setCameraProps,\n    setSelectedEntityID\n  }\n  return (\n    <SceneContext.Provider value={contextValue}>\n      {children}\n    </SceneContext.Provider>\n  );\n}","import { ReactElement, useState } from 'react';\nimport { createContext } from 'react';\n\ninterface IScriptContext {\n  scripts: Engine.Script[];\n  setScripts: (scripts: Engine.Script[]) => void;\n};\n\nconst initialValue: IScriptContext = {\n  scripts: [],\n  setScripts: (scripts: Engine.Script[]) => { }\n}\n\nexport const ScriptContext = createContext<IScriptContext>(initialValue);\n\nexport const ScriptProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [scripts, setScripts] = useState<Engine.Script[]>([]);\n  const contextValue = { scripts, setScripts };\n  \n  return (\n    <ScriptContext.Provider value={contextValue}>\n      {children}\n    </ScriptContext.Provider>\n  );\n};","import { useContext, useEffect, useMemo} from \"react\";\nimport { SceneContext } from \"./SceneContext\";\nimport { v4 as uuidv4 } from 'uuid'\nimport context from \"../../engine/core/EngineContext\";\n\nconst useScene = () => {\n  const { sceneConfig, setEntities, selectedEntityID, setSelectedEntityID } = useContext(SceneContext);\n\n\n  const selectEntity = (id: Engine.EntityID) => {\n    if (id === selectedEntityID) {\n      setSelectedEntityID('')\n      return;\n    }\n    context.selectEntity(id);\n    setSelectedEntityID(id);\n  };\n\n  const selectedEntity: Engine.EntityProps | null = useMemo(() => {\n    return sceneConfig.entities.find(e => e.id === selectedEntityID) ?? null;\n  }, [sceneConfig, selectedEntityID]);\n\n\n  const updateEntity = (entity: Engine.EntityProps) => {\n    const index = sceneConfig.entities.findIndex(e => e.id === entity.id);\n    if (index === -1) {\n      console.error(`Couldn't find ${entity.id} in sceneConfig.entities`);\n    };\n    sceneConfig.entities[index] = entity;\n    setEntities([...sceneConfig.entities]);\n  }\n\n  const updateEntityParent = (child: Engine.EntityID, newParent: Engine.EntityID | null) => {\n    // TODO: Implement this\n  }\n\n  const createEntity = () => {\n    const id = uuidv4();\n    const newEntity: Engine.EntityProps = {\n      id,\n      name: \"New Entity\",\n      geometry: 'box',\n      material: 'normal',\n      children: [],\n      components: {\n        transform: {\n          position: {x: 0, y: 0, z: 0},\n          rotation: { x: 0, y: 0, z: 0 },\n          scale: { x: 1, y: 1, z: 1 },\n        }\n      },\n    }\n    setEntities([...sceneConfig.entities, newEntity]);\n    context.addNewEntity(newEntity);\n  }\n\n  return {\n    sceneConfig,\n    selectedEntity, \n    createEntity, \n    selectEntity,\n    updateEntity,\n    updateEntityParent,\n  };\n}\n\nexport default useScene;","import { useContext } from \"react\";\nimport { ScriptContext } from \"./ScriptContext\";\n\nconst useScripts = () => {\n  const { scripts, setScripts } = useContext(ScriptContext);\n\n  const loadScript = (name: string) => {\n    // TODO: implement this\n  };\n  const saveScript = (script: Engine.Script) => {\n    // TODO: implement this\n  };\n  const createScript = (name: string) => {\n    // TODO: implement this\n  };\n\n  return {\n    scripts,\n    setScripts,\n    loadScript,\n    saveScript,\n    createScript\n  };\n}\n\nexport default useScripts;","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport context from \"../../engine/core/EngineContext\";\nimport SceneManager from \"../../engine/core/SceneManager\";\nimport useScene from \"../scene/useScene\";\nimport useScripts from \"../scripts/useScripts\";\nimport { EditorContext } from \"./EditorContext\";\n\nconst useEditor = () => {\n  const { scripts } = useScripts();\n  const { sceneConfig, selectEntity } = useScene();\n  const { renderElement } = useContext(EditorContext);\n  const [isRunning, setIsRunning] = useState(context.isPlaying());\n\n  const scenePayload = useMemo(() => ({ sceneConfig, scripts }), [sceneConfig, scripts]);\n\n  const init = useCallback(() => {\n    if (!renderElement || !renderElement.current || !scenePayload) { return; }\n    context.init(renderElement.current, scenePayload);\n  }, [renderElement]);\n\n\n  useEffect(() => init(), [renderElement, init]);\n\n  useEffect(() => {\n    context.updateScenePayload(scenePayload);\n  }, [scenePayload])\n\n  const toggleRun = () => {\n    if (!renderElement || !renderElement.current) { return; }\n    if (SceneManager.isPlaying()) {\n      setIsRunning(false);\n      context.runEditMode();\n      return;\n    }\n    context.runPlayMode();\n    setIsRunning(true);\n  };\n\n  const handleClickScene = (e: React.MouseEvent) => {\n    const canvas: HTMLCanvasElement = e.target as unknown as HTMLCanvasElement;\n    const domRect: DOMRect = canvas.getBoundingClientRect();\n    const [mouseX, mouseY]: [number, number] = [((e.clientX - domRect.x) / domRect.width) * 2 - 1, -((e.clientY - domRect.y) / domRect.height) * 2 + 1];\n    context.handleClick(mouseX, mouseY);\n    selectEntity(context.getSelectedEntity() ?? '');\n  }\n\n  return {\n    renderElement,\n    isRunning,\n    toggleRun,\n    handleClickScene\n  };\n}\n\nexport default useEditor;","import { useState } from 'react';\nimport { useEffect } from 'react';\nimport useScene from '../../state/scene/useScene';\n\ninterface ComponentFieldValueProps {\n  field: Engine.ComponentPropType;\n  updateField: (field: Engine.ComponentPropType) => void;\n}\n\nconst ComponentFieldValue = ({ field, updateField }: ComponentFieldValueProps): React.ReactElement => {\n\n  const handleUpdateField = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (typeof field === 'number') {\n      updateField(Number(e.target.value));\n      return;\n    }\n\n    if (typeof field === 'string') {\n      updateField(e.target.value);\n    }\n  }\n\n  if (typeof field === 'number' || typeof field === 'string') return (\n    <div className=\"bg-gray-700 text-white px-1  w-max\">\n      <input\n        type={typeof field === 'string' ? 'string' : 'number'}\n        value={typeof field === 'number' ? field : field}\n        onChange={handleUpdateField}\n        className=\"bg-gray-700 w-min font-mono text-xs\"\n      />\n    </div>\n  );\n\n  if (Array.isArray(field)) return (\n    <div>array field</div>\n  );\n\n  return (\n    <div className=\"bg-gray-700 text-white px-2 grid grid-cols-3 gap-5\">\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">x:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.x}\n          onChange={e => updateField({ x: Number(e.target.value), y: field?.y ?? 0, z: field?.z ?? 0 })}\n          className=\"bg-gray-700 w-min font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">y:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.y}\n          onChange={e => updateField({ x: field?.x ?? 0, y: Number(e.target.value), z: field?.z ?? 0 })}\n          className=\"bg-gray-700 w-min font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">z:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.z}\n          onChange={e => updateField({ x: field?.x ?? 0, y: field?.y ?? 0, z: Number(e.target.value) })}\n          className=\"bg-gray-700 w-min font-mono text-xs\"\n        />\n      </pre>\n    </div>\n  )\n}\n\ninterface ComponentNodeProps {\n  componentType: Engine.ComponentType;\n  componentProps: Engine.ComponentProps;\n  updateComponent: (type: Engine.ComponentType, field: string, value: Engine.ComponentPropType) => void;\n}\n\nconst ComponentNode = ({\n  componentType,\n  componentProps,\n  updateComponent\n}: ComponentNodeProps): React.ReactElement => {\n\n  return (\n    <div className=\"bg-gray-800 text-white p-2\">\n      <h3 className=\"mb-2\">{componentType}</h3>\n      <div className=\"space-y-2\">\n        {\n          Object.entries(componentProps).map(([fieldName, fieldValue]) => (\n            <div key={fieldName} className=\"flex space-x-2\">\n              <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>{fieldName}</p>\n              <ComponentFieldValue field={fieldValue} updateField={e => updateComponent(componentType, fieldName, e)} />\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default function Controls() {\n  const { selectedEntity, updateEntity, sceneConfig } = useScene();\n\n  const [controls, setControls] = useState<Record<Engine.ComponentType, Engine.ComponentProps>>({});\n  const [materialType, setMaterialType] = useState<Engine.MaterialType>('basic');\n  const [geometryType, setGeometryType] = useState<Engine.GeometryType>('box');\n\n  useEffect(() => {\n    if (!selectedEntity) return;\n    setMaterialType(selectedEntity.material);\n    setGeometryType(selectedEntity.geometry);\n  }, [selectedEntity])\n\n  // * Handles populating all correct value fields when selecting entity */\n  useEffect(() => {\n    const updateComponentFields = (entity: Engine.EntityProps) => {\n      const propFields: Record<Engine.ComponentType, Engine.ComponentProps> = {};\n      Object.entries(entity.components).forEach(([type, props]) => {\n        propFields[type] = props;\n      });\n      console.debug('setting', propFields);\n      setControls({ ...propFields } as any);\n    }\n    console.log('use effect A');\n    if (selectedEntity) updateComponentFields(selectedEntity);\n  }, [selectedEntity, sceneConfig]);\n\n  const addComponent = () => {\n    if (!selectedEntity) return;\n    const newComponentName = 'mover';\n    const newComponentProps: Engine.ComponentProps = {\n      speed: 0.05\n    };\n    selectedEntity.components[newComponentName] = newComponentProps;\n    updateEntity(selectedEntity);\n  }\n\n  const updateComponent = (type: Engine.ComponentType, field: string, value: Engine.ComponentPropType) => {\n    const newControls = { ...controls };\n    newControls[type][field] = value;\n    setControls(newControls);\n    if (selectedEntity) {\n      selectedEntity.components = newControls;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  const updateMaterial = (newMaterial: Engine.MaterialType) => {\n    setMaterialType(newMaterial);\n    if (selectedEntity) {\n      selectedEntity.material = newMaterial;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  const updateGeometry = (newGeometry: Engine.GeometryType) => {\n    setGeometryType(newGeometry);\n    if (selectedEntity) {\n      selectedEntity.geometry = newGeometry;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  if (!selectedEntity) return (<div className=\"bg-gray-900 h-full flex flex-col space-y-1\"></div>)\n\n  const materialOptions: { label: string, value: string }[] = [\n    {\n      label: 'Normal',\n      value: 'normal',\n    },\n    {\n      label: 'Basic',\n      value: 'basic',\n    },\n    {\n      label: 'Lambert',\n      value: 'lambert',\n    },\n    {\n      label: 'Phong',\n      value: 'phong'\n    }\n  ]\n\n  const geometryOptions: { label: string, value: string }[] = [\n    {\n      label: 'Box',\n      value: 'box'\n    },\n    {\n      label: 'Sphere',\n      value: 'sphere',\n    },\n    {\n      label: 'Torus',\n      value: 'torus',\n    },\n  ]\n\n  return (\n    <div className=\"bg-gray-900 h-full flex flex-col space-y-8\">\n      <section className=\"space-y-2\">\n        {\n          Object.entries(controls).map(([type, props]) =>\n            <ComponentNode\n              componentType={type}\n              componentProps={props}\n              key={type}\n              updateComponent={updateComponent}\n            />\n          )\n        }\n      </section>\n      <section>\n        <button\n          className=\"block mx-auto mt-6\"\n          onClick={addComponent}>Add component\n        </button>\n      </section>\n      <section>\n        <div className=\"bg-gray-800 text-white p-2\">\n          <h3>Mesh</h3>\n          <div className=\"space-y-2\">\n            <div className=\"flex space-x-2 items-center\">\n              <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>Material</p>\n              <select onChange={e => updateMaterial(e.target.value)} defaultValue={materialType}>\n                {\n                  materialOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)\n                }\n              </select>\n            </div>\n            <div className=\"flex space-x-2 items-center\">\n              <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>Geometry</p>\n              <select onChange={e => updateGeometry(e.target.value)} value={geometryType}>\n                {\n                  geometryOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)\n                }\n              </select>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div >\n  )\n}","import React, { useMemo, ReactElement } from 'react';\nimport useScene from '../../state/scene/useScene';\n\n// TODO: Render children\ninterface Props {\n  entity: Engine.EntityProps;\n}\n\nfunction TreeNode({ entity }: Props): ReactElement {\n  const { selectedEntity, selectEntity } = useScene();\n\n  const isSelected = useMemo(() => selectedEntity?.id === entity.id, [selectedEntity, entity.id]);\n  \n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    selectEntity(entity.id);\n  }\n\n  return (\n    <div\n      className={`\n    p-2\n    rounded-md\n    transition\n    cursor-pointer\n    select-none\n    ${isSelected ? 'hover:bg-indigo-500' : 'hover:bg-indigo-400'}\n    ${isSelected && 'bg-indigo-300'}`} onClick={handleClick}>\n      <h1>{entity?.name ?? '__ENTITY__'}</h1>\n      {/* {entity.children.map(child => <TreeNode key={child.id} entity={child}/>)} */}\n    </div>\n  )\n\n}\n\nexport default function TreeViewPanel(): ReactElement {\n  const { sceneConfig } = useScene();\n  return (\n    <div className=\"bg-indigo-200 p-1.5 space-y-1\">\n      {\n        sceneConfig.entities.map(entity =>\n          <TreeNode\n            key={entity.id}\n            entity={entity}\n          />\n        )\n      }\n    </div>\n  )\n}\n","import React, { ReactElement } from 'react'\nimport useEditor from '../../state/editor/useEditor'\nimport useScene from '../../state/scene/useScene'\nimport Controls from '../components/Controls'\nimport TreeViewPanel from '../components/TreeViewPanel'\n\nexport default function BrowserEngine(): ReactElement {\n  const { createEntity, selectedEntity } = useScene()\n  const { renderElement, toggleRun, isRunning, handleClickScene } = useEditor()\n\n  return (\n    <main className=\"w-screen h-screen overflow-hidden\">\n      <div className={`h-0.5 transition bg-red-600 ${isRunning && 'bg-green-500'}`}></div>\n      <nav className=\"bg-gray-900 p-2 space-x-2\">\n        <button onClick={toggleRun} className=\"primary\">{isRunning ? 'Stop' : 'Run'} Scene</button>\n        <button onClick={createEntity} className=\"secondary\">Add Entity</button>\n      </nav>\n      <section className=\"w-full h-full grid\" style={{ gridTemplateColumns: '1fr 17rem' }}>\n        {renderElement && (<div className=\"bg-gray-600\" id=\"scene\" ref={renderElement} onClick={(e) => handleClickScene(e)} />)}\n        <div className=\"grid grid-rows-3 gap-0 5\">\n          <TreeViewPanel />\n          <div className=\"row-span-2\">\n            <Controls key={selectedEntity?.id ?? 'controls'} />\n          </div>\n        </div>\n      </section>\n    </main>\n  )\n}\n","import { EditorProvider } from \"./state/editor/EditorContext\";\nimport { SceneProvider } from \"./state/scene/SceneContext\";\nimport { ScriptProvider } from \"./state/scripts/ScriptContext\";\nimport BrowserEngine from \"./ui/base/BrowserEngine\";\n\nfunction App() {\n  return (\n    <SceneProvider>\n      <ScriptProvider>\n        <EditorProvider>\n          <BrowserEngine />\n        </EditorProvider>\n      </ScriptProvider>\n    </SceneProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}