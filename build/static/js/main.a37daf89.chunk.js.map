{"version":3,"sources":["engine/core/Entity.ts","engine/core/SceneManager.ts","utils/index.ts","engine/core/Component.ts","engine/core/Transform.ts","engine/core/ComponentManager.ts","engine/core/MaterialManager.ts","engine/core/GeometryManager.ts","state/scripts/ScriptContext.tsx","utils/script.utils.ts","state/editor/EditorContext.tsx","engine/core/CameraManager.ts","engine/core/EngineContext.ts","state/scene/SceneContext.tsx","state/scene/useScene.tsx","utils/entity.utils.ts","state/scripts/useScripts.tsx","state/editor/useEditor.tsx","ui/components/Controls.tsx","ui/components/TreeViewPanel.tsx","ui/components/ScriptPanel.tsx","ui/base/BrowserEngine.tsx","App.tsx","index.tsx"],"names":["Entity","props","name","mesh","id","components","this","init","initMesh","initComponents","mat","MaterialManager","instance","getMaterial","material","geometry","GeometryManager","getGeometry","THREE","uuid","Object","entries","forEach","type","ComponentManager","setComponent","child","SceneManager","isPlaying","_updateComponents","values","component","update","_scene","_entities","_scenePayload","_selectedEntityID","_axes","_gridHelper","_selectionHelper","add","payload","sceneConfig","entities","find","e","entityID","entityProps","updateIndex","findIndex","setFromObject","entity","_resetScene","remove","_buildEntities","select","undefined","object","push","destroy","input","JSON","parse","stringify","buildEntity","Component","Transform","position","rotation","scale","applyMatrix","setX","x","setY","y","setZ","z","setRotationFromEuler","applyPosition","applyRotation","applyScale","registerComponent","componentName","constructor","componentProps","componentType","getComponent","prop","Array","isArray","length","componentInstance","console","error","wireframe","initialValue","scripts","selectedScript","setScripts","setSelectedScript","script","compileScripts","ScriptContext","createContext","ScriptProvider","children","useState","three","SCENE","getScene","formattedScript","formatScriptString","NewComponent","eval","setPrototypeOf","scriptCopy","content","removePrefix","substring","indexOf","pureProps","replaceAll","replace","err","useEffect","contextValue","Provider","value","COMPONENT_DEF","baseScriptContent","generateNewScript","uuidv4","language","EditorContext","EditorProvider","renderElement","useRef","CameraManager","renderer","antialias","raycaster","fov","near","far","camera","controls","_setCamera","window","addEventListener","handleResize","scene","setSize","clientWidth","clientHeight","appendChild","domElement","_setControls","_setRaycaster","_runSceneLoop","setAnimationLoop","mouseX","mouseY","pointer","setFromCamera","intersects","intersectObjects","filter","innerWidth","innerHeight","time","dimensions","getBoundingClientRect","aspect","width","height","updateProjectionMatrix","setPixelRatio","devicePixelRatio","render","updateScene","context","sceneManager","cameraManager","componentManager","materialManager","geometryManager","_renderElement","isInitialized","updateScenePayload","runEditMode","runPlayScene","setup","runEditScene","setScenePayload","updateEntityPayload","handleClick","selectByID","getSelectedEntity","getSelectedEntityPayload","selectedEntityID","setEntities","setSelectedEntityID","setCameraProps","cameraProps","SceneContext","SceneProvider","useMemo","updateSpecificEntity","useScene","useContext","selectedEntity","createEntity","newEntity","addNewEntity","selectEntity","updateEntity","index","updateEntityParent","newParent","useScripts","loadScript","scriptID","s","saveScript","foundScript","createScript","newScript","useEditor","isRunning","setIsRunning","scenePayload","current","toggleRun","runPlayMode","handleClickScene","domRect","target","clientX","clientY","ComponentFieldValue","field","updateField","className","onChange","Number","ComponentNode","updateComponent","map","fieldName","fieldValue","style","minWidth","Controls","setControls","materialType","setMaterialType","geometryType","setGeometryType","propFields","updateComponentFields","newControls","componentOptions","getComponents","keys","label","getComponentOptions","onClick","getComponentProps","addComponent","newMaterial","defaultValue","option","newGeometry","TreeNode","isSelected","stopPropagation","TreeViewPanel","ScriptPanel","BrowserEngine","scriptBody","setScriptBody","gridTemplateColumns","ref","defaultLanguage","theme","newValue","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a37daf89.chunk.js","sourcesContent":["import * as THREE from 'three';\nimport Component from './Component';\nimport ComponentManager from './ComponentManager';\nimport MaterialManager from './MaterialManager';\nimport GeometryManager from './GeometryManager';\nimport SceneManager from './SceneManager';\n\nexport default class Entity {\n  public name: string = \"\";\n  public mesh!: THREE.Mesh;\n  public readonly id: Engine.EntityID;\n  public components: Record<Engine.ComponentType, Component> = {};\n\n  constructor(props: Engine.EntityProps) {\n    this.id = props.id;\n    this.name = props.name;\n    this.init(props);\n  }\n\n  init(props: Engine.EntityProps) {\n    this.initMesh(props);\n    this.initComponents(props.components);\n  }\n\n  initMesh(props: Engine.EntityProps) {\n    const mat = MaterialManager.instance.getMaterial(props.material);\n    const geometry = GeometryManager.instance.getGeometry(props.geometry);\n    if (!this.mesh) {\n      this.mesh = new THREE.Mesh(geometry, mat);\n    }\n    else {\n      this.mesh.geometry = geometry;\n      this.mesh.material = mat;\n    }\n    this.mesh.uuid = this.id;\n    this.mesh.name = this.name;\n  }\n\n  initComponents(components: Record<Engine.ComponentType, Engine.ComponentProps>) {\n    this.components = {};\n    Object.entries(components).forEach(([type, props]) => {\n      ComponentManager.instance.setComponent(this, type, props);\n    })\n  }\n\n  // TODO: Implement\n  addChild(child: Entity) { }\n\n  // TODO: Implement\n  destroy() { }\n\n  update() {\n    if (SceneManager.isPlaying()) {\n      this._updateComponents();\n    }\n  }\n\n  private _updateComponents() {\n    Object.values(this.components).forEach((component) => component.update())\n  }\n}","import * as THREE from 'three';\nimport { deepClone } from '../../utils';\nimport Entity from \"./Entity\";\n\nexport default class SceneManager {\n  public static instance: SceneManager;\n  private isPlaying: boolean = false; // If true, in play mode, else in edit mode\n  private _scene!: THREE.Scene;\n  private _entities: Entity[] = [];\n  private _scenePayload: Engine.ScenePayload | undefined;\n\n  // Selection\n  private _selectedEntityID: Engine.EntityID | undefined;\n  \n  // Helpers\n  private _axes = new THREE.AxesHelper(2);\n  private _gridHelper = new THREE.GridHelper(60, 6);\n  private _selectionHelper: THREE.BoxHelper | undefined;\n\n  constructor() {\n    if (SceneManager.instance) { return; }\n    SceneManager.instance = this;\n    this._scene = new THREE.Scene();\n    this._scene?.add(this._axes);\n    this._scene?.add(this._gridHelper);\n    this._scene?.add(new THREE.DirectionalLight(0xffffff, 0.6));\n    this._scene?.add(new THREE.AmbientLight(0x555555));\n  }\n\n  static isPlaying() {\n    return SceneManager.instance.isPlaying;\n  }\n\n  getScene(): THREE.Scene {\n    return this._scene;\n  }\n\n  setScenePayload(payload: Engine.ScenePayload) {\n    this._scenePayload = payload;\n  }\n\n  getSelectedEntityPayload(): Engine.EntityProps | undefined {\n    return this._scenePayload?.sceneConfig.entities.find(e => e.id === this._selectedEntityID);\n  }\n\n  updateEntityPayload(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    const updateIndex = this._entities.findIndex(e => e.id === entityID);\n    if (updateIndex === -1) return;\n    this._entities[updateIndex].init(entityProps);\n    this._selectionHelper?.setFromObject(this._entities[updateIndex].mesh);\n  }\n\n  updateScene() {\n    this._entities.forEach(entity => {\n      entity.update();\n    });\n  }\n\n  /** Runs scene in play mode.\n   * \n   *  In play mode, the components in all \n   *  entities are updated each frame.\n   */\n  runPlayScene() {\n    this.isPlaying = true;\n    this._resetScene();\n    this._scene.remove(this._axes);\n    this._scene.remove(this._gridHelper);\n    if (this._selectionHelper) this._scene.remove(this._selectionHelper);\n    \n    this._buildEntities();\n  }\n\n  /** Runs scene in edit mode\n   * \n   *  In edit mode, the scene is reset and all\n   *  entities are reverted to their initial states, \n   *  based on the scenePayload.\n   */\n  runEditScene() {\n    this.isPlaying = false;\n    this._resetScene();\n    this._scene.add(this._axes);\n    this._scene.add(this._gridHelper);\n    if (this._selectionHelper) this._scene.add(this._selectionHelper);\n    this._buildEntities();\n  }\n\n  /** Select an entity by ID */\n  selectByID(entityID: Engine.EntityID) {\n    this.select(this._entities.find(e => e.id === entityID)?.mesh ?? undefined);\n  }\n\n  /** Sets Entity with corresponding object as selected,\n   *  if no object is passed, deselects any selected entity\n   * @param object THREE.Object3D\n   */\n  select(object?: THREE.Object3D) {\n    if (this.isPlaying) return;\n    if (!object && this._selectionHelper && this._selectedEntityID) {\n      this._scene.remove(this._selectionHelper);\n      this._selectedEntityID = undefined;\n      return;\n    }\n    \n    if (object) {\n      this._selectedEntityID = object.uuid;\n      if (!this._selectionHelper) {\n        this._selectionHelper = new THREE.BoxHelper(object, 0xffff00);\n        this._scene.add(this._selectionHelper);\n        return;\n      }\n      \n      this._selectionHelper?.setFromObject(object);\n      this._scene.add(this._selectionHelper);\n    }\n  }\n\n  getSelectedEntity(): Engine.EntityID | undefined {\n    return this._selectedEntityID;\n  }\n\n  buildEntity(props: Engine.EntityProps): Entity {\n    const entity = new Entity(props);\n    this._entities.push(entity);\n    this._scene.add(entity.mesh);\n    return entity;\n  }\n\n  private _resetScene() {\n    this._entities.forEach(entity => {\n      this._scene.remove(entity.mesh);\n      entity.destroy();\n    });\n    this._entities = [];\n  }\n\n  private _buildEntities() {\n    if (!this._scenePayload) return;\n    // This prevents all of the strange object mutation\n    const localPayloadCopy = deepClone<Engine.ScenePayload>(this._scenePayload);\n    localPayloadCopy.sceneConfig.entities.forEach(entityProps => {\n      this.buildEntity(entityProps);\n    });\n  }\n}","export const deepClone = <T>(input: T): T => {\n  return JSON.parse(JSON.stringify(input)) as T\n}","import Entity from \"./Entity\";\n\nexport default abstract class Component {\n  entity: Entity;\n\n  constructor(entity: Entity) {\n    this.entity = entity;\n  }\n\n  init(props: Engine.ComponentProps) {\n  }\n\n  abstract update(): void;\n}\n\n// This is only used for generating the BaseComponentType for internal use, \n// when creating Components, extend the abstract Component class instead.\nclass BaseComponent extends Component {\n  entity!: Entity;\n\n  init(props: Engine.ComponentProps) { }\n\n  update() { }\n}\n\nexport type BaseComponentType = typeof BaseComponent;","import * as THREE from 'three';\nimport Component from './Component';\nimport Entity from './Entity';\ninterface ITransformProps {\n  position?: THREE.Vector3;\n  rotation?: THREE.Euler;\n  scale?: THREE.Vector3;\n}\n\nexport default class Transform extends Component {\n  entity: Entity;\n\n  // <@public>\n  public position: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n  public rotation: THREE.Euler = new THREE.Euler(0, 0, 0, 'XYZ');\n  public scale: THREE.Vector3 = new THREE.Vector3(1, 1, 1);\n  // </@public>\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.entity = entity;\n  }\n\n  init(props?: ITransformProps) {\n    this.position = props?.position ?? this.position;\n    this.rotation = props?.rotation ?? this.rotation;\n    this.scale = props?.scale ?? this.scale;\n    this.applyMatrix();\n  }\n\n  private applyPosition() {\n    this.entity.mesh.position.setX(this.position.x);\n    this.entity.mesh.position.setY(this.position.y);\n    this.entity.mesh.position.setZ(this.position.z);\n  }\n\n  private applyRotation() {\n    this.entity.mesh.setRotationFromEuler(new THREE.Euler(this.rotation.x, this.rotation.y, this.rotation.z));\n  }\n\n  private applyScale() {\n    this.entity.mesh.scale.setX(this.scale.x);\n    this.entity.mesh.scale.setY(this.scale.y);\n    this.entity.mesh.scale.setZ(this.scale.z);\n  }\n\n  private applyMatrix() {\n    if (!this.entity) { return; }\n    this.applyPosition();\n    this.applyRotation();\n    this.applyScale();\n  }\n\n  update() {\n    this.applyMatrix();\n  }\n}\n","import * as THREE from 'three';\nimport Transform from \"./Transform\";\nimport { BaseComponentType } from \"./Component\";\nimport Entity from \"./Entity\";\nexport default class ComponentManager {\n  public static instance: ComponentManager;\n  private components: { [key: string]: { constructor: BaseComponentType, props: Engine.ComponentProps } } = {};\n\n  constructor() {\n    if (ComponentManager.instance) return;\n    ComponentManager.instance = this;\n\n    this.registerComponent(\"Transform\", Transform, {\n      position: { x: 0, y: 0, z: 0 },\n      rotation: { x: 0, y: 0, z: 0 },\n      scale: { x: 1, y: 1, z: 1 },\n    });\n  }\n\n  public getComponents() {\n    return { ...this.components };\n  };\n\n  public registerComponent(componentName: string, component: BaseComponentType, props: Engine.ComponentProps): void {\n    this.components[componentName] = { constructor: component, props };\n  };\n\n  public getComponentProps(name: Engine.ComponentType): Engine.ComponentProps | null {\n    const componentProps = this.components[name].props ?? null;\n    if (!componentProps) {\n      return null;\n    }\n    return componentProps;\n  }\n\n  private getComponent(name: Engine.ComponentType): BaseComponentType | null {\n    return this.components[name].constructor ?? null;\n  }\n\n  public setComponent(entity: Entity, componentType: Engine.ComponentType, componentProps: Engine.ComponentProps): void {\n    const component = this.getComponent(componentType);\n    if (!component) {\n      console.error(`Component ${componentType} not found`);\n      return;\n    }\n\n    // Translate vector props \n    Object.entries(componentProps).forEach(([name, prop]) => {\n      if (Array.isArray(prop)) {\n        if (prop.length === 3) {\n          componentProps[name] = new THREE.Vector3(prop[0], prop[1], prop[2]) as any;\n        }\n        else if (prop.length === 2) {\n          componentProps[name] = new THREE.Vector2(prop[0], prop[1]) as any;\n        }\n      }\n    });\n    const componentInstance = new component(entity);\n    componentInstance.init(componentProps);\n    entity.components[componentType] = componentInstance;\n  }\n}","import * as THREE from 'three';\n\nexport default class MaterialManager {\n  public static instance: MaterialManager;\n\n  constructor() {\n    if (MaterialManager.instance) return;\n    MaterialManager.instance = this;\n  }\n\n  getMaterial(type: Engine.MaterialType): THREE.Material {\n    switch (type) {\n      case 'normal':\n        return new THREE.MeshNormalMaterial();\n      case 'basic':\n        return new THREE.MeshBasicMaterial();\n      case 'phong':\n        return new THREE.MeshPhongMaterial();\n      case 'lambert':\n        return new THREE.MeshLambertMaterial();\n      case 'wireframe':\n        return new THREE.MeshBasicMaterial({ wireframe: true });\n      default:\n        return new THREE.MeshBasicMaterial();\n    }\n  }\n}\n","import * as THREE from 'three';\n\nexport default class GeometryManager {\n  public static instance: GeometryManager;\n\n  constructor() {\n    if (GeometryManager.instance) return;\n    GeometryManager.instance = this;\n  }\n\n  getGeometry(type: Engine.MaterialType): THREE.BufferGeometry {\n    switch (type) {\n      case 'box':\n        return new THREE.BoxBufferGeometry();\n      case 'sphere':\n        return new THREE.SphereBufferGeometry(1, 16, 8);\n      case 'cylinder':\n        return new THREE.CylinderBufferGeometry(1, 1, 1, 16, 1);\n      case 'torus':\n        return new THREE.TorusBufferGeometry(6, 1.1, 10, 32, 6.3);\n      case 'plane':\n        return new THREE.PlaneBufferGeometry(1, 1);\n      case 'tetrahedron':\n        return new THREE.TetrahedronBufferGeometry();\n      case 'octahedron':\n        return new THREE.OctahedronBufferGeometry();\n      case 'dodecahedron':\n        return new THREE.DodecahedronBufferGeometry();\n      case 'icosahedron':\n        return new THREE.IcosahedronBufferGeometry();\n      default:\n        return new THREE.SphereBufferGeometry();\n    }\n  }\n}","import * as three from 'three';\nimport { Component, ReactElement, useEffect, useState } from 'react';\nimport { createContext } from 'react';\nimport ComponentManager from '../../engine/core/ComponentManager';\nimport { formatScriptString } from '../../utils/script.utils';\nimport context from '../../engine/core/EngineContext';\nimport SceneManager from '../../engine/core/SceneManager';\n\ninterface IScriptContext {\n  scripts: Engine.Script[];\n  selectedScript: Engine.Script | undefined;\n  setScripts: (scripts: Engine.Script[]) => void;\n  setSelectedScript: (script: Engine.Script | undefined) => void;\n  compileScripts: () => void;\n};\n\nconst initialValue: IScriptContext = {\n  scripts: [],\n  selectedScript: undefined,\n  setScripts: (scripts: Engine.Script[]) => { },\n  setSelectedScript: (script: Engine.Script | undefined) => { },\n  compileScripts: () => { }\n}\n\nexport const ScriptContext = createContext<IScriptContext>(initialValue);\n\nexport const ScriptProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [scripts, setScripts] = useState<Engine.Script[]>([]);\n  const [selectedScript, setSelectedScript] = useState<Engine.Script | undefined>()\n\n  const compileScripts = () => {\n    // *  Cheeky reference hoist reference of three.js\n    \n    const THREE = three;\n    const SCENE = SceneManager.instance.getScene();\n    \n    scripts.forEach(script => {\n      try {\n        const formattedScript = formatScriptString(script);\n        const NewComponent: any = eval(`(${formattedScript})`); // ! <-- dangerous usage of eval ;)\n        Object.setPrototypeOf(NewComponent, Component); // ! <-- lol\n        const scriptCopy = `${script.content}`;\n        const removePrefix = scriptCopy.substring(scriptCopy.indexOf(\"// <public>\") + 11);\n        let pureProps = removePrefix.substring(0, removePrefix.indexOf(\"// </public>\"));\n        pureProps = pureProps.replaceAll(';', ',');\n        pureProps = pureProps.replaceAll('=', ':');\n        let props = {};\n        if (`${pureProps}`.replace(/\\s/g, \"\").length) {\n          pureProps = `{${pureProps}}`\n          props = eval(`(${pureProps})`); // ! <-- dangerous usage of eval pt. 2 ;)\n        }\n        ComponentManager.instance.registerComponent(script.name, NewComponent, props);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    )\n  }\n\n  useEffect(() => {\n    compileScripts();\n  }, [scripts])\n\n  const contextValue = { scripts, setScripts, selectedScript, setSelectedScript, compileScripts };\n\n  return (\n    <ScriptContext.Provider value={contextValue}>\n      {children}\n    </ScriptContext.Provider>\n  );\n};","import { v4 as uuidv4 } from 'uuid';\n\nconst COMPONENT_DEF = `// @defineComponent`;\nconst baseScriptContent = `class Name {\n  \n  // <public>\n\n  // </public>\n\n  ${COMPONENT_DEF}\n\n  init(props) {\n\n  }\n\n  update() {\n\n  }\n}`\nexport const generateNewScript = (name: string): Engine.Script => {\n  const id = uuidv4();\n  return {\n    id,\n    name,\n    language: 'js',\n    content: baseScriptContent,\n    type: 'component'\n  }\n};\n\nexport const formatScriptString = (script: Engine.Script): string => {\n  const formatted = `(${script.content})`;\n  return formatted.replace(COMPONENT_DEF, `\n          entity;\n        \n          constructor(entity) {\n            this.entity = entity;\n          }\n        `);\n};","import { ReactElement, useEffect, useRef } from 'react';\nimport { createContext } from 'react';\n\ninterface IEditorContext {\n  renderElement?: React.MutableRefObject<HTMLDivElement | null>;\n};\n\nconst initialValue: IEditorContext = {}\n\nexport const EditorContext = createContext<IEditorContext>(initialValue);\n\nexport const EditorProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const renderElement = useRef<HTMLDivElement>(null)\n  const contextValue = { renderElement };\n\n\n  return (\n    <EditorContext.Provider value={contextValue}>\n      {children}\n    </EditorContext.Provider>\n  );\n};","import * as THREE from 'three';\nimport SceneManager from './SceneManager';\n\nexport default class CameraManager {\n  public static instance: CameraManager;\n  private renderer = new THREE.WebGLRenderer({ antialias: true });\n  private renderElement: HTMLElement | undefined;\n  private raycaster: THREE.Raycaster = new THREE.Raycaster();\n  private fov = 60;\n  private near = 0.01;\n  private far = 20000;\n  private camera!: THREE.PerspectiveCamera;\n  private controls: any;\n\n\n  constructor() {\n    if (CameraManager.instance) return CameraManager.instance;\n    CameraManager.instance = this;\n    this._setCamera();\n    window.addEventListener('resize', () => this.handleResize());\n  }\n\n  setup(renderElement: HTMLElement, scene: THREE.Scene) {\n    this.renderer.setSize(renderElement.clientWidth, renderElement.clientHeight);\n    this.renderElement = renderElement;\n    this.renderElement.appendChild(this.renderer.domElement);\n    this.handleResize();\n    this._setControls();\n    this._setRaycaster();\n    this._runSceneLoop(scene);\n  }\n\n  resetCamera() {\n    this.renderer.setAnimationLoop(null);\n  }\n\n  handleClick(mouseX: number, mouseY: number) {\n    const pointer = new THREE.Vector2(mouseX, mouseY);\n    this.raycaster.setFromCamera(pointer, this.camera);\n    const intersects = this.raycaster.intersectObjects(SceneManager.instance.getScene().children, true).filter(e => e.object.type === 'Mesh');\n    \n    if (intersects.length > 0) {\n      SceneManager.instance.select(intersects[0].object);\n    }\n    else {\n      SceneManager.instance.select();\n    }\n  }\n\n  private _setCamera() {\n    if (!this.renderElement) {\n      this.camera = new THREE.PerspectiveCamera(this.fov, window.innerWidth / window.innerHeight, this.near, this.far);\n      this.camera.position.y = 10;\n      this.camera.rotation.x = -0.1;\n    }\n  }\n\n  private _runSceneLoop(scene: THREE.Scene) {\n    this.renderer.setAnimationLoop((time: number) => this.update(scene));\n  }\n\n  private _setRaycaster() {\n    this.raycaster = new THREE.Raycaster();\n  }\n\n  private _setControls() {\n    this.camera.position.z = 50;\n  }\n\n  handleResize() {\n    if (!this.renderElement) return;\n    const dimensions = this.renderElement.getBoundingClientRect();\n    this.camera.aspect = dimensions.width / dimensions.height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.renderElement.clientWidth, this.renderElement.clientHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n  }\n\n  update(scene: THREE.Scene) {\n    this.renderer.render(scene, this.camera);\n    SceneManager.instance.updateScene();\n  }\n}","import CameraManager from \"./CameraManager\";\nimport ComponentManager from \"./ComponentManager\";\nimport GeometryManager from \"./GeometryManager\";\nimport MaterialManager from \"./MaterialManager\";\nimport SceneManager from \"./SceneManager\";\n\nclass EngineContext {\n  sceneManager: SceneManager;\n  cameraManager: CameraManager;\n  componentManager: ComponentManager;\n  materialManager: MaterialManager;\n  geometryManager: GeometryManager;\n  private _renderElement!: HTMLElement;\n  private isInitialized = false;\n\n  constructor() {\n    this.sceneManager = new SceneManager();\n    this.cameraManager = new CameraManager();\n    this.componentManager = new ComponentManager();\n    this.materialManager = new MaterialManager();\n    this.geometryManager = new GeometryManager();\n  }\n\n  init(renderElement: HTMLElement, payload?: Engine.ScenePayload) {\n    if (this.isInitialized) return;\n    this._renderElement = renderElement;\n    if (payload) this.updateScenePayload(payload);\n    this.runEditMode();\n    this.isInitialized = true;\n  }\n\n  runPlayMode() {\n    this.sceneManager.runPlayScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  runEditMode() {\n    this.sceneManager.runEditScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  updateScenePayload(payload: Engine.ScenePayload) {\n    this.sceneManager.setScenePayload(payload);\n  }\n\n  updateSpecificEntity(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    this.sceneManager.updateEntityPayload(entityID, entityProps);\n  }\n\n  addNewEntity(entity: Engine.EntityProps) {\n    this.sceneManager.buildEntity(entity);\n\n  }\n\n  isPlaying(): boolean {\n    return SceneManager.isPlaying() ?? false\n  }\n\n  handleClick(mouseX: number, mouseY: number) {\n    this.cameraManager.handleClick(mouseX, mouseY);\n  }\n\n  selectEntity(entityID: Engine.EntityID) {\n    this.sceneManager.selectByID(entityID);\n  }\n\n  getSelectedEntity(): Engine.EntityID | undefined {\n    return this.sceneManager.getSelectedEntity();\n  }\n\n  getSelectedEntityProps(): Engine.EntityProps | undefined {\n    return this.sceneManager.getSelectedEntityPayload();\n  }\n}\n\nconst context = new EngineContext();\n\nexport default context;","import * as THREE from 'three';\nimport { ReactElement, useEffect, useMemo } from 'react';\nimport { createContext } from 'react';\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport context from '../../engine/core/EngineContext';\n\ninterface ISceneContext {\n  sceneConfig: Engine.SceneConfig;\n  setEntities: (props: Engine.EntityProps[]) => void;\n  selectedEntityID: string | null;\n  setSelectedEntityID: (entityID: string | null) => void;\n  setCameraProps: (cameraProps: Engine.CameraProps) => void;\n};\n\nconst initialValue = {\n  sceneConfig: {\n    entities: [] as Engine.EntityProps[],\n    camera: {\n      position: new THREE.Vector3(),\n      fov: 70,\n      near: 0.1,\n      far: 1000,\n      controls: \"orbit\" as Engine.ControlType\n    }\n  },\n  selectedEntityID: null,\n  setEntities: (entities: Engine.EntityProps[]) => { },\n  setSelectedEntityID: (entityID: string | null) => { },\n  setCameraProps: (cameraProps: Engine.CameraProps) => { }\n};\n\nexport const SceneContext = createContext<ISceneContext>(initialValue);\n\nexport const SceneProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [cameraProps, setCameraProps] = useState<Engine.CameraProps>({\n    position: new THREE.Vector3(),\n    fov: 70,\n    near: 0.1,\n    far: 1000,\n    controls: \"orbit\" as Engine.ControlType\n  });\n\n  const [entities, setEntities] = useState<Engine.EntityProps[]>([\n    {\n      id: uuidv4(),\n      name: \"Entity A\",\n      material: 'normal',\n      geometry: 'box',\n      children: [],\n      components: {\n        \"Transform\": {\n          position: {x: 3, y: 0.2, z: 1},\n          rotation: {x: 3, y: 3, z: 3},\n          scale: {x: 2, y: 1, z: 1},\n        },\n      }\n    },\n  ])\n  const [selectedEntityID, setSelectedEntityID] = useState<string | null>(null);\n\n  const sceneConfig = useMemo(() => (\n    {\n      entities,\n      camera: cameraProps\n    }\n  ), [entities, cameraProps]);\n\n  useEffect(() => {\n    if (selectedEntityID) {\n      const entityProps = entities.find(e => e.id === selectedEntityID);\n      if (!entityProps) return;\n      context.updateSpecificEntity(selectedEntityID, entityProps);\n    }\n  }, [sceneConfig])\n\n  const contextValue = {\n    sceneConfig,\n    selectedEntityID,\n    setEntities,\n    setCameraProps,\n    setSelectedEntityID\n  }\n  return (\n    <SceneContext.Provider value={contextValue}>\n      {children}\n    </SceneContext.Provider>\n  );\n}","import { useContext, useMemo} from \"react\";\nimport { SceneContext } from \"./SceneContext\";\nimport context from \"../../engine/core/EngineContext\";\nimport { generateNewEntity } from \"../../utils/entity.utils\";\n\nconst useScene = () => {\n  const { sceneConfig, setEntities, selectedEntityID, setSelectedEntityID } = useContext(SceneContext);\n\n\n  const selectEntity = (id: Engine.EntityID) => {\n    if (id === selectedEntityID) {\n      context.selectEntity('')\n      setSelectedEntityID('')\n      return;\n    }\n    context.selectEntity(id);\n    setSelectedEntityID(id);\n  };\n\n  const selectedEntity: Engine.EntityProps | null = useMemo(() => {\n    return sceneConfig.entities.find(e => e.id === selectedEntityID) ?? null;\n  }, [sceneConfig, selectedEntityID]);\n\n\n  const updateEntity = (entity: Engine.EntityProps) => {\n    const index = sceneConfig.entities.findIndex(e => e.id === entity.id);\n    if (index === -1) {\n      console.error(`Couldn't find ${entity.id} in sceneConfig.entities`);\n    };\n    sceneConfig.entities[index] = entity;\n    setEntities([...sceneConfig.entities]);\n  }\n\n  const updateEntityParent = (child: Engine.EntityID, newParent: Engine.EntityID | null) => {\n    // TODO: Implement this\n  }\n\n  const createEntity = () => {\n    const newEntity: Engine.EntityProps = generateNewEntity();\n    setEntities([...sceneConfig.entities, newEntity]);\n    context.addNewEntity(newEntity);\n  }\n\n  return {\n    sceneConfig,\n    selectedEntity, \n    createEntity, \n    selectEntity,\n    updateEntity,\n    updateEntityParent,\n  };\n}\n\nexport default useScene;","import { v4 as uuidv4 } from 'uuid';\nexport const generateNewEntity = (): Engine.EntityProps => {\n  const id = uuidv4();\n  return {\n    id,\n    name: \"New Entity\",\n    geometry: 'box',\n    material: 'normal',\n    children: [],\n    components: {\n      Transform: {\n        position: { x: 0, y: 0, z: 0 },\n        rotation: { x: 0, y: 0, z: 0 },\n        scale: { x: 1, y: 1, z: 1 },\n      }\n    },\n  };\n}","\nimport { useContext, } from \"react\";\nimport { generateNewScript } from \"../../utils/script.utils\";\nimport { ScriptContext } from \"./ScriptContext\";\n\nconst useScripts = () => {\n  const { scripts, setScripts, selectedScript, setSelectedScript, compileScripts } = useContext(ScriptContext);\n\n  const loadScript = (scriptID: string) => {\n    const script = scripts.find(s => s.id === scriptID);\n    setSelectedScript(script);\n  };\n  \n  const saveScript = (script: Engine.Script) => {\n    const foundScript = scripts.find(s => s.id === script.id);\n    if (!foundScript) return;\n    foundScript.content = script.content;\n    compileScripts();\n  };\n  \n  const createScript = (name: string) => {\n    const newScript = generateNewScript(name);\n    setScripts([...scripts, newScript]);\n  };\n\n\n  return {\n    scripts,\n    setScripts,\n    selectedScript,\n    setSelectedScript,\n    loadScript,\n    saveScript,\n    createScript,\n  };\n}\n\nexport default useScripts;","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport context from \"../../engine/core/EngineContext\";\nimport SceneManager from \"../../engine/core/SceneManager\";\nimport useScene from \"../scene/useScene\";\nimport useScripts from \"../scripts/useScripts\";\nimport { EditorContext } from \"./EditorContext\";\n\nconst useEditor = () => {\n  const { scripts } = useScripts();\n  const { sceneConfig, selectEntity } = useScene();\n  const { renderElement } = useContext(EditorContext);\n  const [isRunning, setIsRunning] = useState(context.isPlaying());\n\n  const scenePayload = useMemo(() => ({ sceneConfig, scripts }), [sceneConfig, scripts]);\n\n  useEffect(() => {\n    const init = () => {\n      if (!renderElement || !renderElement.current || !scenePayload) { return; }\n      context.init(renderElement.current, scenePayload);\n    };\n    init();\n  }, [renderElement]);\n\n  useEffect(() => {\n    context.updateScenePayload(scenePayload);\n  }, [scenePayload])\n\n  const toggleRun = () => {\n    if (!renderElement || !renderElement.current) { return; }\n    if (SceneManager.isPlaying()) {\n      setIsRunning(false);\n      context.runEditMode();\n      return;\n    }\n    context.runPlayMode();\n    setIsRunning(true);\n  };\n\n  const handleClickScene = (e: React.MouseEvent) => {\n    const canvas: HTMLCanvasElement = e.target as unknown as HTMLCanvasElement;\n    const domRect: DOMRect = canvas.getBoundingClientRect();\n    const [mouseX, mouseY]: [number, number] = [((e.clientX - domRect.x) / domRect.width) * 2 - 1, -((e.clientY - domRect.y) / domRect.height) * 2 + 1];\n    context.handleClick(mouseX, mouseY);\n    selectEntity(context.getSelectedEntity() ?? '');\n  }\n\n  return {\n    renderElement,\n    isRunning,\n    toggleRun,\n    handleClickScene\n  };\n}\n\nexport default useEditor;","import { useState } from 'react';\nimport { useEffect } from 'react';\nimport ComponentManager from '../../engine/core/ComponentManager';\nimport useEditor from '../../state/editor/useEditor';\nimport useScene from '../../state/scene/useScene';\n\ninterface ComponentFieldValueProps {\n  field: Engine.ComponentPropType;\n  updateField: (field: Engine.ComponentPropType) => void;\n}\n\nconst ComponentFieldValue = ({ field, updateField }: ComponentFieldValueProps): React.ReactElement => {\n\n  const handleUpdateField = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (typeof field === 'number') {\n      updateField(Number(e.target.value));\n      return;\n    }\n\n    if (typeof field === 'string') {\n      updateField(e.target.value);\n    }\n  }\n\n  if (typeof field === 'number' || typeof field === 'string') return (\n    <div className=\"bg-gray-700 text-white px-1  w-max\">\n      <input\n        type={typeof field === 'string' ? 'string' : 'number'}\n        value={typeof field === 'number' ? field : field}\n        onChange={handleUpdateField}\n        className=\"bg-gray-700 w-16 font-mono text-xs\"\n      />\n    </div>\n  );\n\n  if (Array.isArray(field)) return (\n    <div>array field</div>\n  );\n\n  return (\n    <div className=\"bg-gray-700 text-white px-2 grid grid-cols-3 gap-1\">\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">x:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.x}\n          onChange={e => updateField({ x: Number(e.target.value), y: field?.y ?? 0, z: field?.z ?? 0 })}\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">y:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.y}\n          onChange={e => updateField({ x: field?.x ?? 0, y: Number(e.target.value), z: field?.z ?? 0 })}\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">z:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.z}\n          onChange={e => updateField({ x: field?.x ?? 0, y: field?.y ?? 0, z: Number(e.target.value) })}\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n    </div>\n  )\n}\n\ninterface ComponentNodeProps {\n  componentType: Engine.ComponentType;\n  componentProps: Engine.ComponentProps;\n  updateComponent: (type: Engine.ComponentType, field: string, value: Engine.ComponentPropType) => void;\n}\n\nconst ComponentNode = ({\n  componentType,\n  componentProps,\n  updateComponent\n}: ComponentNodeProps): React.ReactElement => {\n\n  return (\n    <div className=\"bg-gray-800 text-white p-2\">\n      <h3 className=\"mb-2\">{componentType}</h3>\n      <div className=\"space-y-2\">\n        {\n          Object.entries(componentProps).map(([fieldName, fieldValue]) => (\n            <div key={fieldName} className=\"flex space-x-2\">\n              <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>{fieldName}</p>\n              <ComponentFieldValue field={fieldValue} updateField={e => updateComponent(componentType, fieldName, e)} />\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default function Controls() {\n  const { isRunning } = useEditor()\n  const { selectedEntity, updateEntity, sceneConfig, } = useScene();\n\n  const [controls, setControls] = useState<Record<Engine.ComponentType, Engine.ComponentProps>>({});\n  const [materialType, setMaterialType] = useState<Engine.MaterialType>('normal');\n  const [geometryType, setGeometryType] = useState<Engine.GeometryType>('box');\n\n  useEffect(() => {\n    if (!selectedEntity) return;\n    setMaterialType(selectedEntity.material);\n    setGeometryType(selectedEntity.geometry);\n  }, [selectedEntity])\n\n  // * Handles populating all correct value fields when selecting entity */\n  useEffect(() => {\n    const updateComponentFields = (entity: Engine.EntityProps) => {\n      const propFields: Record<Engine.ComponentType, Engine.ComponentProps> = {};\n      Object.entries(entity.components).forEach(([type, props]) => {\n        propFields[type] = props;\n      });\n      setControls({ ...propFields } as any);\n    }\n    if (selectedEntity) updateComponentFields(selectedEntity);\n  }, [selectedEntity, sceneConfig, isRunning]);\n\n  const addComponent = (componentName: Engine.ComponentType) => {\n    if (!selectedEntity) return;\n    const componentProps = ComponentManager.instance.getComponentProps(componentName);\n    if (!componentProps) return;\n    selectedEntity.components[componentName] = componentProps;\n    updateEntity(selectedEntity);\n  }\n\n  const updateComponent = (type: Engine.ComponentType, field: string, value: Engine.ComponentPropType) => {\n    const newControls = { ...controls };\n    newControls[type][field] = value;\n    setControls(newControls);\n    if (selectedEntity) {\n      selectedEntity.components = newControls;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  const updateMaterial = (newMaterial: Engine.MaterialType) => {\n    setMaterialType(newMaterial);\n    if (selectedEntity) {\n      selectedEntity.material = newMaterial;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  const updateGeometry = (newGeometry: Engine.GeometryType) => {\n    setGeometryType(newGeometry);\n    if (selectedEntity) {\n      selectedEntity.geometry = newGeometry;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  // todo: context.sceneManager.getSelectedEntityPayload()?.components?.transform.rotation\n\n  if (!selectedEntity) return (<div className=\"bg-gray-900 h-full flex flex-col space-y-1\"></div>)\n\n  const getComponentOptions = (): { label: string, value: string }[] => {\n    const components = ComponentManager.instance.getComponents();\n    return Object.keys(components).map(component => ({ label: component, value: component }));\n  }\n\n  const componentOptions = getComponentOptions();\n\n  const materialOptions: { label: string, value: string }[] = [\n    {\n      label: 'Normal',\n      value: 'normal',\n    },\n    {\n      label: 'Basic',\n      value: 'basic',\n    },\n    {\n      label: 'Lambert',\n      value: 'lambert',\n    },\n    {\n      label: 'Phong',\n      value: 'phong'\n    }\n  ]\n\n  const geometryOptions: { label: string, value: string }[] = [\n    {\n      label: 'Box',\n      value: 'box'\n    },\n    {\n      label: 'Sphere',\n      value: 'sphere',\n    },\n    {\n      label: 'Torus',\n      value: 'torus',\n    },\n  ]\n\n  return (\n    <div className=\"bg-gray-900 h-full flex flex-col space-y-1\">\n      <section className=\"space-y-2\">\n        {\n          Object.entries(controls).map(([type, props]) =>\n            <ComponentNode\n              componentType={type}\n              componentProps={props}\n              key={type}\n              updateComponent={updateComponent}\n            />\n          )\n        }\n      </section>\n      <section>\n        {\n          componentOptions.map(({ label, value }) => (\n            <button\n              className=\"block mx-auto mt-2\"\n              onClick={() => addComponent(value)}\n              key={value}>Add {label}</button>\n          ))\n        }\n      </section>\n      <section>\n        <div className=\"bg-gray-800 text-white p-2\">\n          <h3>Mesh</h3>\n          <div className=\"space-y-2\">\n            <div className=\"flex space-x-2 items-center\">\n              <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>Material</p>\n              <select onChange={e => updateMaterial(e.target.value)} defaultValue={materialType}>\n                {\n                  materialOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)\n                }\n              </select>\n            </div>\n            <div className=\"flex space-x-2 items-center\">\n              <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>Geometry</p>\n              <select onChange={e => updateGeometry(e.target.value)} value={geometryType}>\n                {\n                  geometryOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)\n                }\n              </select>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div >\n  )\n}","import React, { useMemo, ReactElement } from 'react';\nimport useScene from '../../state/scene/useScene';\n\ninterface Props {\n  entity: Engine.EntityProps;\n}\n\nfunction TreeNode({ entity }: Props): ReactElement {\n  const { selectedEntity, selectEntity } = useScene();\n\n  const isSelected = useMemo(() => selectedEntity?.id === entity.id, [selectedEntity, entity.id]);\n  \n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    selectEntity(entity.id);\n  }\n\n  return (\n    <div\n      className={`\n    p-2\n    rounded-md\n    transition\n    cursor-pointer\n    select-none\n    ${isSelected ? 'hover:bg-indigo-500' : 'hover:bg-indigo-400'}\n    ${isSelected && 'bg-indigo-300'}`} onClick={handleClick}>\n      <h1>{entity?.name ?? '__ENTITY__'}</h1>\n    </div>\n  )\n\n}\n\nexport default function TreeViewPanel(): ReactElement {\n  const { sceneConfig } = useScene();\n  return (\n    <div className=\"bg-indigo-200 p-1.5 space-y-1\">\n      {\n        sceneConfig.entities.map(entity =>\n          <TreeNode\n            key={entity.id}\n            entity={entity}\n          />\n        )\n      }\n    </div>\n  )\n}\n","import { ReactElement } from 'react'\nimport useScripts from '../../state/scripts/useScripts'\n\nexport default function ScriptPanel(): ReactElement {\n  const { scripts, loadScript } = useScripts()\n\n  return (\n    <div className=\"bg-indigo-400 h-full p-2\">\n      {\n        scripts.map(s => (\n          <div\n            className=\"transition hover:bg-indigo-500 p-0.5 rounded-md font-mono text-sm\"\n            onClick={() => loadScript(s.id)} key={s.id}>\n            {s.name}.{s.language}\n          </div>)\n        )\n      }\n    </div>\n  )\n}\n","import React, { ReactElement, useEffect, useState } from 'react'\nimport useEditor from '../../state/editor/useEditor'\nimport useScene from '../../state/scene/useScene'\nimport useScripts from '../../state/scripts/useScripts'\nimport Controls from '../components/Controls'\nimport TreeViewPanel from '../components/TreeViewPanel'\nimport Editor from \"@monaco-editor/react\";\nimport ScriptPanel from '../components/ScriptPanel'\n\nexport default function BrowserEngine(): ReactElement {\n  const { createEntity, selectedEntity } = useScene()\n  const { renderElement, toggleRun, isRunning, handleClickScene } = useEditor()\n  const { createScript, selectedScript, loadScript, saveScript } = useScripts();\n\n  const [scriptBody, setScriptBody] = useState(selectedScript?.content ?? '');\n\n  useEffect(() => {\n    if (!scriptBody && selectedScript) {\n      setScriptBody(selectedScript.content);\n    }\n  }, [selectedScript]);\n\n  const handleEditorChange = (newValue: string | undefined) => {\n    setScriptBody(newValue ?? '')\n  }\n\n  const handleCreateScript = () => {\n    createScript('Component')\n  }\n\n  const handleSaveScript = () => {\n    if (selectedScript) {\n      saveScript({ ...selectedScript, content: scriptBody })\n    }\n  }\n\n  const handleCloseScript = () => {\n    loadScript('');\n  }\n\n  return (\n    <main className=\"w-screen h-screen overflow-hidden\">\n      <div className={`h-0.5 transition bg-red-600 ${isRunning && 'bg-green-500'}`}></div>\n      <nav className=\"bg-gray-900 p-2 flex w-full\">\n        <div className=\"space-x-2\">\n          <button onClick={toggleRun} className=\"primary\">{isRunning ? 'Stop' : 'Run'} Scene</button>\n          <button onClick={createEntity} className=\"secondary\">Add Entity</button>\n          <button onClick={handleCreateScript} className=\"secondary\">Add Script</button>\n        </div>\n        {\n          selectedScript &&\n          (\n            <div className=\"space-x-2 ml-auto\">\n              <button\n                className=\"secondary\"\n                onClick={handleCloseScript}\n              >Close Editor</button>\n              <button\n                onClick={handleSaveScript}\n                className=\"submit\">Save script</button>\n            </div>\n          )\n        }\n      </nav>\n      <section className=\"w-full h-full grid\" style={{ gridTemplateColumns: '1fr 17rem' }}>\n        <div className=\"h-full w-full grid relative\">\n          {renderElement && (<div className=\"bg-gray-600\" id=\"scene\" ref={renderElement} onClick={(e) => handleClickScene(e)} />)}\n          {\n            selectedScript && (\n              <>\n                <div className=\"absolute h-full w-full\" key={selectedScript.id}>\n                  <Editor\n                    height=\"100%\"\n                    width=\"100%\"\n                    defaultLanguage=\"javascript\"\n                    defaultValue={selectedScript.content}\n                    theme=\"vs-dark\"\n                    onChange={handleEditorChange} />\n                </div>\n              </>\n            )\n          }\n        </div>\n        <div className=\"grid grid-rows-5 gap-0 5\">\n          <TreeViewPanel />\n          <div className=\"row-span-2\">\n            <Controls />\n          </div>\n          <div className=\"row-span-2\">\n            <ScriptPanel />\n          </div>\n        </div>\n      </section>\n      {/* {selectedScript && (<section className=\"fixed inset-0 grid place-items-center\" onClick={() => loadScript('')}>\n        <div\n          onClick={e => {\n            e.stopPropagation();\n            saveScript({ ...selectedScript, content: scriptBody });\n          }}\n          className=\"absolute top-10 right-10 py-2 px-4 cursor-pointer rounded-md bg-green-600 text-white\">\n          Save\n        </div>\n        <div className=\"bg-black monaco-editor\" style={{ width: '60vw' }} onClick={e => e.stopPropagation()}>\n          <Editor\n            height=\"90vh\"\n            defaultLanguage=\"javascript\"\n            defaultValue={selectedScript.content}\n            theme=\"vs-dark\"\n            onChange={handleEditorChange} />\n        </div>\n      </section>)} */}\n    </main>\n  )\n}\n","import { EditorProvider } from \"./state/editor/EditorContext\";\nimport { SceneProvider } from \"./state/scene/SceneContext\";\nimport { ScriptProvider } from \"./state/scripts/ScriptContext\";\nimport BrowserEngine from \"./ui/base/BrowserEngine\";\n\nfunction App() {\n  return (\n    <SceneProvider>\n      <ScriptProvider>\n        <EditorProvider>\n          <BrowserEngine />\n        </EditorProvider>\n      </ScriptProvider>\n    </SceneProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}