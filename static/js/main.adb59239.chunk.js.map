{"version":3,"sources":["state/editor/EditorContext.tsx","state/scene/SceneContext.tsx","state/scripts/ScriptContext.tsx","engine/core/CameraManager.ts","engine/core/Entity.ts","engine/core/SceneManager.ts","state/scene/useScene.tsx","state/scripts/useScripts.tsx","state/editor/useEditor.tsx","ui/components/Controls.tsx","ui/components/TreeViewPanel.tsx","ui/base/BrowserEngine.tsx","App.tsx","index.tsx"],"names":["initialValue","EditorContext","createContext","EditorProvider","children","contextValue","renderElement","useRef","Provider","value","sceneConfig","entities","camera","position","THREE","fov","near","far","controls","selectedEntity","setEntities","setSelectedEntity","entityID","setCameraProps","cameraProps","SceneContext","SceneProvider","useState","id","uuidv4","name","material","geometry","components","scripts","setScripts","ScriptContext","ScriptProvider","OrbitControls","oc","CameraManager","renderer","antialias","instance","this","_setCamera","window","addEventListener","handleResize","scene","setSize","clientWidth","clientHeight","appendChild","domElement","_setControls","_runSceneLoop","innerWidth","innerHeight","setAnimationLoop","time","Update","autoRotate","enableDamping","dampingFactor","z","update","aspect","updateProjectionMatrix","setPixelRatio","devicePixelRatio","render","SceneManager","UpdateScene","Entity","props","mesh","_id","mat","forEach","entityProps","child","CreateEntity","addChild","type","componentProps","console","debug","parent","entity","_entities","push","_scene","add","cameraManager","setup","scenePayload","isRunning","_components","useScene","useContext","createEntity","newEntity","selectEntity","updateEntity","updateEntityParent","newParent","useScripts","loadScript","saveScript","script","createScript","useEditor","useEffect","init","current","Initialize","toggleRun","Stop","payload","Run","Controls","useMemo","selected","flatMap","e","length","getControls","useCallback","useControls","Object","entries","TreeNode","isSelected","className","onClick","TreeViewPanel","map","BrowserEngine","style","gridTemplateColumns","ref","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.adb59239.chunk.js","sourcesContent":["import { ReactElement, useRef } from 'react';\nimport { createContext } from 'react';\n\ninterface IEditorContext {\n  renderElement?: React.MutableRefObject<HTMLDivElement | null>;\n};\n\nconst initialValue: IEditorContext = {}\n\nexport const EditorContext = createContext<IEditorContext>(initialValue);\n\nexport const EditorProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const renderElement = useRef<HTMLDivElement>(null)\n  const contextValue = { renderElement };\n\n  return (\n    <EditorContext.Provider value={contextValue}>\n      {children}\n    </EditorContext.Provider>\n  );\n};","import * as THREE from 'three';\nimport { ReactElement } from 'react';\nimport { createContext } from 'react';\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface ISceneContext {\n  sceneConfig: Engine.SceneConfig;\n  setEntities: (props: Engine.EntityProps[]) => void;\n  selectedEntity: string | null;\n  setSelectedEntity: (entityID: string | null) => void;\n  setCameraProps: (cameraProps: Engine.CameraProps) => void;\n};\n\nconst initialValue = {\n  sceneConfig: {\n    entities: [] as Engine.EntityProps[],\n    camera: {\n      position: new THREE.Vector3(),\n      fov: 70,\n      near: 0.1,\n      far: 1000,\n      controls: \"orbit\" as Engine.ControlType\n    }\n  },\n  selectedEntity: null,\n  setEntities: (entities: Engine.EntityProps[]) => { },\n  setSelectedEntity: (entityID: string | null) => { },\n  setCameraProps: (cameraProps: Engine.CameraProps) => { }\n};\n\nexport const SceneContext = createContext<ISceneContext>(initialValue);\n\nexport const SceneProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [cameraProps, setCameraProps] = useState<Engine.CameraProps>({\n    position: new THREE.Vector3(),\n    fov: 70,\n    near: 0.1,\n    far: 1000,\n    controls: \"orbit\" as Engine.ControlType\n  });\n\n  const [entities, setEntities] = useState<Engine.EntityProps[]>([\n    {\n      id: uuidv4(),\n      name: \"Entity A\",\n      material: new THREE.MeshNormalMaterial(),\n      geometry: new THREE.BoxBufferGeometry(),\n      children: [],\n      components: {}\n    }\n  ])\n  const [selectedEntity, setSelectedEntity] = useState<string | null>(null);\n\n  const contextValue = {\n    sceneConfig: { entities, camera: cameraProps },\n    setEntities,\n    setCameraProps,\n    selectedEntity,\n    setSelectedEntity\n  }\n  return (\n    <SceneContext.Provider value={contextValue}>\n      {children}\n    </SceneContext.Provider>\n  );\n}","import { ReactElement, useState } from 'react';\nimport { createContext } from 'react';\n\ninterface IScriptContext {\n  scripts: Engine.Script[];\n  setScripts: (scripts: Engine.Script[]) => void;\n};\n\nconst initialValue: IScriptContext = {\n  scripts: [],\n  setScripts: (scripts: Engine.Script[]) => { }\n}\n\nexport const ScriptContext = createContext<IScriptContext>(initialValue);\n\nexport const ScriptProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [scripts, setScripts] = useState<Engine.Script[]>([]);\n  const contextValue = { scripts, setScripts };\n  \n  return (\n    <ScriptContext.Provider value={contextValue}>\n      {children}\n    </ScriptContext.Provider>\n  );\n};","import * as THREE from 'three';\nimport oc from 'three-orbit-controls';\nimport SceneManager from './SceneManager';\nconst OrbitControls = oc(THREE);\n\nexport default class CameraManager {\n  public static instance: CameraManager;\n  private renderer = new THREE.WebGLRenderer({ antialias: true });\n  private renderElement: HTMLElement | undefined;\n  private fov = 45;\n  private near = 0.01;\n  private far = 20000;\n  private camera!: THREE.PerspectiveCamera;\n  private controls: any;\n\n  constructor() {\n    if (CameraManager.instance) return CameraManager.instance;\n    CameraManager.instance = this;\n    this._setCamera();\n    window.addEventListener('resize', () => this.handleResize());\n  }\n\n  setup(renderElement: HTMLElement, scene: THREE.Scene) {\n    this.renderer.setSize(renderElement.clientWidth, renderElement.clientHeight);\n    this.renderElement = renderElement;\n    this.renderElement.appendChild(this.renderer.domElement);\n    this.handleResize();\n    this._setControls();\n    this._runSceneLoop(scene);\n  }\n\n  private _setCamera() {\n    if (!this.renderElement) {\n      this.camera = new THREE.PerspectiveCamera(this.fov, window.innerWidth / window.innerHeight, this.near, this.far);\n      return;\n    }\n  }\n\n  private _runSceneLoop(scene: THREE.Scene) {\n    this.renderer.setAnimationLoop(time => this.Update(scene));\n  }\n\n  private _setControls() {\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.controls.autoRotate = false;\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.39;\n    this.camera.position.z = 200;\n\n    this.controls.update();\n  }\n\n  handleResize() {\n    if (!this.renderElement) return;\n    this.camera.aspect = this.renderElement.clientWidth / this.renderElement.clientHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.renderElement.clientWidth, this.renderElement.clientHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n  }\n\n  Update(scene: THREE.Scene) {\n    this.controls.update();\n    this.renderer.render(scene, this.camera);\n    SceneManager.UpdateScene();\n  }\n}","import { v4 as uuidv4 } from 'uuid';\nimport * as THREE from 'three';\nimport SceneManager from './SceneManager';\n\nexport default class Entity {\n  public name: string = \"\";\n  public mesh: THREE.Mesh;\n  private _id = uuidv4();\n  private children: Entity[] = [];\n  private components: Record<Engine.ComponentType, Engine.Component>;\n\n  constructor(props: Engine.EntityProps) {\n    const mat = props.material ?? new THREE.MeshBasicMaterial();\n    const geometry = props.geometry ?? new THREE.BoxBufferGeometry();\n    this.mesh = new THREE.Mesh(geometry, mat);\n\n    props.children.forEach(entityProps => {\n      const child: Entity = SceneManager.CreateEntity(entityProps, this);\n      this.addChild(child);\n    });\n\n    // TODO: build components\n    this.components = {};\n  }\n\n  addChild(child: Entity) {\n    // TODO: Implement\n  }\n\n  addComponent(type: Engine.ComponentType, componentProps: Engine.ComponentProps) {\n    // TODO: Implement\n  }\n\n  getProps(): Record<Engine.ComponentType, Engine.ComponentProps> {\n    // TODO: Implement\n    return {};\n  }\n\n  Update() {\n    // TODO: Implement\n    console.debug('calling update on entity', this._id);\n  }\n}","import * as THREE from 'three';\nimport CameraManager from \"./CameraManager\";\nimport Entity from \"./Entity\";\n\nexport default class SceneManager {\n  // TODO: Figure out which values can be made private\n  public static instance: SceneManager;\n  static isRunning: boolean = false;\n  \n  static _scene = new THREE.Scene();\n  private static _entities: Entity[] = [];\n  static _components: Record<Engine.ComponentType, Engine.Component> = {};\n  static cameraManager: CameraManager = CameraManager.instance;\n\n  constructor() {\n    if (SceneManager.instance) return;\n    SceneManager.instance = this;\n  }\n\n  static CreateEntity(props: Engine.EntityProps, parent?: Entity): Entity {\n    const entity = new Entity(props);\n    if (parent) {\n      parent.addChild(entity);\n    }\n    SceneManager._entities.push(entity);\n    this._scene.add(entity.mesh);\n    return entity;\n  }\n\n  static Initialize(renderElement: HTMLElement) {\n    if (!this.cameraManager) {\n      this.cameraManager = new CameraManager();\n    }\n    this.cameraManager.setup(renderElement, this._scene);\n  }\n\n  static UpdateScene() {\n    SceneManager._entities.forEach(entity => {\n      entity.Update();\n    });\n  }\n\n  static CreateComponent(type: Engine.ComponentType, componentProps: Engine.ComponentProps) {\n    // TODO: Implement this\n  }\n\n  static Run(scenePayload: Engine.ScenePayload, renderElement: HTMLElement) {\n    // TODO: Implement this thoroughly\n    console.debug('called SceneManager.Run()', scenePayload, renderElement);\n    scenePayload.sceneConfig.entities.forEach(entityProps => {\n      SceneManager.CreateEntity(entityProps);\n    });\n  }\n\n  static Stop() {\n    // TODO: Implement this\n  }\n}","import { useContext, useRef } from \"react\";\nimport { SceneContext } from \"./SceneContext\";\nimport { v4 as uuidv4 } from 'uuid'\n\nconst useScene = () => {\n  const { sceneConfig, setEntities, selectedEntity, setSelectedEntity } = useContext(SceneContext);\n\n  const selectEntity = (id: Engine.EntityID) => {\n    setSelectedEntity(id);\n  };\n\n  const updateEntity = (entity: Engine.EntityProps) => {\n    // TODO: Implement this\n  }\n\n  const updateEntityParent = (child: Engine.EntityID, newParent: Engine.EntityID | null) => {\n    // TODO: Implement this\n  }\n\n  const createEntity = () => {\n    const newEntity: Engine.EntityProps = {\n      id: uuidv4(),\n      name: \"New Entity\",\n      children: [],\n      components: {},\n    }\n    setEntities([...sceneConfig.entities, newEntity]);\n  }\n\n  return {\n    sceneConfig,\n    selectedEntity, \n    createEntity, \n    selectEntity,\n    updateEntity,\n    updateEntityParent,\n  };\n}\n\nexport default useScene;","import { useContext } from \"react\";\nimport { ScriptContext } from \"./ScriptContext\";\n\nconst useScripts = () => {\n  const { scripts, setScripts } = useContext(ScriptContext);\n\n  const loadScript = (name: string) => {\n    // TODO: implement this\n  };\n  const saveScript = (script: Engine.Script) => {\n    // TODO: implement this\n  };\n  const createScript = (name: string) => {\n    // TODO: implement this\n  };\n\n  return {\n    scripts,\n    setScripts,\n    loadScript,\n    saveScript,\n    createScript\n  };\n}\n\nexport default useScripts;","import { useContext, useEffect } from \"react\";\nimport SceneManager from \"../../engine/core/SceneManager\";\nimport useScene from \"../scene/useScene\";\nimport useScripts from \"../scripts/useScripts\";\nimport { EditorContext } from \"./EditorContext\";\n\nconst useEditor = () => {\n  const { scripts } = useScripts();\n  const { sceneConfig } = useScene();\n  const { renderElement } = useContext(EditorContext);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => init(), [renderElement]);\n\n  const init = () => {\n    if (!renderElement || !renderElement.current) { return; }\n    console.debug('ran init!');\n    SceneManager.Initialize(renderElement.current);\n    // Engine.Initialize(localConfig, renderElement);\n  }\n\n  const generateScenePayload = (): Engine.ScenePayload => {\n    return { sceneConfig, scripts }\n  }\n\n  const toggleRun = () => {\n    if (!renderElement || !renderElement.current) { return; }\n    if (SceneManager.isRunning) {\n      console.debug('stopping scene');\n      SceneManager.Stop();\n      return;\n    }\n    console.debug('Going to run scene...')\n    const payload: Engine.ScenePayload = generateScenePayload();\n    console.debug('Made payload:', payload)\n    SceneManager.Run(payload, renderElement.current);\n  };\n\n  // const isRunning = Engine.SceneManager.instance.isRunning;\n\n\n  return {\n    renderElement,\n    isRunning: SceneManager.isRunning,\n    toggleRun\n  };\n}\n\nexport default useEditor;","import {  useControls } from 'leva'\nimport { useCallback, useEffect, useMemo} from 'react';\nimport useScene from '../../state/scene/useScene';\n\nexport default function Controls() {\n  const { sceneConfig, selectedEntity } = useScene();\n\n  const entity = useMemo(() => {\n    const selected = sceneConfig.entities.flatMap(e => e.id === selectedEntity && e)\n    if (selected.length < 1) return null;\n    return selected[0] || null;\n  }, []);\n\n  // const [entity, setEntity] = useState<Entity>();\n  // const createEntity = () => {\n    // setEntity(new Agent());\n  // }\n\n  const getControls: any = useCallback(() => {\n    if (!entity) return {};\n    // const props = entity.GetProps();\n    // const propControls: any = {};\n    // for (const prop of props) {\n    //   if (typeof prop[1] === 'object') {\n    //     propControls[prop[0]] = folder(getComponentProps(prop[0], prop[1]) as any);\n    //     continue;\n    //   }\n    //   propControls[prop[0]] = prop[1];\n    // }\n    // return propControls;\n  }, [entity]);\n  \n\n  const controls = useControls(() => ({...getControls()}),  [entity]);\n  // useControls({ 'New Agent': button(createEntity) })\n  \n  const onInspectorValueChange = () => {\n    if (!entity) return;\n    const inspectorProps = Object.entries(controls[0]);\n    // const entityProps = entity.GetProps();\n    // for (const ep of entityProps) {\n    //   if (typeof ep[1] === 'object') {\n    //     const subProps = getComponentProps(ep[0], ep[1])\n    //     for (const sp of Object.entries(subProps)) {\n    //       const inspectorSubProp = inspectorProps.find(p => p[0] === sp[0]);\n    //       if (inspectorSubProp) {\n    //         // @ts-ignore\n    //         entity[ep[0]][sp[0]] = inspectorSubProp[1];\n    //       }\n    //     }\n    //     continue;\n    //   }\n    //   const inspectorBasicProp = inspectorProps.find(p => p[0] === ep[0]);\n    //   if (inspectorBasicProp) {\n    //     // @ts-ignore\n    //     entity[ep[0]] = inspectorBasicProp[1];\n    //   }\n    // }\n  }\n\n  useEffect(() => {\n    onInspectorValueChange();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [controls]);\n  return <></>;\n}\n","import React, { ReactElement } from 'react';\nimport useScene from '../../state/scene/useScene';\n\ninterface Props {\n  entity: Engine.EntityProps;\n}\n\nfunction TreeNode({ entity }: Props): ReactElement {\n  const { selectedEntity, selectEntity } = useScene();\n  const isSelected = selectedEntity === entity.id;\n  return (\n    <div className={`\n    p-1\n    rounded-md\n    transition\n    cursor-pointer\n    hover:bg-red-400\n    ${isSelected && 'bg-red-300'}`} onClick={() => isSelected ? selectEntity('') : selectEntity(entity.id)}>\n      {entity?.name ?? '__ENTITY__'}\n    </div>\n  )\n\n}\n\nexport default function TreeViewPanel(): ReactElement {\n  const { sceneConfig } = useScene();\n\n  return (\n    <div className=\"bg-red-500 p-1.5 space-y-1\">\n      {\n        sceneConfig.entities.map(entity =>\n          <TreeNode\n            key={entity.id}\n            entity={entity}\n          />\n        )\n\n      }\n    </div>\n  )\n}\n","import { ReactElement } from 'react'\nimport useEditor from '../../state/editor/useEditor'\nimport useScene from '../../state/scene/useScene'\nimport Controls from '../components/Controls'\nimport TreeViewPanel from '../components/TreeViewPanel'\n\nexport default function BrowserEngine(): ReactElement {\n  const { createEntity, selectedEntity } = useScene()\n  const { renderElement,  toggleRun } = useEditor()\n\n  return (\n    <main className=\"w-screen h-screen overflow-hidden\">\n      <nav className=\"bg-gray-900 p-2 space-x-2\">\n        <button onClick={toggleRun} className=\"p-2 bg-gray-700 rounded-md px-3 transition hover:bg-gray-600\">Run Scene</button>\n        <button onClick={createEntity} className=\"p-2 bg-gray-700 rounded-md px-3 transition hover:bg-gray-600\">Add Entity</button>\n      </nav>\n      <section className=\"w-full h-full grid\" style={{ gridTemplateColumns: '1fr 14rem' }}>\n        {renderElement && (<div className=\"bg-gray-600\" id=\"scene\" ref={renderElement} />)}\n       <TreeViewPanel />\n      </section>\n      {selectedEntity && <Controls />}\n    </main>\n  )\n}\n","import { EditorProvider } from \"./state/editor/EditorContext\";\nimport { SceneProvider } from \"./state/scene/SceneContext\";\nimport { ScriptProvider } from \"./state/scripts/ScriptContext\";\nimport BrowserEngine from \"./ui/base/BrowserEngine\";\n\nfunction App() {\n  return (\n    <SceneProvider>\n      <ScriptProvider>\n        <EditorProvider>\n          <BrowserEngine />\n        </EditorProvider>\n      </ScriptProvider>\n    </SceneProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}