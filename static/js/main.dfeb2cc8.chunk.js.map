{"version":3,"sources":["engine/core/Entity.ts","engine/core/SceneManager.ts","utils/index.ts","engine/core/Component.ts","engine/core/Transform.ts","engine/core/ComponentManager.ts","utils/script.utils.ts","engine/core/MaterialManager.ts","engine/core/GeometryManager.ts","state/scripts/ScriptContext.tsx","utils/entity.utils.ts","state/editor/EditorContext.tsx","engine/core/CameraManager.ts","engine/core/EngineContext.ts","state/scene/SceneContext.tsx","state/scene/useScene.tsx","state/scripts/useScripts.tsx","state/editor/useEditor.tsx","ui/components/inspector/ComponentFieldValue.tsx","ui/components/inspector/ComponentNode.tsx","ui/components/inspector/InspectorPanel.tsx","ui/components/nav/Nav.tsx","ui/components/editor/EditorPanel.tsx","ui/components/scene/ScenePanel.tsx","ui/components/hierarchy/HierarchyNode.tsx","ui/components/hierarchy/HierarchyPanel.tsx","ui/components/project/ProjectPanel.tsx","ui/base/BrowserEngine.tsx","App.tsx","index.tsx"],"names":["Entity","props","name","mesh","id","components","this","init","initMesh","initComponents","mat","MaterialManager","instance","getMaterial","material","geometry","GeometryManager","getGeometry","THREE","uuid","Object","entries","forEach","type","ComponentManager","setComponent","child","SceneManager","isPlaying","_startComponents","_updateComponents","componentName","values","component","start","update","_scene","_entities","_scenePayload","_selectedEntityID","_axes","_gridHelper","_selectionHelper","add","payload","sceneConfig","entities","find","e","entityID","entityProps","updateIndex","findIndex","setFromObject","entity","_resetScene","remove","_buildEntities","_startEntities","error","console","select","undefined","object","push","destroy","input","JSON","parse","stringify","buildEntity","Component","Transform","position","rotation","scale","applyMatrix","setX","x","setY","y","setZ","z","setRotationFromEuler","applyPosition","applyRotation","applyScale","registerComponent","constructor","componentProps","componentType","getComponent","prop","Array","isArray","length","componentInstance","COMPONENT_DEF","baseScriptContent","generateNewScript","uuidv4","language","content","initPropPlaceholder","formatScriptString","script","replace","injectInitSection","scriptBody","actualInitSection","map","key","value","join","wireframe","initialValue","scripts","selectedScript","setScriptBody","setScripts","setSelectedScript","compileScripts","ScriptContext","createContext","ScriptProvider","children","useState","three","Instantiate","bind","CreateEntity","generateNewEntity","scriptCopy","removePrefix","substring","indexOf","pureProps","replaceAll","eval","formattedScript","NewComponent","setPrototypeOf","err","useEffect","contextValue","Provider","EditorContext","EditorProvider","renderElement","useRef","CameraManager","renderer","antialias","raycaster","fov","near","far","camera","controls","_setCamera","window","addEventListener","handleResize","scene","setSize","clientWidth","clientHeight","appendChild","domElement","_setControls","_setRaycaster","_runSceneLoop","setAnimationLoop","mouseX","mouseY","pointer","setFromCamera","intersects","intersectObjects","getScene","filter","innerWidth","innerHeight","time","dimensions","getBoundingClientRect","aspect","width","height","updateProjectionMatrix","setPixelRatio","devicePixelRatio","render","updateScene","context","sceneManager","cameraManager","componentManager","materialManager","geometryManager","_renderElement","isInitialized","updateScenePayload","runEditMode","runPlayScene","setup","runEditScene","setScenePayload","updateEntityPayload","handleClick","selectByID","getSelectedEntity","getSelectedEntityPayload","selectedEntityID","setEntities","setSelectedEntityID","setCameraProps","cameraProps","SceneContext","SceneProvider","useMemo","updateSpecificEntity","useScene","useContext","selectedEntity","createEntity","newEntity","addNewEntity","selectEntity","updateEntity","index","updateEntityParent","newParent","useScripts","loadScript","scriptName","foundScript","saveScript","s","createScript","newScript","useEditor","isRunning","setIsRunning","scenePayload","current","toggleRun","runPlayMode","handleClickScene","domRect","target","clientX","clientY","ComponentFieldValue","field","updateField","className","onChange","Number","ComponentNode","updateComponent","onClick","fieldName","fieldValue","style","minWidth","InspectorPanel","setControls","materialType","setMaterialType","geometryType","setGeometryType","propFields","updateComponentFields","newControls","componentOptions","getComponents","currentComponents","keys","c","includes","label","getComponentOptions","log","getComponentProps","addComponent","newMaterial","defaultValue","option","newGeometry","Nav","EditorPanel","defaultLanguage","theme","newValue","ScenePanel","ref","HierarchyNode","isSelected","stopPropagation","HierarchyPanel","ProjectPanel","BrowserEngine","gridTemplateColumns","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfeb2cc8.chunk.js","sourcesContent":["import * as THREE from 'three';\nimport Component from './Component';\nimport ComponentManager from './ComponentManager';\nimport MaterialManager from './MaterialManager';\nimport GeometryManager from './GeometryManager';\nimport SceneManager from './SceneManager';\n\nexport default class Entity {\n  public name: string = \"\";\n  public mesh!: THREE.Mesh;\n  public readonly id: Engine.EntityID;\n  public components: Record<Engine.ComponentType, Component> = {};\n\n  constructor(props: Engine.EntityProps) {\n    this.id = props.id;\n    this.name = props.name;\n    this.init(props);\n  }\n\n  init(props: Engine.EntityProps) {\n    this.initMesh(props);\n    this.initComponents(props.components);\n  }\n\n  initMesh(props: Engine.EntityProps) {\n    const mat = MaterialManager.instance.getMaterial(props.material);\n    const geometry = GeometryManager.instance.getGeometry(props.geometry);\n    if (!this.mesh) {\n      this.mesh = new THREE.Mesh(geometry, mat);\n    }\n    else {\n      this.mesh.geometry = geometry;\n      this.mesh.material = mat;\n    }\n    this.mesh.uuid = this.id;\n    this.mesh.name = this.name;\n  }\n\n  initComponents(components: Record<Engine.ComponentType, Engine.ComponentProps>) {\n    this.components = {};\n    Object.entries(components).forEach(([type, props]) => {\n      ComponentManager.instance.setComponent(this, type, props);\n    })\n  }\n\n  // TODO: Implement\n  addChild(child: Entity) { }\n\n  // TODO: Implement\n  destroy() { }\n\n  start() {\n    if (SceneManager.isPlaying()) {\n      this._startComponents();\n    }\n  }\n\n  update() {\n    if (SceneManager.isPlaying()) {\n      this._updateComponents();\n    }\n  }\n\n  getComponent(componentName: string): Component | undefined {\n    return this.components[componentName];\n  }\n\n  private _startComponents() {\n    Object.values(this.components).forEach((component) => component.start())\n  }\n\n  private _updateComponents() {\n    Object.values(this.components).forEach((component) => component.update())\n  }\n}","import * as THREE from 'three';\nimport { deepClone } from '../../utils';\nimport Entity from \"./Entity\";\n\nexport default class SceneManager {\n  public static instance: SceneManager;\n  private isPlaying: boolean = false; // If true, in play mode, else in edit mode\n  private _scene!: THREE.Scene;\n  private _entities: Entity[] = [];\n  private _scenePayload: Engine.ScenePayload | undefined;\n\n  // Selection\n  private _selectedEntityID: Engine.EntityID | undefined;\n  \n  // Helpers\n  private _axes = new THREE.AxesHelper(2);\n  private _gridHelper = new THREE.GridHelper(60, 6);\n  private _selectionHelper: THREE.BoxHelper | undefined;\n\n  constructor() {\n    if (SceneManager.instance) { return; }\n    SceneManager.instance = this;\n    this._scene = new THREE.Scene();\n    this._scene?.add(this._axes);\n    this._scene?.add(this._gridHelper);\n    this._scene?.add(new THREE.DirectionalLight(0xffffff, 0.6));\n    this._scene?.add(new THREE.AmbientLight(0x555555));\n  }\n\n  static isPlaying() {\n    return SceneManager.instance.isPlaying;\n  }\n\n  getScene(): THREE.Scene {\n    return this._scene;\n  }\n\n  setScenePayload(payload: Engine.ScenePayload) {\n    this._scenePayload = payload;\n  }\n\n  getSelectedEntityPayload(): Engine.EntityProps | undefined {\n    return this._scenePayload?.sceneConfig.entities.find(e => e.id === this._selectedEntityID);\n  }\n\n  updateEntityPayload(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    const updateIndex = this._entities.findIndex(e => e.id === entityID);\n    if (updateIndex === -1) return;\n    this._entities[updateIndex].init(entityProps);\n    this._selectionHelper?.setFromObject(this._entities[updateIndex].mesh);\n  }\n\n  updateScene() {\n    this._entities.forEach(entity => {\n      entity.update();\n    });\n  }\n\n  /** Runs scene in play mode.\n   * \n   *  In play mode, the components in all \n   *  entities are updated each frame.\n   */\n  runPlayScene() {\n    this.isPlaying = true;\n    this._resetScene();\n    this._scene.remove(this._axes);\n    this._scene.remove(this._gridHelper);\n    if (this._selectionHelper) this._scene.remove(this._selectionHelper);\n    try {\n      this._buildEntities();\n      this._startEntities();\n    } catch (error) {\n      console.error('Error whilst setting up play scene');\n    }\n  }\n\n  /** Runs scene in edit mode\n   * \n   *  In edit mode, the scene is reset and all\n   *  entities are reverted to their initial states, \n   *  based on the scenePayload.\n   */\n  runEditScene() {\n    this.isPlaying = false;\n    this._resetScene();\n    this._scene.add(this._axes);\n    this._scene.add(this._gridHelper);\n    if (this._selectionHelper) this._scene.add(this._selectionHelper);\n    this._buildEntities();\n  }\n\n  /** Select an entity by ID */\n  selectByID(entityID: Engine.EntityID) {\n    this.select(this._entities.find(e => e.id === entityID)?.mesh ?? undefined);\n  }\n\n  /** Sets Entity with corresponding object as selected,\n   *  if no object is passed, deselects any selected entity\n   * @param object THREE.Object3D\n   */\n  select(object?: THREE.Object3D) {\n    if (this.isPlaying) return;\n    if (!object && this._selectionHelper && this._selectedEntityID) {\n      this._scene.remove(this._selectionHelper);\n      this._selectedEntityID = undefined;\n      return;\n    }\n    \n    if (object) {\n      this._selectedEntityID = object.uuid;\n      if (!this._selectionHelper) {\n        this._selectionHelper = new THREE.BoxHelper(object, 0xffff00);\n        this._scene.add(this._selectionHelper);\n        return;\n      }\n      \n      this._selectionHelper?.setFromObject(object);\n      this._scene.add(this._selectionHelper);\n    }\n  }\n\n  getSelectedEntity(): Engine.EntityID | undefined {\n    return this._selectedEntityID;\n  }\n\n  buildEntity(props: Engine.EntityProps): Entity {\n    const entity = new Entity(props);\n    this._entities.push(entity);\n    this._scene.add(entity.mesh);\n    return entity;\n  }\n\n  private _startEntities() {\n    this._entities.forEach(entity => {\n      entity.start();\n    });\n  }\n\n  private _resetScene() {\n    this._entities.forEach(entity => {\n      this._scene.remove(entity.mesh);\n      entity.destroy();\n    });\n    this._entities = [];\n  }\n\n  private _buildEntities() {\n    if (!this._scenePayload) return;\n    // This prevents all of the strange object mutation\n    const localPayloadCopy = deepClone<Engine.ScenePayload>(this._scenePayload);\n    localPayloadCopy.sceneConfig.entities.forEach(entityProps => {\n      this.buildEntity(entityProps);\n    });\n  }\n}","export const deepClone = <T>(input: T): T => {\n  return JSON.parse(JSON.stringify(input)) as T\n}","import Entity from \"./Entity\";\n\nexport default abstract class Component {\n  entity: Entity;\n\n  constructor(entity: Entity) {\n    this.entity = entity;\n  }\n\n  abstract init(props: Engine.ComponentProps): void;\n\n  abstract start(): void;\n\n  abstract update(): void;\n}\n\n// This is only used for generating the BaseComponentType for internal use, \n// when creating Components, extend the abstract Component class instead.\nclass BaseComponent extends Component {\n  entity!: Entity;\n\n  init(props: Engine.ComponentProps) { }\n\n  start() { }\n\n  update() { }\n}\n\nexport type BaseComponentType = typeof BaseComponent;","import * as THREE from 'three';\nimport Component from './Component';\nimport Entity from './Entity';\ninterface ITransformProps {\n  position?: THREE.Vector3;\n  rotation?: THREE.Euler;\n  scale?: THREE.Vector3;\n}\n\nexport default class Transform extends Component {\n  entity: Entity;\n\n  // <@public>\n  public position: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n  public rotation: THREE.Euler = new THREE.Euler(0, 0, 0, 'XYZ');\n  public scale: THREE.Vector3 = new THREE.Vector3(1, 1, 1);\n  // </@public>\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.entity = entity;\n  }\n\n  init(props?: ITransformProps) {\n    this.position = props?.position ?? this.position;\n    this.rotation = props?.rotation ?? this.rotation;\n    this.scale = props?.scale ?? this.scale;\n    this.applyMatrix();\n  }\n\n  start() {\n    this.applyMatrix();\n  }\n\n  private applyPosition() {\n    this.entity.mesh.position.setX(this.position.x);\n    this.entity.mesh.position.setY(this.position.y);\n    this.entity.mesh.position.setZ(this.position.z);\n  }\n\n  private applyRotation() {\n    this.entity.mesh.setRotationFromEuler(new THREE.Euler(this.rotation.x, this.rotation.y, this.rotation.z));\n  }\n\n  private applyScale() {\n    this.entity.mesh.scale.setX(this.scale.x);\n    this.entity.mesh.scale.setY(this.scale.y);\n    this.entity.mesh.scale.setZ(this.scale.z);\n  }\n\n  private applyMatrix() {\n    if (!this.entity) { return; }\n    this.applyPosition();\n    this.applyRotation();\n    this.applyScale();\n  }\n\n  update() {\n    this.applyMatrix();\n  }\n}\n","import * as THREE from 'three';\nimport Transform from \"./Transform\";\nimport { BaseComponentType } from \"./Component\";\nimport Entity from \"./Entity\";\nexport default class ComponentManager {\n  public static instance: ComponentManager;\n  private components: { [key: string]: { constructor: BaseComponentType, props: Engine.ComponentProps } } = {};\n\n  constructor() {\n    if (ComponentManager.instance) return;\n    ComponentManager.instance = this;\n\n    this.registerComponent(\"Transform\", Transform, {\n      position: { x: 0, y: 0, z: 0 },\n      rotation: { x: 0, y: 0, z: 0 },\n      scale: { x: 1, y: 1, z: 1 },\n    });\n  }\n\n  public getComponents() {\n    return { ...this.components };\n  };\n\n  public registerComponent(componentName: string, component: BaseComponentType, props: Engine.ComponentProps): void {\n    this.components[componentName] = { constructor: component, props };\n  };\n\n  public getComponentProps(name: Engine.ComponentType): Engine.ComponentProps | null {\n    const componentProps = this.components[name].props ?? null;\n    if (!componentProps) {\n      return null;\n    }\n    return componentProps;\n  }\n\n  private getComponent(name: Engine.ComponentType): BaseComponentType | null {\n    return this.components[name].constructor ?? null;\n  }\n\n  public setComponent(entity: Entity, componentType: Engine.ComponentType, componentProps: Engine.ComponentProps): void {\n    \n    const component = this.getComponent(componentType);\n    if (!component) {\n      console.error(`Component ${componentType} not found`);\n      return;\n    }\n\n    // Translate vector props \n    Object.entries(componentProps).forEach(([name, prop]) => {\n      if (Array.isArray(prop)) {\n        if (prop.length === 3) {\n          componentProps[name] = new THREE.Vector3(prop[0], prop[1], prop[2]) as any;\n        }\n        else if (prop.length === 2) {\n          componentProps[name] = new THREE.Vector2(prop[0], prop[1]) as any;\n        }\n      }\n    });\n    const componentInstance = new component(entity);\n    try {\n      componentInstance.init(componentProps);\n      entity.components[componentType] = componentInstance;\n    } catch (e) {\n      console.error('Error whilst initializing component', e);\n    }\n  }\n}","import { v4 as uuidv4 } from 'uuid';\n\nconst COMPONENT_DEF = `// @defineComponent`;\nconst baseScriptContent = `class Component {\n  \n  // <public>\n\n  // </public>\n\n  ${COMPONENT_DEF}\n\n  start() {\n    \n  }\n\n  update() {\n\n  }\n}`\n\nexport const generateNewScript = (name: string): Engine.Script => {\n  const id = uuidv4();\n  return {\n    id,\n    name,\n    language: 'js',\n    content: baseScriptContent,\n    type: 'component'\n  }\n};\n\nconst initPropPlaceholder = '// <initPropPlaceholder />';\n\nexport const formatScriptString = (script: Engine.Script): string => {\n  const formatted = `(${script.content})`;\n  return formatted.replace(COMPONENT_DEF, `\n          entity;\n        \n          constructor(entity) {\n            this.entity = entity;\n          }\n\n          ${initPropPlaceholder}\n        `);\n};\n\nexport const injectInitSection = (scriptBody: string, props: Record<string, Engine.ComponentPropType>): string => {\n  const actualInitSection = `\n  init(props) {\n    this.transform = this.entity.getComponent('Transform');\n    ${Object.entries(props).map(([key, value]) => `this.${key} = props?.${key} ?? ${value};`).join('\\n')}\n  }`;\n  return scriptBody.replace(initPropPlaceholder, actualInitSection);\n}","import * as THREE from 'three';\n\nexport default class MaterialManager {\n  public static instance: MaterialManager;\n\n  constructor() {\n    if (MaterialManager.instance) return;\n    MaterialManager.instance = this;\n  }\n\n  getMaterial(type: Engine.MaterialType): THREE.Material {\n    switch (type) {\n      case 'normal':\n        return new THREE.MeshNormalMaterial();\n      case 'basic':\n        return new THREE.MeshBasicMaterial();\n      case 'phong':\n        return new THREE.MeshPhongMaterial();\n      case 'lambert':\n        return new THREE.MeshLambertMaterial();\n      case 'wireframe':\n        return new THREE.MeshBasicMaterial({ wireframe: true });\n      default:\n        return new THREE.MeshBasicMaterial();\n    }\n  }\n}\n","import * as THREE from 'three';\n\nexport default class GeometryManager {\n  public static instance: GeometryManager;\n\n  constructor() {\n    if (GeometryManager.instance) return;\n    GeometryManager.instance = this;\n  }\n\n  getGeometry(type: Engine.MaterialType): THREE.BufferGeometry {\n    switch (type) {\n      case 'box':\n        return new THREE.BoxBufferGeometry();\n      case 'sphere':\n        return new THREE.SphereBufferGeometry(1, 16, 8);\n      case 'cylinder':\n        return new THREE.CylinderBufferGeometry(1, 1, 1, 16, 1);\n      case 'torus':\n        return new THREE.TorusBufferGeometry(6, 1.1, 10, 32, 6.3);\n      case 'plane':\n        return new THREE.PlaneBufferGeometry(1, 1);\n      case 'tetrahedron':\n        return new THREE.TetrahedronBufferGeometry();\n      case 'octahedron':\n        return new THREE.OctahedronBufferGeometry();\n      case 'dodecahedron':\n        return new THREE.DodecahedronBufferGeometry();\n      case 'icosahedron':\n        return new THREE.IcosahedronBufferGeometry();\n      default:\n        return new THREE.SphereBufferGeometry();\n    }\n  }\n}","import * as three from \"three\"\nimport { Component, ReactElement, useEffect, useState } from \"react\"\nimport { createContext } from \"react\"\nimport ComponentManager from \"../../engine/core/ComponentManager\"\nimport { formatScriptString, injectInitSection } from \"../../utils/script.utils\"\nimport SceneManager from \"../../engine/core/SceneManager\"\nimport { generateNewEntity } from \"../../utils/entity.utils\"\n\ninterface IScriptContext {\n  scripts: Record<string, Engine.Script>\n  selectedScript: Engine.Script | undefined\n  scriptBody: string\n  setScriptBody: (scriptBody: string) => void\n  setScripts: (scripts: Record<string, Engine.Script>) => void\n  setSelectedScript: (script: Engine.Script | undefined) => void\n  compileScripts: () => void\n}\n\nconst initialValue: IScriptContext = {\n  scripts: {},\n  selectedScript: undefined,\n  scriptBody: \"\",\n  setScriptBody: (scriptBody: string) => {},\n  setScripts: (scripts: Record<string, Engine.Script>) => {},\n  setSelectedScript: (script: Engine.Script | undefined) => {},\n  compileScripts: () => {},\n}\n\nexport const ScriptContext = createContext<IScriptContext>(initialValue)\n\nexport const ScriptProvider = ({\n  children,\n}: {\n  children: ReactElement | ReactElement[]\n}) => {\n  const [scripts, setScripts] = useState<Record<string, Engine.Script>>({})\n  const [selectedScript, setSelectedScript] = useState<Engine.Script | undefined>()\n  const [scriptBody, setScriptBody] = useState(selectedScript?.content ?? \"\")\n\n  const compileScripts = () => {\n    const THREE = three\n    const Instantiate = SceneManager.instance.buildEntity.bind(SceneManager.instance)\n    const CreateEntity = generateNewEntity\n\n    Object.values(scripts).forEach((script) => {\n      try {\n        const scriptCopy = `${script.content}`\n        const removePrefix = scriptCopy.substring(\n          scriptCopy.indexOf(\"// <public>\") + 11\n        )\n        let pureProps = removePrefix.substring(\n          0,\n          removePrefix.indexOf(\"// </public>\")\n        )\n        pureProps = pureProps.replaceAll(\";\", \",\")\n        pureProps = pureProps.replaceAll(\"=\", \":\")\n        let props: Record<string, Engine.ComponentType> = {}\n        if (`${pureProps}`.replace(/\\s/g, \"\").length) {\n          pureProps = `{${pureProps}}`\n          props = eval(`(${pureProps})`) // ! <-- dangerous usage of eval pt. 2 ;)\n        }\n        let formattedScript = formatScriptString(script)\n        formattedScript = injectInitSection(formattedScript, props)\n        const NewComponent: any = eval(`(${formattedScript})`) // ! <-- dangerous usage of eval ;)\n        Object.setPrototypeOf(NewComponent, Component) // ! <-- lol\n        ComponentManager.instance.registerComponent(script.name, NewComponent, props)\n      } catch (err) {\n        console.error(err)\n      }\n    })\n  }\n\n  useEffect(() => {\n    compileScripts()\n  }, [scripts])\n\n  const contextValue = {\n    scripts,\n    setScripts,\n    scriptBody,\n    setScriptBody,\n    selectedScript,\n    setSelectedScript,\n    compileScripts,\n  }\n\n  return (\n    <ScriptContext.Provider value={contextValue}>{children}</ScriptContext.Provider>\n  )\n}\n","import { v4 as uuidv4 } from 'uuid';\nexport const generateNewEntity = (): Engine.EntityProps => {\n  const id = uuidv4();\n  return {\n    id,\n    name: \"New Entity\",\n    geometry: 'box',\n    material: 'normal',\n    children: [],\n    components: {\n      Transform: {\n        position: { x: 0, y: 0, z: 0 },\n        rotation: { x: 0, y: 0, z: 0 },\n        scale: { x: 1, y: 1, z: 1 },\n      }\n    },\n  };\n}","import { ReactElement, useEffect, useRef } from 'react';\nimport { createContext } from 'react';\n\ninterface IEditorContext {\n  renderElement?: React.MutableRefObject<HTMLDivElement | null>;\n};\n\nconst initialValue: IEditorContext = {}\n\nexport const EditorContext = createContext<IEditorContext>(initialValue);\n\nexport const EditorProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const renderElement = useRef<HTMLDivElement>(null)\n  const contextValue = { renderElement };\n\n\n  return (\n    <EditorContext.Provider value={contextValue}>\n      {children}\n    </EditorContext.Provider>\n  );\n};","import * as THREE from 'three';\nimport SceneManager from './SceneManager';\n\nexport default class CameraManager {\n  public static instance: CameraManager;\n  private renderer = new THREE.WebGLRenderer({ antialias: true });\n  private renderElement: HTMLElement | undefined;\n  private raycaster: THREE.Raycaster = new THREE.Raycaster();\n  private fov = 60;\n  private near = 0.01;\n  private far = 20000;\n  private camera!: THREE.PerspectiveCamera;\n  private controls: any;\n\n\n  constructor() {\n    if (CameraManager.instance) return CameraManager.instance;\n    CameraManager.instance = this;\n    this._setCamera();\n    window.addEventListener('resize', () => this.handleResize());\n  }\n\n  setup(renderElement: HTMLElement, scene: THREE.Scene) {\n    this.renderer.setSize(renderElement.clientWidth, renderElement.clientHeight);\n    this.renderElement = renderElement;\n    this.renderElement.appendChild(this.renderer.domElement);\n    this.handleResize();\n    this._setControls();\n    this._setRaycaster();\n    this._runSceneLoop(scene);\n  }\n\n  resetCamera() {\n    this.renderer.setAnimationLoop(null);\n  }\n\n  handleClick(mouseX: number, mouseY: number) {\n    const pointer = new THREE.Vector2(mouseX, mouseY);\n    this.raycaster.setFromCamera(pointer, this.camera);\n    const intersects = this.raycaster.intersectObjects(SceneManager.instance.getScene().children, true).filter(e => e.object.type === 'Mesh');\n    \n    if (intersects.length > 0) {\n      SceneManager.instance.select(intersects[0].object);\n    }\n    else {\n      SceneManager.instance.select();\n    }\n  }\n\n  private _setCamera() {\n    if (!this.renderElement) {\n      this.camera = new THREE.PerspectiveCamera(this.fov, window.innerWidth / window.innerHeight, this.near, this.far);\n      this.camera.position.y = 10;\n      this.camera.rotation.x = -0.1;\n    }\n  }\n\n  private _runSceneLoop(scene: THREE.Scene) {\n    this.renderer.setAnimationLoop((time: number) => this.update(scene));\n  }\n\n  private _setRaycaster() {\n    this.raycaster = new THREE.Raycaster();\n  }\n\n  private _setControls() {\n    this.camera.position.z = 50;\n  }\n\n  handleResize() {\n    if (!this.renderElement) return;\n    const dimensions = this.renderElement.getBoundingClientRect();\n    this.camera.aspect = dimensions.width / dimensions.height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.renderElement.clientWidth, this.renderElement.clientHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n  }\n\n  update(scene: THREE.Scene) {\n    this.renderer.render(scene, this.camera);\n    SceneManager.instance.updateScene();\n  }\n}","import CameraManager from \"./CameraManager\";\nimport ComponentManager from \"./ComponentManager\";\nimport GeometryManager from \"./GeometryManager\";\nimport MaterialManager from \"./MaterialManager\";\nimport SceneManager from \"./SceneManager\";\n\nclass EngineContext {\n  sceneManager: SceneManager;\n  cameraManager: CameraManager;\n  componentManager: ComponentManager;\n  materialManager: MaterialManager;\n  geometryManager: GeometryManager;\n  private _renderElement!: HTMLElement;\n  private isInitialized = false;\n\n  constructor() {\n    this.sceneManager = new SceneManager();\n    this.cameraManager = new CameraManager();\n    this.componentManager = new ComponentManager();\n    this.materialManager = new MaterialManager();\n    this.geometryManager = new GeometryManager();\n  }\n\n  init(renderElement: HTMLElement, payload?: Engine.ScenePayload) {\n    if (this.isInitialized) return;\n    this._renderElement = renderElement;\n    if (payload) this.updateScenePayload(payload);\n    this.runEditMode();\n    this.isInitialized = true;\n  }\n\n  runPlayMode() {\n    this.sceneManager.runPlayScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  runEditMode() {\n    this.sceneManager.runEditScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  updateScenePayload(payload: Engine.ScenePayload) {\n    this.sceneManager.setScenePayload(payload);\n  }\n\n  updateSpecificEntity(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    this.sceneManager.updateEntityPayload(entityID, entityProps);\n  }\n\n  addNewEntity(entity: Engine.EntityProps) {\n    this.sceneManager.buildEntity(entity);\n\n  }\n\n  isPlaying(): boolean {\n    return SceneManager.isPlaying() ?? false\n  }\n\n  handleClick(mouseX: number, mouseY: number) {\n    this.cameraManager.handleClick(mouseX, mouseY);\n  }\n\n  selectEntity(entityID: Engine.EntityID) {\n    this.sceneManager.selectByID(entityID);\n  }\n\n  getSelectedEntity(): Engine.EntityID | undefined {\n    return this.sceneManager.getSelectedEntity();\n  }\n\n  getSelectedEntityProps(): Engine.EntityProps | undefined {\n    return this.sceneManager.getSelectedEntityPayload();\n  }\n}\n\nconst context = new EngineContext();\n\nexport default context;","import * as THREE from 'three';\nimport { ReactElement, useEffect, useMemo } from 'react';\nimport { createContext } from 'react';\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport context from '../../engine/core/EngineContext';\n\ninterface ISceneContext {\n  sceneConfig: Engine.SceneConfig;\n  setEntities: (props: Engine.EntityProps[]) => void;\n  selectedEntityID: string | null;\n  setSelectedEntityID: (entityID: string | null) => void;\n  setCameraProps: (cameraProps: Engine.CameraProps) => void;\n};\n\nconst initialValue = {\n  sceneConfig: {\n    entities: [] as Engine.EntityProps[],\n    camera: {\n      position: new THREE.Vector3(),\n      fov: 70,\n      near: 0.1,\n      far: 1000,\n      controls: \"orbit\" as Engine.ControlType\n    }\n  },\n  selectedEntityID: null,\n  setEntities: (entities: Engine.EntityProps[]) => { },\n  setSelectedEntityID: (entityID: string | null) => { },\n  setCameraProps: (cameraProps: Engine.CameraProps) => { }\n};\n\nexport const SceneContext = createContext<ISceneContext>(initialValue);\n\nexport const SceneProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [cameraProps, setCameraProps] = useState<Engine.CameraProps>({\n    position: new THREE.Vector3(),\n    fov: 70,\n    near: 0.1,\n    far: 1000,\n    controls: \"orbit\" as Engine.ControlType\n  });\n\n  const [entities, setEntities] = useState<Engine.EntityProps[]>([\n    {\n      id: uuidv4(),\n      name: \"Entity A\",\n      material: 'normal',\n      geometry: 'box',\n      children: [],\n      components: {\n        \"Transform\": {\n          position: {x: 0, y: 0, z: 0},\n          rotation: { x: 0, y: 0, z: 0 },\n          scale: {x: 1, y: 1, z: 1},\n        },\n      }\n    },\n  ])\n  const [selectedEntityID, setSelectedEntityID] = useState<string | null>(null);\n\n  const sceneConfig = useMemo(() => (\n    {\n      entities,\n      camera: cameraProps\n    }\n  ), [entities, cameraProps]);\n\n  useEffect(() => {\n    if (selectedEntityID) {\n      const entityProps = entities.find(e => e.id === selectedEntityID);\n      if (!entityProps) return;\n      context.updateSpecificEntity(selectedEntityID, entityProps);\n    }\n  }, [sceneConfig])\n\n  const contextValue = {\n    sceneConfig,\n    selectedEntityID,\n    setEntities,\n    setCameraProps,\n    setSelectedEntityID\n  }\n  return (\n    <SceneContext.Provider value={contextValue}>\n      {children}\n    </SceneContext.Provider>\n  );\n}","import { useContext, useMemo} from \"react\";\nimport { SceneContext } from \"./SceneContext\";\nimport context from \"../../engine/core/EngineContext\";\nimport { generateNewEntity } from \"../../utils/entity.utils\";\n\nconst useScene = () => {\n  const { sceneConfig, setEntities, selectedEntityID, setSelectedEntityID } = useContext(SceneContext);\n\n\n  const selectEntity = (id: Engine.EntityID) => {\n    if (id === selectedEntityID) {\n      context.selectEntity('')\n      setSelectedEntityID('')\n      return;\n    }\n    context.selectEntity(id);\n    setSelectedEntityID(id);\n  };\n\n  const selectedEntity: Engine.EntityProps | null = useMemo(() => {\n    return sceneConfig.entities.find(e => e.id === selectedEntityID) ?? null;\n  }, [sceneConfig, selectedEntityID]);\n\n\n  const updateEntity = (entity: Engine.EntityProps) => {\n    const index = sceneConfig.entities.findIndex(e => e.id === entity.id);\n    if (index === -1) {\n      console.error(`Couldn't find ${entity.id} in sceneConfig.entities`);\n    };\n    sceneConfig.entities[index] = entity;\n    setEntities([...sceneConfig.entities]);\n  }\n\n  const updateEntityParent = (child: Engine.EntityID, newParent: Engine.EntityID | null) => {\n    // TODO: Implement this\n  }\n\n  const createEntity = () => {\n    const newEntity: Engine.EntityProps = generateNewEntity();\n    setEntities([...sceneConfig.entities, newEntity]);\n    context.addNewEntity(newEntity);\n  }\n\n  return {\n    sceneConfig,\n    selectedEntity, \n    createEntity, \n    selectEntity,\n    updateEntity,\n    updateEntityParent,\n  };\n}\n\nexport default useScene;","import { useContext, useEffect, useState } from \"react\"\nimport { generateNewScript } from \"../../utils/script.utils\"\nimport { ScriptContext } from \"./ScriptContext\"\n\nconst useScripts = () => {\n  const {\n    scripts,\n    setScripts,\n    selectedScript,\n    setSelectedScript,\n    compileScripts,\n    scriptBody,\n    setScriptBody,\n  } = useContext(ScriptContext)\n\n  const loadScript = (scriptName: string) => {\n    const foundScript = scripts[scriptName]\n    setSelectedScript(foundScript)\n    setScriptBody(foundScript?.content ?? \"\")\n  }\n\n  const saveScript = (script: Engine.Script) => {\n    const foundScript = Object.values(scripts).find((s) => s.id === script.id)\n    if (!foundScript) return\n    foundScript.content = scriptBody;\n    compileScripts()\n  }\n\n  const createScript = (name: string) => {\n    const newScript = generateNewScript(name)\n    setScripts({ ...scripts, [newScript.name]: newScript })\n  }\n\n  return {\n    scripts: Object.values(scripts),\n    setScripts,\n    scriptBody,\n    setScriptBody,\n    selectedScript,\n    setSelectedScript,\n    loadScript,\n    saveScript,\n    createScript,\n  }\n}\n\nexport default useScripts\n","import { useContext, useEffect, useMemo, useState } from \"react\"\nimport context from \"../../engine/core/EngineContext\"\nimport SceneManager from \"../../engine/core/SceneManager\"\nimport useScene from \"../scene/useScene\"\nimport useScripts from \"../scripts/useScripts\"\nimport { EditorContext } from \"./EditorContext\"\n\nconst useEditor = () => {\n  const { scripts } = useScripts()\n  const { sceneConfig, selectEntity } = useScene()\n  const { renderElement } = useContext(EditorContext)\n  const [isRunning, setIsRunning] = useState(context.isPlaying())\n\n  const scenePayload = useMemo(\n    () => ({ sceneConfig, scripts }),\n    [sceneConfig, scripts]\n  )\n\n  useEffect(() => {\n    const init = () => {\n      if (!renderElement || !renderElement.current || !scenePayload) {\n        return\n      }\n      context.init(renderElement.current, scenePayload)\n    }\n    init()\n  }, [renderElement])\n\n  useEffect(() => {\n    context.updateScenePayload(scenePayload)\n  }, [scenePayload])\n\n  const toggleRun = () => {\n    if (!renderElement || !renderElement.current) {\n      return\n    }\n    if (SceneManager.isPlaying()) {\n      setIsRunning(false)\n      context.runEditMode()\n      return\n    }\n    context.runPlayMode()\n    setIsRunning(true)\n  }\n\n  const handleClickScene = (e: React.MouseEvent) => {\n    const canvas: HTMLCanvasElement = e.target as unknown as HTMLCanvasElement\n    const domRect: DOMRect = canvas.getBoundingClientRect()\n    const [mouseX, mouseY]: [number, number] = [\n      ((e.clientX - domRect.x) / domRect.width) * 2 - 1,\n      -((e.clientY - domRect.y) / domRect.height) * 2 + 1,\n    ]\n    context.handleClick(mouseX, mouseY)\n    selectEntity(context.getSelectedEntity() ?? \"\")\n  }\n\n  return {\n    renderElement,\n    isRunning,\n    toggleRun,\n    handleClickScene,\n  }\n}\n\nexport default useEditor\n","interface Props {\n  field: Engine.ComponentPropType\n  updateField: (field: Engine.ComponentPropType) => void\n}\n\nconst ComponentFieldValue = ({ field, updateField }: Props): React.ReactElement => {\n  const handleUpdateField = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (typeof field === \"number\") {\n      updateField(Number(e.target.value))\n      return\n    }\n\n    if (typeof field === \"string\") {\n      updateField(e.target.value)\n    }\n  }\n\n  if (typeof field === \"number\" || typeof field === \"string\")\n    return (\n      <div className=\"bg-gray-700 text-white px-1  w-max\">\n        <input\n          type={typeof field === \"string\" ? \"string\" : \"number\"}\n          value={typeof field === \"number\" ? field : field}\n          onChange={handleUpdateField}\n          className=\"bg-gray-700 w-16 font-mono text-xs\"\n        />\n      </div>\n    )\n\n  if (Array.isArray(field)) return <div>array field</div>\n\n  return (\n    <div className=\"bg-gray-700 text-white px-2 grid grid-cols-3 gap-1\">\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">x:</span>\n        <input\n          type={typeof field === \"string\" ? \"string\" : \"number\"}\n          value={field.x}\n          onChange={(e) =>\n            updateField({\n              x: Number(e.target.value),\n              y: field?.y ?? 0,\n              z: field?.z ?? 0,\n            })\n          }\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">y:</span>\n        <input\n          type={typeof field === \"string\" ? \"string\" : \"number\"}\n          value={field.y}\n          onChange={(e) =>\n            updateField({\n              x: field?.x ?? 0,\n              y: Number(e.target.value),\n              z: field?.z ?? 0,\n            })\n          }\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">z:</span>\n        <input\n          type={typeof field === \"string\" ? \"string\" : \"number\"}\n          value={field.z}\n          onChange={(e) =>\n            updateField({\n              x: field?.x ?? 0,\n              y: field?.y ?? 0,\n              z: Number(e.target.value),\n            })\n          }\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n    </div>\n  )\n}\n\nexport default ComponentFieldValue\n","import useScripts from \"../../../state/scripts/useScripts\"\nimport ComponentFieldValue from \"./ComponentFieldValue\"\n\ninterface Props {\n  componentType: Engine.ComponentType\n  componentProps: Engine.ComponentProps\n  updateComponent: (\n    type: Engine.ComponentType,\n    field: string,\n    value: Engine.ComponentPropType\n  ) => void\n}\n\nconst ComponentNode = ({\n  componentType,\n  componentProps,\n  updateComponent,\n}: Props): React.ReactElement => {\n  const { loadScript } = useScripts()\n  return (\n    <div className=\"bg-gray-800 text-white pb-4\">\n      <div className=\"flex w-full justify-between items-center mb-2\">\n        <h3>{componentType}</h3>\n        {componentType !== \"Transform\" && (\n          <small\n            className=\"text-xs font-light underline text-gray-400 cursor-pointer hover:text-gray-300\"\n            onClick={() => {\n              loadScript(componentType)\n            }}\n          >\n            Open in editor\n          </small>\n        )}\n      </div>\n      <div className=\"space-y-2\">\n        {Object.entries(componentProps).map(([fieldName, fieldValue]) => (\n          <div key={fieldName} className=\"flex space-x-2\">\n            <p\n              className=\"text-xs capitalize text-gray-200\"\n              style={{ minWidth: \"10ch\" }}\n            >\n              {fieldName}\n            </p>\n            <ComponentFieldValue\n              field={fieldValue}\n              updateField={(e) => updateComponent(componentType, fieldName, e)}\n            />\n          </div>\n        ))}\n      </div>\n      <hr className=\"mt-4\" />\n    </div>\n  )\n}\n\nexport default ComponentNode\n","import { useState } from \"react\"\nimport { useEffect } from \"react\"\nimport ComponentManager from \"../../../engine/core/ComponentManager\"\nimport useEditor from \"../../../state/editor/useEditor\"\nimport useScene from \"../../../state/scene/useScene\"\nimport ComponentNode from \"./ComponentNode\"\n\nexport default function InspectorPanel() {\n  const { isRunning } = useEditor()\n  const { selectedEntity, updateEntity, sceneConfig } = useScene()\n\n  const [controls, setControls] = useState<\n    Record<Engine.ComponentType, Engine.ComponentProps>\n  >({})\n  const [materialType, setMaterialType] = useState<Engine.MaterialType>(\"normal\")\n  const [geometryType, setGeometryType] = useState<Engine.GeometryType>(\"box\")\n\n  useEffect(() => {\n    if (!selectedEntity) return\n    setMaterialType(selectedEntity.material)\n    setGeometryType(selectedEntity.geometry)\n  }, [selectedEntity])\n\n  // * Handles populating all correct value fields when selecting entity */\n  useEffect(() => {\n    const updateComponentFields = (entity: Engine.EntityProps) => {\n      const propFields: Record<Engine.ComponentType, Engine.ComponentProps> = {}\n      Object.entries(entity.components).forEach(([type, props]) => {\n        propFields[type] = props\n      })\n      setControls({ ...propFields } as any)\n    }\n    if (selectedEntity) updateComponentFields(selectedEntity)\n  }, [selectedEntity, sceneConfig, isRunning])\n\n  const addComponent = (componentName: Engine.ComponentType) => {\n    if (!selectedEntity) return\n    const componentProps = ComponentManager.instance.getComponentProps(componentName)\n    if (!componentProps) return\n    selectedEntity.components[componentName] = componentProps\n    updateEntity(selectedEntity)\n  }\n\n  const updateComponent = (\n    type: Engine.ComponentType,\n    field: string,\n    value: Engine.ComponentPropType\n  ) => {\n    const newControls = { ...controls }\n    newControls[type][field] = value\n    setControls(newControls)\n    if (selectedEntity) {\n      selectedEntity.components = newControls\n      updateEntity({ ...selectedEntity })\n    }\n  }\n\n  const updateMaterial = (newMaterial: Engine.MaterialType) => {\n    setMaterialType(newMaterial)\n    if (selectedEntity) {\n      selectedEntity.material = newMaterial\n      updateEntity({ ...selectedEntity })\n    }\n  }\n\n  const updateGeometry = (newGeometry: Engine.GeometryType) => {\n    setGeometryType(newGeometry)\n    if (selectedEntity) {\n      selectedEntity.geometry = newGeometry\n      updateEntity({ ...selectedEntity })\n    }\n  }\n\n  const getComponentOptions = (): { label: string; value: string }[] => {\n    const components = ComponentManager.instance.getComponents()\n    if (!selectedEntity) return []\n    const currentComponents = Object.keys(selectedEntity?.components)\n    return Object.keys(components)\n      .filter((c) => !currentComponents.includes(c))\n      .map((component) => ({\n        label: component,\n        value: component,\n      }))\n  }\n\n  const componentOptions = getComponentOptions()\n\n  const materialOptions: { label: string; value: string }[] = [\n    {\n      label: \"Normal\",\n      value: \"normal\",\n    },\n    {\n      label: \"Basic\",\n      value: \"basic\",\n    },\n    {\n      label: \"Lambert\",\n      value: \"lambert\",\n    },\n    {\n      label: \"Phong\",\n      value: \"phong\",\n    },\n  ]\n\n  const geometryOptions: { label: string; value: string }[] = [\n    {\n      label: \"Box\",\n      value: \"box\",\n    },\n    {\n      label: \"Sphere\",\n      value: \"sphere\",\n    },\n    {\n      label: \"Torus\",\n      value: \"torus\",\n    },\n  ]\n\n  if (!selectedEntity)\n    return (\n      <div className=\"panel\">\n        <h4 className=\"panel-label\">Inspector</h4>\n      </div>\n    )\n\n  return (\n    <div className=\"panel\">\n      <h4 className=\"panel-label mb-1\">Inspector</h4>\n      {/* Components */}\n      <section className=\"space-y-2\">\n        {Object.entries(controls).map(([type, props]) => (\n          <ComponentNode\n            componentType={type}\n            componentProps={props}\n            key={type}\n            updateComponent={updateComponent}\n          />\n        ))}\n      </section>\n\n      {/* Add components */}\n      {componentOptions.length > 0 && (\n        <section>\n          <select onChange={(e) => console.log(e.target.value)}>\n            {componentOptions.map(({ label, value }) => (\n              <option key={value} value={value}>\n                {label}\n              </option>\n            ))}\n          </select>\n          <div className=\"grid place-items-center mt-2\">\n            <button onClick={() => addComponent(componentOptions[0].value)}>\n              Add Component\n            </button>\n          </div>\n        </section>\n      )}\n\n      {/* Mesh */}\n      <section>\n        <div className=\"bg-gray-800 text-white\">\n          <h3>Mesh</h3>\n          <div className=\"space-y-2\">\n            <div className=\"flex space-x-2 items-center\">\n              <p\n                className=\"text-xs font-mono text-gray-200\"\n                style={{ minWidth: \"10ch\" }}\n              >\n                Material\n              </p>\n              <select\n                onChange={(e) => updateMaterial(e.target.value)}\n                defaultValue={materialType}\n              >\n                {materialOptions.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"flex space-x-2 items-center\">\n              <p\n                className=\"text-xs font-mono text-gray-200\"\n                style={{ minWidth: \"10ch\" }}\n              >\n                Geometry\n              </p>\n              <select\n                onChange={(e) => updateGeometry(e.target.value)}\n                value={geometryType}\n              >\n                {geometryOptions.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  )\n}\n","import { ReactElement } from 'react'\nimport useEditor from '../../../state/editor/useEditor';\nimport useScene from '../../../state/scene/useScene'\nimport useScripts from '../../../state/scripts/useScripts';\n\nexport default function Nav(): ReactElement {\n  const { createEntity } = useScene();\n  const { toggleRun, isRunning } = useEditor();\n  const { createScript, selectedScript, loadScript, saveScript, scriptBody } = useScripts();\n\n  const handleCreateScript = () => {\n    createScript(\"Component\")\n  }\n\n  const handleSaveScript = () => {\n    if (selectedScript) {\n      saveScript({ ...selectedScript, content: scriptBody })\n    }\n  }\n\n  const handleCloseScript = () => {\n    loadScript(\"\")\n  }\n  return (\n    <div>\n      <header\n        className={`h-0.5 transition bg-red-600 ${isRunning && \"bg-green-500\"}`}\n      />\n      <nav className=\"bg-gray-900 p-2 flex w-full\">\n        <div className=\"space-x-2\">\n          <button onClick={toggleRun} className=\"primary\">\n            {isRunning ? \"Stop\" : \"Run\"} Scene\n          </button>\n          <button onClick={createEntity} className=\"secondary\">\n            Add Entity\n          </button>\n          <button onClick={handleCreateScript} className=\"secondary\">\n            Add Script\n          </button>\n        </div>\n        {selectedScript && (\n          <div className=\"space-x-2 ml-auto\">\n            <button className=\"secondary\" onClick={handleCloseScript}>\n              Close Editor\n            </button>\n            <button onClick={handleSaveScript} className=\"submit\">\n              Save script\n            </button>\n          </div>\n        )}\n      </nav>\n    </div>\n  )\n}\n","import Editor from '@monaco-editor/react';\nimport { ReactElement, useEffect } from 'react'\nimport useScripts from '../../../state/scripts/useScripts';\n\nexport default function EditorPanel(): ReactElement {\n  const { selectedScript, scriptBody, setScriptBody } = useScripts();\n\n  useEffect(() => {\n    if (!scriptBody && selectedScript) {\n      setScriptBody(selectedScript.content)\n    }\n  }, [selectedScript])\n\n  const handleEditorChange = (newValue: string | undefined) => {\n    setScriptBody(newValue ?? \"\")\n  }\n\n  return (\n    <>\n      {selectedScript && (\n        <>\n          <div className=\"absolute h-full w-full\" key={selectedScript.id}>\n            <Editor\n              height=\"100%\"\n              width=\"100%\"\n              defaultLanguage=\"javascript\"\n              defaultValue={selectedScript.content}\n              theme=\"vs-dark\"\n              onChange={handleEditorChange}\n            />\n          </div>\n        </>\n      )}\n    </>\n  )\n}\n","import { ReactElement } from 'react'\nimport useEditor from '../../../state/editor/useEditor'\n\nexport default function ScenePanel(): ReactElement {\n  const { renderElement, handleClickScene } = useEditor()\n  \n  return (\n    <>\n      {renderElement && (\n        <div\n          id=\"scene\"\n          ref={renderElement}\n          onClick={(e) => handleClickScene(e)}\n        />\n      )}\n    </>\n  )\n}\n","import { ReactElement, useMemo } from \"react\"\nimport useScene from \"../../../state/scene/useScene\"\n\ninterface Props {\n  entity: Engine.EntityProps\n}\n\nfunction HierarchyNode({ entity }: Props): ReactElement {\n  const { selectedEntity, selectEntity } = useScene()\n\n  const isSelected = useMemo(\n    () => selectedEntity?.id === entity.id,\n    [selectedEntity, entity.id]\n  )\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation()\n    selectEntity(entity.id)\n  }\n\n  return (\n    <div\n      className={`\n          p-1\n          rounded-sm\n          transition\n          cursor-pointer\n          select-none\n        text-white\n          text-sm\n          ${isSelected && \"bg-gray-500\"}\n          ${isSelected ? \"hover:bg-gray-600\" : \"hover:bg-gray-500\"}\n    `}\n      onClick={handleClick}\n    >\n      {entity?.name ?? \"__ENTITY__\"}\n    </div>\n  )\n}\n\nexport default HierarchyNode\n","import { ReactElement } from \"react\"\nimport useScene from \"../../../state/scene/useScene\"\nimport HierarchyNode from \"./HierarchyNode\"\n\nexport default function HierarchyPanel(): ReactElement {\n  const { sceneConfig } = useScene()\n  return (\n    <div className=\"panel\">\n      <h4 className=\"panel-label\">Hierarchy</h4>\n      {sceneConfig.entities.map((entity) => (\n        <HierarchyNode key={entity.id} entity={entity} />\n      ))}\n    </div>\n  )\n}\n","import React, { ReactElement } from \"react\"\nimport useScripts from \"../../../state/scripts/useScripts\"\n\nexport default function ProjectPanel(): ReactElement {\n  const { scripts, loadScript, selectedScript } = useScripts()\n  return (\n    <div className=\"panel text-white\">\n      <h4 className=\"panel-label\">Project</h4>\n\n      {/* Scripts */}\n      <details>\n        <summary>Scripts</summary>\n        {scripts.map((s) => (\n          <div\n            className={`p-1\n          rounded-sm\n          transition\n          cursor-pointer\n          select-none\n        text-white\n          ${selectedScript?.id === s.id && \"bg-gray-500\"}\n          ${\n            selectedScript?.id === s.id ? \"hover:bg-gray-600\" : \"hover:bg-gray-500\"\n          }`}\n            onClick={() => loadScript(s.name)}\n            key={s.id}\n          >\n            {s.name}.{s.language}\n          </div>\n        ))}\n      </details>\n\n      {/* Prefabs */}\n      <details>\n        <summary>Prefabs</summary>\n        No prefabs.\n      </details>\n\n      {/* Shaders */}\n      <details>\n        <summary>Shaders</summary>\n        No shaders.\n      </details>\n    </div>\n  )\n}\n","import  { ReactElement } from \"react\"\nimport InspectorPanel from \"../components/inspector/InspectorPanel\"\nimport Nav from \"../components/nav/Nav\"\nimport EditorPanel from \"../components/editor/EditorPanel\"\nimport ScenePanel from \"../components/scene/ScenePanel\"\nimport HierarchyPanel from \"../components/hierarchy/HierarchyPanel\"\nimport ProjectPanel from \"../components/project/ProjectPanel\"\n\nexport default function BrowserEngine(): ReactElement {\n\n  return (\n    <div className=\"w-screen h-screen overflow-hidden\">\n      <Nav />\n      <section\n        className=\"w-full h-full grid\"\n        style={{ gridTemplateColumns: \"1fr 14rem 14rem\" }}\n      >\n        <div className=\"h-full w-full grid relative\">\n          <ScenePanel />\n          <EditorPanel />\n        </div>\n        <aside className=\"grid grid-rows-5\">\n          <div className=\"row-span-3\">\n            <HierarchyPanel />\n          </div>\n          <div className=\"row-span-2\">\n            <ProjectPanel />\n          </div>\n        </aside>\n        <aside className=\"grid\">\n          <InspectorPanel />\n        </aside>\n      </section>\n    </div>\n  )\n}\n","import { EditorProvider } from \"./state/editor/EditorContext\"\nimport { SceneProvider } from \"./state/scene/SceneContext\"\nimport { ScriptProvider } from \"./state/scripts/ScriptContext\"\nimport BrowserEngine from \"./ui/base/BrowserEngine\"\n\nfunction App() {\n  return (\n    <SceneProvider>\n      <ScriptProvider>\n        <EditorProvider>\n          <BrowserEngine />\n        </EditorProvider>\n      </ScriptProvider>\n    </SceneProvider>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}