{"version":3,"sources":["engine/core/Component.ts","engine/components/Mover.ts","engine/components/Transform.ts","engine/core/ComponentManager.ts","state/scripts/ScriptContext.tsx","utils/script.utils.ts","state/editor/EditorContext.tsx","engine/core/MaterialManager.ts","engine/core/GeometryManager.ts","engine/core/Entity.ts","engine/core/SceneManager.ts","utils/index.ts","engine/core/CameraManager.ts","engine/core/EngineContext.ts","state/scene/SceneContext.tsx","state/scene/useScene.tsx","utils/entity.utils.ts","state/scripts/useScripts.tsx","state/editor/useEditor.tsx","ui/components/Controls.tsx","ui/components/TreeViewPanel.tsx","ui/components/ScriptPanel.tsx","ui/base/BrowserEngine.tsx","App.tsx","index.tsx"],"names":["Component","entity","this","props","Mover","speed","transform","components","position","x","Transform","THREE","rotation","scale","applyMatrix","mesh","setX","setY","y","setZ","z","setRotationFromEuler","applyPosition","applyRotation","applyScale","ComponentManager","instance","registerComponent","component","console","debug","name","toLowerCase","componentType","componentProps","getComponent","Object","entries","forEach","prop","Array","isArray","length","componentInstance","init","error","initialValue","scripts","selectedScript","undefined","setScripts","setSelectedScript","script","compileScripts","ScriptContext","createContext","ScriptProvider","children","useState","formattedScript","formatScriptString","NewComponent","eval","setPrototypeOf","log","getPrototypeOf","err","alert","message","useEffect","contextValue","Provider","value","COMPONENT_DEF","generateNewScript","id","uuidv4","language","content","type","replace","EditorContext","EditorProvider","renderElement","useRef","MaterialManager","wireframe","GeometryManager","Entity","initMesh","initComponents","mat","getMaterial","material","geometry","getGeometry","uuid","setComponent","child","SceneManager","isPlaying","_updateComponents","values","update","_scene","_entities","_scenePayload","_selectedEntityID","_axes","_gridHelper","_selectionHelper","add","payload","sceneConfig","entities","find","e","entityID","entityProps","updateIndex","findIndex","setFromObject","_resetScene","remove","_buildEntities","select","object","push","destroy","input","JSON","parse","stringify","buildEntity","CameraManager","renderer","antialias","raycaster","fov","near","far","camera","controls","_setCamera","window","addEventListener","handleResize","scene","setSize","clientWidth","clientHeight","appendChild","domElement","_setControls","_setRaycaster","_runSceneLoop","setAnimationLoop","mouseX","mouseY","pointer","setFromCamera","intersects","intersectObjects","getScene","filter","innerWidth","innerHeight","time","dimensions","getBoundingClientRect","aspect","width","height","updateProjectionMatrix","setPixelRatio","devicePixelRatio","render","updateScene","context","sceneManager","cameraManager","componentManager","materialManager","geometryManager","_renderElement","isInitialized","updateScenePayload","runEditMode","runPlayScene","setup","runEditScene","setScenePayload","updateEntityPayload","handleClick","selectByID","getSelectedEntity","getSelectedEntityPayload","selectedEntityID","setEntities","setSelectedEntityID","setCameraProps","cameraProps","SceneContext","SceneProvider","useMemo","updateSpecificEntity","useScene","useContext","selectedEntity","createEntity","newEntity","addNewEntity","selectEntity","updateEntity","index","updateEntityParent","newParent","useScripts","loadScript","scriptID","s","saveScript","foundScript","createScript","newScript","useEditor","isRunning","setIsRunning","scenePayload","current","toggleRun","runPlayMode","handleClickScene","domRect","target","clientX","clientY","ComponentFieldValue","field","updateField","className","onChange","Number","ComponentNode","updateComponent","map","fieldName","fieldValue","style","minWidth","Controls","setControls","materialType","setMaterialType","geometryType","setGeometryType","propFields","updateComponentFields","newControls","onClick","newMaterial","defaultValue","label","option","newGeometry","TreeNode","isSelected","stopPropagation","TreeViewPanel","ScriptPanel","BrowserEngine","scriptBody","setScriptBody","gridTemplateColumns","ref","defaultLanguage","theme","newValue","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acdfac19.chunk.js","sourcesContent":["import Entity from \"./Entity\";\n\nexport default abstract class Component {\n  entity: Entity;\n\n  constructor(entity: Entity) {\n    this.entity = entity;\n  }\n\n  init(props: Engine.ComponentProps) {\n  }\n\n  abstract update(): void;\n}\n\n// This is only used for generating the BaseComponentType for internal use, \n// when creating Components, extend the abstract Component class instead.\nclass BaseComponent extends Component {\n  entity!: Entity;\n\n  init(props: Engine.ComponentProps) { }\n\n  update() { }\n}\n\nexport type BaseComponentType = typeof BaseComponent;","import Component from '../core/Component';\nimport Entity from '../core/Entity';\nimport Transform from './Transform';\n\ninterface IMoverProps {\n  speed?: number;\n}\nexport default class Mover extends Component {\n  speed: number = 0.05;\n  transform!: Transform;\n\n  init(props: IMoverProps) {\n    this.speed = props?.speed ?? 0.05;\n    this.transform = this.entity.components['transform'] as Transform;\n  }\n\n  update() {\n    this.transform.position.x += this.speed;\n  }\n}","import * as THREE from 'three';\nimport Component from '../core/Component';\nimport Entity from '../core/Entity';\ninterface ITransformProps {\n  position?: THREE.Vector3;\n  rotation?: THREE.Euler;\n  scale?: THREE.Vector3;\n}\n\nexport default class Transform extends Component {\n  entity: Entity;\n\n  public position: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n  public rotation: THREE.Euler = new THREE.Euler(0, 0, 0, 'XYZ');\n  public scale: THREE.Vector3 = new THREE.Vector3(1, 1, 1);\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.entity = entity;\n  }\n\n  init(props?: ITransformProps) {\n    this.position = props?.position ?? this.position;\n    this.rotation = props?.rotation ?? this.rotation;\n    this.scale = props?.scale ?? this.scale;\n    this.applyMatrix();\n  }\n\n  private applyPosition() {\n    this.entity.mesh.position.setX(this.position.x);\n    this.entity.mesh.position.setY(this.position.y);\n    this.entity.mesh.position.setZ(this.position.z);\n  }\n\n  private applyRotation() {\n    this.entity.mesh.setRotationFromEuler(new THREE.Euler(this.rotation.x, this.rotation.y, this.rotation.z));\n  }\n\n  private applyScale() {\n    this.entity.mesh.scale.setX(this.scale.x);\n    this.entity.mesh.scale.setY(this.scale.y);\n    this.entity.mesh.scale.setZ(this.scale.z);\n  }\n\n  private applyMatrix() {\n    if (!this.entity) { return; }\n    this.applyPosition();\n    this.applyRotation();\n    this.applyScale();\n  }\n\n  update() {\n    this.applyMatrix();\n  }\n}\n","import * as THREE from 'three';\nimport Mover from '../components/Mover';\nimport Transform from \"../components/Transform\";\nimport Component, { BaseComponentType } from \"./Component\";\nimport Entity from \"./Entity\";\nexport default class ComponentManager {\n  public static instance: ComponentManager;\n  private components: { [key: string]: BaseComponentType } = {};\n  \n  constructor() {\n    if (ComponentManager.instance) return;\n    ComponentManager.instance = this;\n    this.registerComponent(Transform);\n    this.registerComponent(Mover);\n  }\n\n  public registerComponent(component: BaseComponentType): void {\n    console.debug('registering', component, component.name);\n    this.components[component.name.toLowerCase()] = component;\n  };\n\n  private getComponent(name: Engine.ComponentType): BaseComponentType | null {\n    return this.components[name.toLowerCase()] ?? null;\n  }\n\n  public setComponent(entity: Entity, componentType: Engine.ComponentType, componentProps: Engine.ComponentProps): void {\n    const component = this.getComponent(componentType);\n    if (!component) {\n      console.error(`Component ${componentType} not found`);\n      return;\n    }\n  \n    // Translate vector props \n    Object.entries(componentProps).forEach(([name, prop]) => {\n      if (Array.isArray(prop)) {\n        if (prop.length === 3) {\n          componentProps[name] = new THREE.Vector3(prop[0], prop[1], prop[2]) as any;\n        }\n        else if (prop.length === 2) {\n          componentProps[name] = new THREE.Vector2(prop[0], prop[1]) as any;\n        }\n      }\n    });\n    const componentInstance = new component(entity);\n    componentInstance.init(componentProps);\n    entity.components[componentType] = componentInstance;\n  }\n}","import { Component, ReactElement, useEffect, useState } from 'react';\nimport { createContext } from 'react';\nimport ComponentManager from '../../engine/core/ComponentManager';\nimport { formatScriptString } from '../../utils/script.utils';\n\ninterface IScriptContext {\n  scripts: Engine.Script[];\n  selectedScript: Engine.Script | undefined;\n  setScripts: (scripts: Engine.Script[]) => void;\n  setSelectedScript: (script: Engine.Script | undefined) => void;\n  compileScripts: () => void;\n};\n\nconst initialValue: IScriptContext = {\n  scripts: [],\n  selectedScript: undefined,\n  setScripts: (scripts: Engine.Script[]) => { },\n  setSelectedScript: (script: Engine.Script | undefined) => { },\n  compileScripts: () => { }\n}\n\nexport const ScriptContext = createContext<IScriptContext>(initialValue);\n\nexport const ScriptProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [scripts, setScripts] = useState<Engine.Script[]>([]);\n  const [selectedScript, setSelectedScript] = useState<Engine.Script | undefined>()\n\n  const compileScripts = () => {\n    scripts.forEach(script => {\n      try {\n        const formattedScript = formatScriptString(script);\n        const NewComponent: any = eval(`(${formattedScript})`);\n        Object.setPrototypeOf(NewComponent, Component);\n        console.log(Object.getPrototypeOf(NewComponent));\n        ComponentManager.instance.registerComponent(NewComponent);\n      } catch (err) {\n        alert(err?.message);\n      }\n    }\n    )\n  }\n\n  useEffect(() => {\n    compileScripts();\n  }, [scripts])\n\n  const contextValue = { scripts, setScripts, selectedScript, setSelectedScript, compileScripts };\n\n  return (\n    <ScriptContext.Provider value={contextValue}>\n      {children}\n    </ScriptContext.Provider>\n  );\n};","import { v4 as uuidv4 } from 'uuid';\n\nconst COMPONENT_DEF = `// @defineComponent`;\n\nexport const generateNewScript = (name: string): Engine.Script => {\n  const id = uuidv4();\n  return {\n    id,\n    name,\n    language: 'js',\n    content: `\n      class ${name} {\n        ${COMPONENT_DEF}\n\n        init() {\n\n        }\n\n        update() {\n        \n        }\n      }\n    `,\n    type: 'component'\n  }\n};\n\nexport const formatScriptString = (script: Engine.Script): string => {\n  const formatted = `${script.content}`;\n  return formatted.replace(COMPONENT_DEF, `\n          entity;\n        \n          constructor(entity) {\n            this.entity = entity;\n          }\n        `);\n};","import { ReactElement, useEffect, useRef } from 'react';\nimport { createContext } from 'react';\n\ninterface IEditorContext {\n  renderElement?: React.MutableRefObject<HTMLDivElement | null>;\n};\n\nconst initialValue: IEditorContext = {}\n\nexport const EditorContext = createContext<IEditorContext>(initialValue);\n\nexport const EditorProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const renderElement = useRef<HTMLDivElement>(null)\n  const contextValue = { renderElement };\n\n\n  return (\n    <EditorContext.Provider value={contextValue}>\n      {children}\n    </EditorContext.Provider>\n  );\n};","import * as THREE from 'three';\n\nexport default class MaterialManager {\n  public static instance: MaterialManager;\n\n  constructor() {\n    if (MaterialManager.instance) return;\n    MaterialManager.instance = this;\n  }\n\n  getMaterial(type: Engine.MaterialType): THREE.Material {\n    switch (type) {\n      case 'normal':\n        return new THREE.MeshNormalMaterial();\n      case 'basic':\n        return new THREE.MeshBasicMaterial();\n      case 'phong':\n        return new THREE.MeshPhongMaterial();\n      case 'lambert':\n        return new THREE.MeshLambertMaterial();\n      case 'wireframe':\n        return new THREE.MeshBasicMaterial({ wireframe: true });\n      default:\n        return new THREE.MeshBasicMaterial();\n    }\n  }\n}\n","import * as THREE from 'three';\n\nexport default class GeometryManager {\n  public static instance: GeometryManager;\n\n  constructor() {\n    if (GeometryManager.instance) return;\n    GeometryManager.instance = this;\n  }\n\n  getGeometry(type: Engine.MaterialType): THREE.BufferGeometry {\n    switch (type) {\n      case 'box':\n        return new THREE.BoxBufferGeometry();\n      case 'sphere':\n        return new THREE.SphereBufferGeometry(1, 16, 8);\n      case 'cylinder':\n        return new THREE.CylinderBufferGeometry(1, 1, 1, 16, 1);\n      case 'torus':\n        return new THREE.TorusBufferGeometry(6, 1.1, 10, 32, 6.3);\n      case 'plane':\n        return new THREE.PlaneBufferGeometry(1, 1);\n      case 'tetrahedron':\n        return new THREE.TetrahedronBufferGeometry();\n      case 'octahedron':\n        return new THREE.OctahedronBufferGeometry();\n      case 'dodecahedron':\n        return new THREE.DodecahedronBufferGeometry();\n      case 'icosahedron':\n        return new THREE.IcosahedronBufferGeometry();\n      default:\n        return new THREE.SphereBufferGeometry();\n    }\n  }\n}","import * as THREE from 'three';\nimport Component from './Component';\nimport ComponentManager from './ComponentManager';\nimport MaterialManager from './MaterialManager';\nimport GeometryManager from './GeometryManager';\nimport SceneManager from './SceneManager';\n\nexport default class Entity {\n  public name: string = \"\";\n  public mesh!: THREE.Mesh;\n  public readonly id: Engine.EntityID;\n  public components: Record<Engine.ComponentType, Component> = {};\n\n  constructor(props: Engine.EntityProps) {\n    this.id = props.id;\n    this.name = props.name;\n    this.init(props);\n  }\n\n  init(props: Engine.EntityProps) {\n    this.initMesh(props);\n    this.initComponents(props.components);\n  }\n\n  initMesh(props: Engine.EntityProps) {\n    const mat = MaterialManager.instance.getMaterial(props.material);\n    const geometry = GeometryManager.instance.getGeometry(props.geometry);\n    if (!this.mesh) {\n      this.mesh = new THREE.Mesh(geometry, mat);\n    }\n    else {\n      this.mesh.geometry = geometry;\n      this.mesh.material = mat;\n    }\n    this.mesh.uuid = this.id;\n    this.mesh.name = this.name;\n  }\n\n  initComponents(components: Record<Engine.ComponentType, Engine.ComponentProps>) {\n    this.components = {};\n    Object.entries(components).forEach(([type, props]) => {\n      ComponentManager.instance.setComponent(this, type, props);\n    })\n  }\n\n  // TODO: Implement\n  addChild(child: Entity) { }\n\n  // TODO: Implement\n  destroy() { }\n\n  update() {\n    if (SceneManager.isPlaying()) {\n      this._updateComponents();\n    }\n  }\n\n  private _updateComponents() {\n    Object.values(this.components).forEach((component) => component.update())\n  }\n}","import { throws } from 'assert';\nimport * as THREE from 'three';\nimport { deepClone } from '../../utils';\nimport Entity from \"./Entity\";\n\nexport default class SceneManager {\n  public static instance: SceneManager;\n  private isPlaying: boolean = false; // If true, in play mode, else in edit mode\n  private _scene!: THREE.Scene;\n  private _entities: Entity[] = [];\n  private _scenePayload: Engine.ScenePayload | undefined;\n\n  // Selection\n  private _selectedEntityID: Engine.EntityID | undefined;\n  \n  // Helpers\n  private _axes = new THREE.AxesHelper(2);\n  private _gridHelper = new THREE.GridHelper(60, 6);\n  private _selectionHelper: THREE.BoxHelper | undefined;\n\n  constructor() {\n    if (SceneManager.instance) { return; }\n    SceneManager.instance = this;\n    this._scene = new THREE.Scene();\n    this._scene?.add(this._axes);\n    this._scene?.add(this._gridHelper);\n    this._scene?.add(new THREE.DirectionalLight(0xffffff, 0.6));\n    this._scene?.add(new THREE.AmbientLight(0x555555));\n  }\n\n  static isPlaying() {\n    return SceneManager.instance.isPlaying;\n  }\n\n  getScene(): THREE.Scene {\n    return this._scene;\n  }\n\n  setScenePayload(payload: Engine.ScenePayload) {\n    this._scenePayload = payload;\n  }\n\n  getSelectedEntityPayload(): Engine.EntityProps | undefined {\n    return this._scenePayload?.sceneConfig.entities.find(e => e.id === this._selectedEntityID);\n  }\n\n  updateEntityPayload(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    const updateIndex = this._entities.findIndex(e => e.id === entityID);\n    if (updateIndex === -1) return;\n    this._entities[updateIndex].init(entityProps);\n    this._selectionHelper?.setFromObject(this._entities[updateIndex].mesh);\n  }\n\n  updateScene() {\n    this._entities.forEach(entity => {\n      entity.update();\n    });\n  }\n\n  /** Runs scene in play mode.\n   * \n   *  In play mode, the components in all \n   *  entities are updated each frame.\n   */\n  runPlayScene() {\n    this.isPlaying = true;\n    this._resetScene();\n    this._scene.remove(this._axes);\n    this._scene.remove(this._gridHelper);\n    if (this._selectionHelper) this._scene.remove(this._selectionHelper);\n    \n    this._buildEntities();\n  }\n\n  /** Runs scene in edit mode\n   * \n   *  In edit mode, the scene is reset and all\n   *  entities are reverted to their initial states, \n   *  based on the scenePayload.\n   */\n  runEditScene() {\n    this.isPlaying = false;\n    this._resetScene();\n    this._scene.add(this._axes);\n    this._scene.add(this._gridHelper);\n    if (this._selectionHelper) this._scene.add(this._selectionHelper);\n    this._buildEntities();\n  }\n\n  /** Select an entity by ID */\n  selectByID(entityID: Engine.EntityID) {\n    console.debug('selecting by id', entityID);\n    this.select(this._entities.find(e => e.id === entityID)?.mesh ?? undefined);\n  }\n\n  /** Sets Entity with corresponding object as selected,\n   *  if no object is passed, deselects any selected entity\n   * @param object THREE.Object3D\n   */\n  select(object?: THREE.Object3D) {\n    if (this.isPlaying) return;\n    if (!object && this._selectionHelper && this._selectedEntityID) {\n      this._scene.remove(this._selectionHelper);\n      this._selectedEntityID = undefined;\n      return;\n    }\n    \n    if (object) {\n      this._selectedEntityID = object.uuid;\n      if (!this._selectionHelper) {\n        this._selectionHelper = new THREE.BoxHelper(object, 0xffff00);\n        this._scene.add(this._selectionHelper);\n        return;\n      }\n      \n      this._selectionHelper?.setFromObject(object);\n      this._scene.add(this._selectionHelper);\n    }\n  }\n\n  getSelectedEntity(): Engine.EntityID | undefined {\n    return this._selectedEntityID;\n  }\n\n  buildEntity(props: Engine.EntityProps): Entity {\n    const entity = new Entity(props);\n    this._entities.push(entity);\n    this._scene.add(entity.mesh);\n    return entity;\n  }\n\n  private _resetScene() {\n    this._entities.forEach(entity => {\n      this._scene.remove(entity.mesh);\n      entity.destroy();\n    });\n    this._entities = [];\n  }\n\n  private _buildEntities() {\n    if (!this._scenePayload) return;\n    // This prevents all of the strange object mutation\n    const localPayloadCopy = deepClone<Engine.ScenePayload>(this._scenePayload);\n    localPayloadCopy.sceneConfig.entities.forEach(entityProps => {\n      this.buildEntity(entityProps);\n    });\n  }\n}","export const deepClone = <T>(input: T): T => {\n  return JSON.parse(JSON.stringify(input)) as T\n}","import * as THREE from 'three';\nimport SceneManager from './SceneManager';\n\nexport default class CameraManager {\n  public static instance: CameraManager;\n  private renderer = new THREE.WebGLRenderer({ antialias: true });\n  private renderElement: HTMLElement | undefined;\n  private raycaster: THREE.Raycaster = new THREE.Raycaster();\n  private fov = 60;\n  private near = 0.01;\n  private far = 20000;\n  private camera!: THREE.PerspectiveCamera;\n  private controls: any;\n\n\n  constructor() {\n    if (CameraManager.instance) return CameraManager.instance;\n    CameraManager.instance = this;\n    this._setCamera();\n    window.addEventListener('resize', () => this.handleResize());\n  }\n\n  setup(renderElement: HTMLElement, scene: THREE.Scene) {\n    this.renderer.setSize(renderElement.clientWidth, renderElement.clientHeight);\n    this.renderElement = renderElement;\n    this.renderElement.appendChild(this.renderer.domElement);\n    this.handleResize();\n    this._setControls();\n    this._setRaycaster();\n    this._runSceneLoop(scene);\n  }\n\n  resetCamera() {\n    this.renderer.setAnimationLoop(null);\n  }\n\n  handleClick(mouseX: number, mouseY: number) {\n    const pointer = new THREE.Vector2(mouseX, mouseY);\n    this.raycaster.setFromCamera(pointer, this.camera);\n    const intersects = this.raycaster.intersectObjects(SceneManager.instance.getScene().children, true).filter(e => e.object.type === 'Mesh');\n    \n    if (intersects.length > 0) {\n      SceneManager.instance.select(intersects[0].object);\n    }\n    else {\n      SceneManager.instance.select();\n    }\n  }\n\n  private _setCamera() {\n    if (!this.renderElement) {\n      this.camera = new THREE.PerspectiveCamera(this.fov, window.innerWidth / window.innerHeight, this.near, this.far);\n      this.camera.position.y = 10;\n      this.camera.rotation.x = -0.1;\n    }\n  }\n\n  private _runSceneLoop(scene: THREE.Scene) {\n    this.renderer.setAnimationLoop((time: number) => this.update(scene));\n  }\n\n  private _setRaycaster() {\n    this.raycaster = new THREE.Raycaster();\n  }\n\n  private _setControls() {\n    this.camera.position.z = 50;\n  }\n\n  handleResize() {\n    if (!this.renderElement) return;\n    const dimensions = this.renderElement.getBoundingClientRect();\n    this.camera.aspect = dimensions.width / dimensions.height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.renderElement.clientWidth, this.renderElement.clientHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n  }\n\n  update(scene: THREE.Scene) {\n    this.renderer.render(scene, this.camera);\n    SceneManager.instance.updateScene();\n  }\n}","import CameraManager from \"./CameraManager\";\nimport ComponentManager from \"./ComponentManager\";\nimport GeometryManager from \"./GeometryManager\";\nimport MaterialManager from \"./MaterialManager\";\nimport SceneManager from \"./SceneManager\";\n\nclass EngineContext {\n  sceneManager: SceneManager;\n  cameraManager: CameraManager;\n  componentManager: ComponentManager;\n  materialManager: MaterialManager;\n  geometryManager: GeometryManager;\n  private _renderElement!: HTMLElement;\n  private isInitialized = false;\n\n  constructor() {\n    this.sceneManager = new SceneManager();\n    this.cameraManager = new CameraManager();\n    this.componentManager = new ComponentManager();\n    this.materialManager = new MaterialManager();\n    this.geometryManager = new GeometryManager();\n  }\n\n  init(renderElement: HTMLElement, payload?: Engine.ScenePayload) {\n    if (this.isInitialized) return;\n    this._renderElement = renderElement;\n    if (payload) this.updateScenePayload(payload);\n    this.runEditMode();\n    this.isInitialized = true;\n  }\n\n  runPlayMode() {\n    this.sceneManager.runPlayScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  runEditMode() {\n    console.debug('ran run edit mode');\n    this.sceneManager.runEditScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  updateScenePayload(payload: Engine.ScenePayload) {\n    this.sceneManager.setScenePayload(payload);\n  }\n\n  updateSpecificEntity(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    this.sceneManager.updateEntityPayload(entityID, entityProps);\n  }\n\n  addNewEntity(entity: Engine.EntityProps) {\n    this.sceneManager.buildEntity(entity);\n\n  }\n\n  isPlaying(): boolean {\n    return SceneManager.isPlaying() ?? false\n  }\n\n  handleClick(mouseX: number, mouseY: number) {\n    this.cameraManager.handleClick(mouseX, mouseY);\n  }\n\n  selectEntity(entityID: Engine.EntityID) {\n    this.sceneManager.selectByID(entityID);\n  }\n\n  getSelectedEntity(): Engine.EntityID | undefined {\n    return this.sceneManager.getSelectedEntity();\n  }\n\n  getSelectedEntityProps(): Engine.EntityProps | undefined {\n    return this.sceneManager.getSelectedEntityPayload();\n  }\n}\n\nconst context = new EngineContext();\n\nexport default context;","import * as THREE from 'three';\nimport { ReactElement, useEffect, useMemo } from 'react';\nimport { createContext } from 'react';\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport context from '../../engine/core/EngineContext';\n\ninterface ISceneContext {\n  sceneConfig: Engine.SceneConfig;\n  setEntities: (props: Engine.EntityProps[]) => void;\n  selectedEntityID: string | null;\n  setSelectedEntityID: (entityID: string | null) => void;\n  setCameraProps: (cameraProps: Engine.CameraProps) => void;\n};\n\nconst initialValue = {\n  sceneConfig: {\n    entities: [] as Engine.EntityProps[],\n    camera: {\n      position: new THREE.Vector3(),\n      fov: 70,\n      near: 0.1,\n      far: 1000,\n      controls: \"orbit\" as Engine.ControlType\n    }\n  },\n  selectedEntityID: null,\n  setEntities: (entities: Engine.EntityProps[]) => { },\n  setSelectedEntityID: (entityID: string | null) => { },\n  setCameraProps: (cameraProps: Engine.CameraProps) => { }\n};\n\nexport const SceneContext = createContext<ISceneContext>(initialValue);\n\nexport const SceneProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [cameraProps, setCameraProps] = useState<Engine.CameraProps>({\n    position: new THREE.Vector3(),\n    fov: 70,\n    near: 0.1,\n    far: 1000,\n    controls: \"orbit\" as Engine.ControlType\n  });\n\n  const [entities, setEntities] = useState<Engine.EntityProps[]>([\n    {\n      id: uuidv4(),\n      name: \"Entity A\",\n      material: 'normal',\n      geometry: 'box',\n      children: [],\n      components: {\n        \"transform\": {\n          position: {x: 3, y: 0.2, z: 1},\n          rotation: {x: 3, y: 3, z: 3},\n          scale: {x: 2, y: 1, z: 1},\n        },\n      }\n    },\n  ])\n  const [selectedEntityID, setSelectedEntityID] = useState<string | null>(null);\n\n  const sceneConfig = useMemo(() => (\n    {\n      entities,\n      camera: cameraProps\n    }\n  ), [entities, cameraProps]);\n\n  useEffect(() => {\n    if (selectedEntityID) {\n      const entityProps = entities.find(e => e.id === selectedEntityID);\n      if (!entityProps) return;\n      context.updateSpecificEntity(selectedEntityID, entityProps);\n    }\n  }, [sceneConfig])\n\n  const contextValue = {\n    sceneConfig,\n    selectedEntityID,\n    setEntities,\n    setCameraProps,\n    setSelectedEntityID\n  }\n  return (\n    <SceneContext.Provider value={contextValue}>\n      {children}\n    </SceneContext.Provider>\n  );\n}","import { useContext, useMemo} from \"react\";\nimport { SceneContext } from \"./SceneContext\";\nimport context from \"../../engine/core/EngineContext\";\nimport { generateNewEntity } from \"../../utils/entity.utils\";\n\nconst useScene = () => {\n  const { sceneConfig, setEntities, selectedEntityID, setSelectedEntityID } = useContext(SceneContext);\n\n\n  const selectEntity = (id: Engine.EntityID) => {\n    if (id === selectedEntityID) {\n      context.selectEntity('')\n      setSelectedEntityID('')\n      return;\n    }\n    context.selectEntity(id);\n    setSelectedEntityID(id);\n  };\n\n  const selectedEntity: Engine.EntityProps | null = useMemo(() => {\n    return sceneConfig.entities.find(e => e.id === selectedEntityID) ?? null;\n  }, [sceneConfig, selectedEntityID]);\n\n\n  const updateEntity = (entity: Engine.EntityProps) => {\n    const index = sceneConfig.entities.findIndex(e => e.id === entity.id);\n    if (index === -1) {\n      console.error(`Couldn't find ${entity.id} in sceneConfig.entities`);\n    };\n    sceneConfig.entities[index] = entity;\n    setEntities([...sceneConfig.entities]);\n  }\n\n  const updateEntityParent = (child: Engine.EntityID, newParent: Engine.EntityID | null) => {\n    // TODO: Implement this\n  }\n\n  const createEntity = () => {\n    const newEntity: Engine.EntityProps = generateNewEntity();\n    setEntities([...sceneConfig.entities, newEntity]);\n    context.addNewEntity(newEntity);\n  }\n\n  return {\n    sceneConfig,\n    selectedEntity, \n    createEntity, \n    selectEntity,\n    updateEntity,\n    updateEntityParent,\n  };\n}\n\nexport default useScene;","import { v4 as uuidv4 } from 'uuid';\nexport const generateNewEntity = (): Engine.EntityProps => {\n  const id = uuidv4();\n  return {\n    id,\n    name: \"New Entity\",\n    geometry: 'box',\n    material: 'normal',\n    children: [],\n    components: {\n      transform: {\n        position: { x: 0, y: 0, z: 0 },\n        rotation: { x: 0, y: 0, z: 0 },\n        scale: { x: 1, y: 1, z: 1 },\n      }\n    },\n  };\n}","import Component from '../../engine/core/Component';\nimport ComponentManager from '../../engine/core/ComponentManager';\nimport { useContext, useEffect, useState } from \"react\";\nimport { formatScriptString, generateNewScript } from \"../../utils/script.utils\";\nimport { ScriptContext } from \"./ScriptContext\";\nimport { BaseComponentType } from '../../engine/core/Component';\n\nconst useScripts = () => {\n  const { scripts, setScripts, selectedScript, setSelectedScript, compileScripts } = useContext(ScriptContext);\n\n  const loadScript = (scriptID: string) => {\n    const script = scripts.find(s => s.id === scriptID);\n    setSelectedScript(script);\n  };\n  \n  const saveScript = (script: Engine.Script) => {\n    const foundScript = scripts.find(s => s.id === script.id);\n    if (!foundScript) return;\n    foundScript.content = script.content;\n    compileScripts();\n  };\n  \n  const createScript = (name: string) => {\n    const newScript = generateNewScript(name);\n    setScripts([...scripts, newScript]);\n  };\n\n\n  return {\n    scripts,\n    setScripts,\n    selectedScript,\n    setSelectedScript,\n    loadScript,\n    saveScript,\n    createScript,\n  };\n}\n\nexport default useScripts;","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport context from \"../../engine/core/EngineContext\";\nimport SceneManager from \"../../engine/core/SceneManager\";\nimport useScene from \"../scene/useScene\";\nimport useScripts from \"../scripts/useScripts\";\nimport { EditorContext } from \"./EditorContext\";\n\nconst useEditor = () => {\n  const { scripts } = useScripts();\n  const { sceneConfig, selectEntity } = useScene();\n  const { renderElement } = useContext(EditorContext);\n  const [isRunning, setIsRunning] = useState(context.isPlaying());\n\n  const scenePayload = useMemo(() => ({ sceneConfig, scripts }), [sceneConfig, scripts]);\n\n  useEffect(() => {\n    const init = () => {\n      if (!renderElement || !renderElement.current || !scenePayload) { return; }\n      context.init(renderElement.current, scenePayload);\n    };\n    init();\n  }, [renderElement]);\n\n  useEffect(() => {\n    context.updateScenePayload(scenePayload);\n  }, [scenePayload])\n\n  const toggleRun = () => {\n    if (!renderElement || !renderElement.current) { return; }\n    if (SceneManager.isPlaying()) {\n      setIsRunning(false);\n      context.runEditMode();\n      return;\n    }\n    context.runPlayMode();\n    setIsRunning(true);\n  };\n\n  const handleClickScene = (e: React.MouseEvent) => {\n    const canvas: HTMLCanvasElement = e.target as unknown as HTMLCanvasElement;\n    const domRect: DOMRect = canvas.getBoundingClientRect();\n    const [mouseX, mouseY]: [number, number] = [((e.clientX - domRect.x) / domRect.width) * 2 - 1, -((e.clientY - domRect.y) / domRect.height) * 2 + 1];\n    context.handleClick(mouseX, mouseY);\n    selectEntity(context.getSelectedEntity() ?? '');\n  }\n\n  return {\n    renderElement,\n    isRunning,\n    toggleRun,\n    handleClickScene\n  };\n}\n\nexport default useEditor;","import { useState } from 'react';\nimport { useEffect } from 'react';\nimport useEditor from '../../state/editor/useEditor';\nimport useScene from '../../state/scene/useScene';\n\ninterface ComponentFieldValueProps {\n  field: Engine.ComponentPropType;\n  updateField: (field: Engine.ComponentPropType) => void;\n}\n\nconst ComponentFieldValue = ({ field, updateField }: ComponentFieldValueProps): React.ReactElement => {\n\n  const handleUpdateField = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (typeof field === 'number') {\n      updateField(Number(e.target.value));\n      return;\n    }\n\n    if (typeof field === 'string') {\n      updateField(e.target.value);\n    }\n  }\n\n  if (typeof field === 'number' || typeof field === 'string') return (\n    <div className=\"bg-gray-700 text-white px-1  w-max\">\n      <input\n        type={typeof field === 'string' ? 'string' : 'number'}\n        value={typeof field === 'number' ? field : field}\n        onChange={handleUpdateField}\n        className=\"bg-gray-700 w-16 font-mono text-xs\"\n      />\n    </div>\n  );\n\n  if (Array.isArray(field)) return (\n    <div>array field</div>\n  );\n\n  return (\n    <div className=\"bg-gray-700 text-white px-2 grid grid-cols-3 gap-1\">\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">x:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.x}\n          onChange={e => updateField({ x: Number(e.target.value), y: field?.y ?? 0, z: field?.z ?? 0 })}\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">y:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.y}\n          onChange={e => updateField({ x: field?.x ?? 0, y: Number(e.target.value), z: field?.z ?? 0 })}\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">z:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.z}\n          onChange={e => updateField({ x: field?.x ?? 0, y: field?.y ?? 0, z: Number(e.target.value) })}\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n    </div>\n  )\n}\n\ninterface ComponentNodeProps {\n  componentType: Engine.ComponentType;\n  componentProps: Engine.ComponentProps;\n  updateComponent: (type: Engine.ComponentType, field: string, value: Engine.ComponentPropType) => void;\n}\n\nconst ComponentNode = ({\n  componentType,\n  componentProps,\n  updateComponent\n}: ComponentNodeProps): React.ReactElement => {\n\n  return (\n    <div className=\"bg-gray-800 text-white p-2\">\n      <h3 className=\"mb-2\">{componentType}</h3>\n      <div className=\"space-y-2\">\n        {\n          Object.entries(componentProps).map(([fieldName, fieldValue]) => (\n            <div key={fieldName} className=\"flex space-x-2\">\n              <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>{fieldName}</p>\n              <ComponentFieldValue field={fieldValue} updateField={e => updateComponent(componentType, fieldName, e)} />\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default function Controls() {\n  const { isRunning } = useEditor()\n  const { selectedEntity, updateEntity, sceneConfig,  } = useScene();\n\n  const [controls, setControls] = useState<Record<Engine.ComponentType, Engine.ComponentProps>>({});\n  const [materialType, setMaterialType] = useState<Engine.MaterialType>('normal');\n  const [geometryType, setGeometryType] = useState<Engine.GeometryType>('box');\n\n  useEffect(() => {\n    if (!selectedEntity) return;\n    setMaterialType(selectedEntity.material);\n    setGeometryType(selectedEntity.geometry);\n  }, [selectedEntity])\n\n  // * Handles populating all correct value fields when selecting entity */\n  useEffect(() => {\n    console.debug('update component fields');\n    const updateComponentFields = (entity: Engine.EntityProps) => {\n      const propFields: Record<Engine.ComponentType, Engine.ComponentProps> = {};\n      Object.entries(entity.components).forEach(([type, props]) => {\n        propFields[type] = props;\n      });\n      setControls({ ...propFields } as any);\n    }\n    if (selectedEntity) updateComponentFields(selectedEntity);\n  }, [selectedEntity, sceneConfig, isRunning]);\n\n  const addComponent = () => {\n    if (!selectedEntity) return;\n    // const newComponentName = 'mover';\n    // const newComponentProps: Engine.ComponentProps = {\n    //   speed: 0.05\n    // };\n    const newComponentName = 'rotator';\n    const newComponentProps: Engine.ComponentProps = {\n      speed: 0.05\n    };\n    selectedEntity.components[newComponentName] = newComponentProps;\n    updateEntity(selectedEntity);\n  }\n\n  const updateComponent = (type: Engine.ComponentType, field: string, value: Engine.ComponentPropType) => {\n    const newControls = { ...controls };\n    newControls[type][field] = value;\n    setControls(newControls);\n    if (selectedEntity) {\n      selectedEntity.components = newControls;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  const updateMaterial = (newMaterial: Engine.MaterialType) => {\n    setMaterialType(newMaterial);\n    if (selectedEntity) {\n      selectedEntity.material = newMaterial;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  const updateGeometry = (newGeometry: Engine.GeometryType) => {\n    setGeometryType(newGeometry);\n    if (selectedEntity) {\n      selectedEntity.geometry = newGeometry;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  // todo: context.sceneManager.getSelectedEntityPayload()?.components?.transform.rotation\n\n  if (!selectedEntity) return (<div className=\"bg-gray-900 h-full flex flex-col space-y-1\"></div>)\n\n  const materialOptions: { label: string, value: string }[] = [\n    {\n      label: 'Normal',\n      value: 'normal',\n    },\n    {\n      label: 'Basic',\n      value: 'basic',\n    },\n    {\n      label: 'Lambert',\n      value: 'lambert',\n    },\n    {\n      label: 'Phong',\n      value: 'phong'\n    }\n  ]\n\n  const geometryOptions: { label: string, value: string }[] = [\n    {\n      label: 'Box',\n      value: 'box'\n    },\n    {\n      label: 'Sphere',\n      value: 'sphere',\n    },\n    {\n      label: 'Torus',\n      value: 'torus',\n    },\n  ]\n\n  return (\n    <div className=\"bg-gray-900 h-full flex flex-col space-y-8\">\n      <section className=\"space-y-2\">\n        {\n          Object.entries(controls).map(([type, props]) =>\n            <ComponentNode\n              componentType={type}\n              componentProps={props}\n              key={type}\n              updateComponent={updateComponent}\n            />\n          )\n        }\n      </section>\n      <section>\n        <button\n          className=\"block mx-auto mt-6\"\n          onClick={addComponent}>Add component\n        </button>\n      </section>\n      <section>\n        <div className=\"bg-gray-800 text-white p-2\">\n          <h3>Mesh</h3>\n          <div className=\"space-y-2\">\n            <div className=\"flex space-x-2 items-center\">\n              <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>Material</p>\n              <select onChange={e => updateMaterial(e.target.value)} defaultValue={materialType}>\n                {\n                  materialOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)\n                }\n              </select>\n            </div>\n            <div className=\"flex space-x-2 items-center\">\n              <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>Geometry</p>\n              <select onChange={e => updateGeometry(e.target.value)} value={geometryType}>\n                {\n                  geometryOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)\n                }\n              </select>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div >\n  )\n}","import React, { useMemo, ReactElement } from 'react';\nimport useScene from '../../state/scene/useScene';\n\ninterface Props {\n  entity: Engine.EntityProps;\n}\n\nfunction TreeNode({ entity }: Props): ReactElement {\n  const { selectedEntity, selectEntity } = useScene();\n\n  const isSelected = useMemo(() => selectedEntity?.id === entity.id, [selectedEntity, entity.id]);\n  \n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    selectEntity(entity.id);\n  }\n\n  return (\n    <div\n      className={`\n    p-2\n    rounded-md\n    transition\n    cursor-pointer\n    select-none\n    ${isSelected ? 'hover:bg-indigo-500' : 'hover:bg-indigo-400'}\n    ${isSelected && 'bg-indigo-300'}`} onClick={handleClick}>\n      <h1>{entity?.name ?? '__ENTITY__'}</h1>\n    </div>\n  )\n\n}\n\nexport default function TreeViewPanel(): ReactElement {\n  const { sceneConfig } = useScene();\n  return (\n    <div className=\"bg-indigo-200 p-1.5 space-y-1\">\n      {\n        sceneConfig.entities.map(entity =>\n          <TreeNode\n            key={entity.id}\n            entity={entity}\n          />\n        )\n      }\n    </div>\n  )\n}\n","import { ReactElement } from 'react'\nimport useScripts from '../../state/scripts/useScripts'\n\nexport default function ScriptPanel(): ReactElement {\n  const { scripts, loadScript } = useScripts()\n\n  return (\n    <div className=\"bg-indigo-400 h-full p-2\">\n      {\n        scripts.map(s => (\n          <div\n            className=\"transition hover:bg-indigo-600 p-2 rounded-md\"\n            onClick={() => loadScript(s.id)} key={s.id}>\n            {s.name}.{s.language}\n          </div>)\n        )\n      }\n    </div>\n  )\n}\n","import React, { ReactElement, useState } from 'react'\nimport useEditor from '../../state/editor/useEditor'\nimport useScene from '../../state/scene/useScene'\nimport useScripts from '../../state/scripts/useScripts'\nimport Controls from '../components/Controls'\nimport TreeViewPanel from '../components/TreeViewPanel'\nimport Editor from \"@monaco-editor/react\";\nimport ScriptPanel from '../components/ScriptPanel'\n\nexport default function BrowserEngine(): ReactElement {\n  const { createEntity, selectedEntity } = useScene()\n  const { renderElement, toggleRun, isRunning, handleClickScene } = useEditor()\n  const { createScript,  selectedScript, loadScript, saveScript } = useScripts();\n  \n  const [scriptBody, setScriptBody] = useState('');\n  \n  const handleEditorChange = (newValue: string | undefined) => {\n    setScriptBody(newValue ?? '')\n  }\n\n  return (\n    <main className=\"w-screen h-screen overflow-hidden\">\n      <div className={`h-0.5 transition bg-red-600 ${isRunning && 'bg-green-500'}`}></div>\n      <nav className=\"bg-gray-900 p-2 space-x-2\">\n        <button onClick={toggleRun} className=\"primary\">{isRunning ? 'Stop' : 'Run'} Scene</button>\n        <button onClick={createEntity} className=\"secondary\">Add Entity</button>\n        <button onClick={() => createScript('foo')} className=\"secondary\">Add Script</button>\n      </nav>\n      <section className=\"w-full h-full grid\" style={{ gridTemplateColumns: '1fr 17rem' }}>\n        {renderElement && (<div className=\"bg-gray-600\" id=\"scene\" ref={renderElement} onClick={(e) => handleClickScene(e)} />)}\n        <div className=\"grid grid-rows-5 gap-0 5\">\n          <TreeViewPanel />\n          <div className=\"row-span-2\">\n            <Controls />\n          </div>\n          <div className=\"row-span-2\">\n            <ScriptPanel />\n          </div>\n        </div>\n      </section>\n      {selectedScript && (<section className=\"fixed inset-0 grid place-items-center\" onClick={() => loadScript('')}>\n        <div\n          onClick={e => {\n            e.stopPropagation();\n            saveScript({ ...selectedScript, content: scriptBody });\n          }}\n          className=\"absolute top-10 right-10 py-2 px-4 cursor-pointer rounded-md bg-indigo-600 text-white\">\n          Save\n        </div>\n        <div className=\"bg-black monaco-editor\" style={{ width: '60vw' }} onClick={e => e.stopPropagation()}>\n          <Editor\n            height=\"90vh\"\n            defaultLanguage=\"javascript\"\n            defaultValue={selectedScript.content}\n            theme=\"vs-dark\"\n            onChange={handleEditorChange} />\n        </div>\n      </section>)}\n    </main>\n  )\n}\n","import { EditorProvider } from \"./state/editor/EditorContext\";\nimport { SceneProvider } from \"./state/scene/SceneContext\";\nimport { ScriptProvider } from \"./state/scripts/ScriptContext\";\nimport BrowserEngine from \"./ui/base/BrowserEngine\";\n\nfunction App() {\n  return (\n    <SceneProvider>\n      <ScriptProvider>\n        <EditorProvider>\n          <BrowserEngine />\n        </EditorProvider>\n      </ScriptProvider>\n    </SceneProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}