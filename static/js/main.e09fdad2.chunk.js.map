{"version":3,"sources":["state/editor/EditorContext.tsx","engine/core/Component.ts","engine/components/Mover.ts","engine/components/Transform.ts","engine/core/ComponentManager.ts","engine/core/MaterialManager.ts","engine/core/GeometryManager.ts","engine/core/Entity.ts","engine/core/SceneManager.ts","utils/index.ts","engine/core/CameraManager.ts","engine/core/EngineContext.ts","state/scene/SceneContext.tsx","state/scripts/ScriptContext.tsx","state/scene/useScene.tsx","utils/entity.utils.ts","state/scripts/useScripts.tsx","state/editor/useEditor.tsx","ui/components/Controls.tsx","ui/components/TreeViewPanel.tsx","ui/base/BrowserEngine.tsx","App.tsx","index.tsx"],"names":["initialValue","EditorContext","createContext","EditorProvider","children","contextValue","renderElement","useRef","Provider","value","Component","entity","_entity","this","props","Mover","name","speed","transform","components","rotation","x","y","Transform","position","THREE","scale","applyMatrix","mesh","setX","setY","setZ","z","setRotationFromEuler","applyPosition","applyRotation","applyScale","ComponentManager","instance","registerComponent","component","componentType","componentProps","getComponent","Object","entries","forEach","prop","Array","isArray","length","componentInstance","init","console","error","MaterialManager","type","wireframe","GeometryManager","Entity","id","initMesh","initComponents","mat","getMaterial","material","geometry","getGeometry","uuid","setComponent","child","SceneManager","isPlaying","_updateComponents","values","update","_scene","_entities","_scenePayload","_selectedEntityID","_axes","_gridHelper","_selectionHelper","add","payload","sceneConfig","entities","find","e","entityID","entityProps","updateIndex","findIndex","setFromObject","_resetScene","remove","_buildEntities","debug","select","undefined","object","push","destroy","input","JSON","parse","stringify","buildEntity","CameraManager","renderer","antialias","raycaster","fov","near","far","camera","controls","_setCamera","window","addEventListener","handleResize","scene","setSize","clientWidth","clientHeight","appendChild","domElement","_setControls","_setRaycaster","_runSceneLoop","setAnimationLoop","mouseX","mouseY","pointer","setFromCamera","intersects","intersectObjects","getScene","filter","innerWidth","innerHeight","time","dimensions","getBoundingClientRect","aspect","width","height","updateProjectionMatrix","setPixelRatio","devicePixelRatio","render","updateScene","context","sceneManager","cameraManager","componentManager","materialManager","geometryManager","_renderElement","isInitialized","updateScenePayload","runEditMode","runPlayScene","setup","runEditScene","setScenePayload","updateEntityPayload","handleClick","selectByID","getSelectedEntity","getSelectedEntityPayload","selectedEntityID","setEntities","setSelectedEntityID","setCameraProps","cameraProps","SceneContext","SceneProvider","useState","uuidv4","useMemo","useEffect","updateSpecificEntity","scripts","setScripts","ScriptContext","ScriptProvider","useScene","useContext","selectedEntity","createEntity","newEntity","addNewEntity","selectEntity","updateEntity","index","updateEntityParent","newParent","useScripts","loadScript","saveScript","script","createScript","useEditor","isRunning","setIsRunning","scenePayload","current","toggleRun","runPlayMode","handleClickScene","domRect","target","clientX","clientY","ComponentFieldValue","field","updateField","className","onChange","Number","ComponentNode","updateComponent","map","fieldName","fieldValue","style","minWidth","Controls","setControls","materialType","setMaterialType","geometryType","setGeometryType","propFields","updateComponentFields","newControls","onClick","newMaterial","defaultValue","label","option","newGeometry","TreeNode","isSelected","stopPropagation","TreeViewPanel","BrowserEngine","gridTemplateColumns","ref","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e09fdad2.chunk.js","sourcesContent":["import { ReactElement, useEffect, useRef } from 'react';\nimport { createContext } from 'react';\n\ninterface IEditorContext {\n  renderElement?: React.MutableRefObject<HTMLDivElement | null>;\n};\n\nconst initialValue: IEditorContext = {}\n\nexport const EditorContext = createContext<IEditorContext>(initialValue);\n\nexport const EditorProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const renderElement = useRef<HTMLDivElement>(null)\n  const contextValue = { renderElement };\n\n\n  return (\n    <EditorContext.Provider value={contextValue}>\n      {children}\n    </EditorContext.Provider>\n  );\n};","import Entity from \"./Entity\";\n\nexport default abstract class Component {\n  _entity: Entity;\n\n  constructor(entity: Entity) {\n    this._entity = entity;\n  }\n\n  init(props: Engine.ComponentProps) {\n  }\n\n  abstract update(): void;\n}\n\n// This is only used for generating the BaseComponentType for internal use, \n// when creating Components, extend the abstract Component class instead.\nclass BaseComponent extends Component {\n  _entity!: Entity;\n\n  init(props: Engine.ComponentProps) { }\n\n  update() { }\n}\n\nexport type BaseComponentType = typeof BaseComponent;","import * as THREE from 'three';\nimport Component from '../core/Component';\nimport Entity from '../core/Entity';\nimport Transform from './Transform';\n\ninterface IMoverProps {\n  speed?: number;\n}\nexport default class Mover extends Component {\n  name = \"mover\";\n  _entity!: Entity;\n  speed: number = 0.05;\n  transform!: Transform;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this._entity = entity;\n  }\n\n  init(props: IMoverProps) {\n    this.speed = props?.speed ?? 0.05;\n    this.transform = this._entity.components['transform'] as Transform;\n  }\n\n  update() {\n    this.transform.rotation.x += this.speed;\n    this.transform.rotation.y += this.speed;\n  }\n}","import * as THREE from 'three';\nimport Component from '../core/Component';\nimport Entity from '../core/Entity';\ninterface ITransformProps {\n  position?: THREE.Vector3;\n  rotation?: THREE.Euler;\n  scale?: THREE.Vector3;\n}\n\nexport default class Transform extends Component {\n  name = \"transform\";\n  _entity: Entity;\n\n  public position: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n  public rotation: THREE.Euler = new THREE.Euler(0, 0, 0, 'XYZ');\n  public scale: THREE.Vector3 = new THREE.Vector3(1, 1, 1);\n\n  constructor(entity: Entity) {\n    super(entity);\n    this._entity = entity;\n  }\n\n  init(props?: ITransformProps) {\n    this.position = props?.position ?? this.position;\n    this.rotation = props?.rotation ?? this.rotation;\n    this.scale = props?.scale ?? this.scale;\n    this.applyMatrix();\n  }\n\n  private applyPosition() {\n    this._entity.mesh.position.setX(this.position.x);\n    this._entity.mesh.position.setY(this.position.y);\n    this._entity.mesh.position.setZ(this.position.z);\n  }\n\n  private applyRotation() {\n    this._entity.mesh.setRotationFromEuler(new THREE.Euler(this.rotation.x, this.rotation.y, this.rotation.z));\n  }\n\n  private applyScale() {\n    this._entity.mesh.scale.setX(this.scale.x);\n    this._entity.mesh.scale.setY(this.scale.y);\n    this._entity.mesh.scale.setZ(this.scale.z);\n  }\n\n  private applyMatrix() {\n    if (!this._entity) { return; }\n    this.applyPosition();\n    this.applyRotation();\n    this.applyScale();\n  }\n\n  update() {\n    this.applyMatrix();\n  }\n}\n","import * as THREE from 'three';\nimport Mover from '../components/Mover';\nimport Transform from \"../components/Transform\";\nimport Component, { BaseComponentType } from \"./Component\";\nimport Entity from \"./Entity\";\nexport default class ComponentManager {\n  public static instance: ComponentManager;\n  private components: { [key: string]: BaseComponentType } = {};\n  \n  constructor() {\n    if (ComponentManager.instance) return;\n    ComponentManager.instance = this;\n    this.registerComponent('transform', Transform);\n    this.registerComponent('mover', Mover);\n  }\n\n  public registerComponent(name: Engine.ComponentType, component: BaseComponentType): void {\n    this.components[name] = component;\n  };\n\n  private getComponent(name: Engine.ComponentType): BaseComponentType | null {\n    return this.components[name] ?? null;\n  }\n\n  public setComponent(entity: Entity, componentType: Engine.ComponentType, componentProps: Engine.ComponentProps): void {\n    const component = this.getComponent(componentType);\n    if (!component) {\n      console.error(`Component ${componentType} not found`);\n      return;\n    }\n  \n    // Translate vector props \n    Object.entries(componentProps).forEach(([name, prop]) => {\n      if (Array.isArray(prop)) {\n        if (prop.length === 3) {\n          componentProps[name] = new THREE.Vector3(prop[0], prop[1], prop[2]) as any;\n        }\n        else if (prop.length === 2) {\n          componentProps[name] = new THREE.Vector2(prop[0], prop[1]) as any;\n        }\n      }\n    });\n    const componentInstance = new component(entity);\n    componentInstance.init(componentProps);\n    entity.components[componentType] = componentInstance;\n  }\n}","import * as THREE from 'three';\n\nexport default class MaterialManager {\n  public static instance: MaterialManager;\n\n  constructor() {\n    if (MaterialManager.instance) return;\n    MaterialManager.instance = this;\n  }\n\n  getMaterial(type: Engine.MaterialType): THREE.Material {\n    switch (type) {\n      case 'normal':\n        return new THREE.MeshNormalMaterial();\n      case 'basic':\n        return new THREE.MeshBasicMaterial();\n      case 'phong':\n        return new THREE.MeshPhongMaterial();\n      case 'lambert':\n        return new THREE.MeshLambertMaterial();\n      case 'wireframe':\n        return new THREE.MeshBasicMaterial({ wireframe: true });\n      default:\n        return new THREE.MeshBasicMaterial();\n    }\n  }\n}\n","import * as THREE from 'three';\n\nexport default class GeometryManager {\n  public static instance: GeometryManager;\n\n  constructor() {\n    if (GeometryManager.instance) return;\n    GeometryManager.instance = this;\n  }\n\n  getGeometry(type: Engine.MaterialType): THREE.BufferGeometry {\n    switch (type) {\n      case 'box':\n        return new THREE.BoxBufferGeometry();\n      case 'sphere':\n        return new THREE.SphereBufferGeometry(1, 16, 8);\n      case 'cylinder':\n        return new THREE.CylinderBufferGeometry(1, 1, 1, 16, 1);\n      case 'torus':\n        return new THREE.TorusBufferGeometry(6, 1.1, 10, 32, 6.3);\n      case 'plane':\n        return new THREE.PlaneBufferGeometry(1, 1);\n      case 'tetrahedron':\n        return new THREE.TetrahedronBufferGeometry();\n      case 'octahedron':\n        return new THREE.OctahedronBufferGeometry();\n      case 'dodecahedron':\n        return new THREE.DodecahedronBufferGeometry();\n      case 'icosahedron':\n        return new THREE.IcosahedronBufferGeometry();\n      default:\n        return new THREE.SphereBufferGeometry();\n    }\n  }\n}","import * as THREE from 'three';\nimport Component from './Component';\nimport ComponentManager from './ComponentManager';\nimport MaterialManager from './MaterialManager';\nimport GeometryManager from './GeometryManager';\nimport SceneManager from './SceneManager';\n\nexport default class Entity {\n  public name: string = \"\";\n  public mesh!: THREE.Mesh;\n  public readonly id: Engine.EntityID;\n  public components: Record<Engine.ComponentType, Component> = {};\n\n  constructor(props: Engine.EntityProps) {\n    this.id = props.id;\n    this.name = props.name;\n    this.init(props);\n  }\n\n  init(props: Engine.EntityProps) {\n    this.initMesh(props);\n    this.initComponents(props.components);\n  }\n\n  initMesh(props: Engine.EntityProps) {\n    const mat = MaterialManager.instance.getMaterial(props.material);\n    const geometry = GeometryManager.instance.getGeometry(props.geometry);\n    if (!this.mesh) {\n      this.mesh = new THREE.Mesh(geometry, mat);\n    }\n    else {\n      this.mesh.geometry = geometry;\n      this.mesh.material = mat;\n    }\n    this.mesh.uuid = this.id;\n    this.mesh.name = this.name;\n  }\n\n  initComponents(components: Record<Engine.ComponentType, Engine.ComponentProps>) {\n    this.components = {};\n    Object.entries(components).forEach(([type, props]) => {\n      ComponentManager.instance.setComponent(this, type, props);\n    })\n  }\n\n  // TODO: Implement\n  addChild(child: Entity) { }\n\n  // TODO: Implement\n  destroy() { }\n\n  update() {\n    if (SceneManager.isPlaying()) {\n      this._updateComponents();\n    }\n  }\n\n  private _updateComponents() {\n    Object.values(this.components).forEach((component) => component.update())\n  }\n}","import { throws } from 'assert';\nimport * as THREE from 'three';\nimport { deepClone } from '../../utils';\nimport Entity from \"./Entity\";\n\nexport default class SceneManager {\n  public static instance: SceneManager;\n  private isPlaying: boolean = false; // If true, in play mode, else in edit mode\n  private _scene!: THREE.Scene;\n  private _entities: Entity[] = [];\n  private _scenePayload: Engine.ScenePayload | undefined;\n\n  // Selection\n  private _selectedEntityID: Engine.EntityID | undefined;\n  \n  // Helpers\n  private _axes = new THREE.AxesHelper(2);\n  private _gridHelper = new THREE.GridHelper(60, 6);\n  private _selectionHelper: THREE.BoxHelper | undefined;\n\n  constructor() {\n    if (SceneManager.instance) { return; }\n    SceneManager.instance = this;\n    this._scene = new THREE.Scene();\n    this._scene?.add(this._axes);\n    this._scene?.add(this._gridHelper);\n    this._scene?.add(new THREE.DirectionalLight(0xffffff, 0.6));\n    this._scene?.add(new THREE.AmbientLight(0x555555));\n  }\n\n  static isPlaying() {\n    return SceneManager.instance.isPlaying;\n  }\n\n  getScene(): THREE.Scene {\n    return this._scene;\n  }\n\n  setScenePayload(payload: Engine.ScenePayload) {\n    this._scenePayload = payload;\n  }\n\n  getSelectedEntityPayload(): Engine.EntityProps | undefined {\n    return this._scenePayload?.sceneConfig.entities.find(e => e.id === this._selectedEntityID);\n  }\n\n  updateEntityPayload(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    const updateIndex = this._entities.findIndex(e => e.id === entityID);\n    if (updateIndex === -1) return;\n    this._entities[updateIndex].init(entityProps);\n    this._selectionHelper?.setFromObject(this._entities[updateIndex].mesh);\n  }\n\n  updateScene() {\n    this._entities.forEach(entity => {\n      entity.update();\n    });\n  }\n\n  /** Runs scene in play mode.\n   * \n   *  In play mode, the components in all \n   *  entities are updated each frame.\n   */\n  runPlayScene() {\n    this.isPlaying = true;\n    this._resetScene();\n    this._scene.remove(this._axes);\n    this._scene.remove(this._gridHelper);\n    if (this._selectionHelper) this._scene.remove(this._selectionHelper);\n    \n    this._buildEntities();\n  }\n\n  /** Runs scene in edit mode\n   * \n   *  In edit mode, the scene is reset and all\n   *  entities are reverted to their initial states, \n   *  based on the scenePayload.\n   */\n  runEditScene() {\n    this.isPlaying = false;\n    this._resetScene();\n    this._scene.add(this._axes);\n    this._scene.add(this._gridHelper);\n    if (this._selectionHelper) this._scene.add(this._selectionHelper);\n    this._buildEntities();\n  }\n\n  /** Select an entity by ID */\n  selectByID(entityID: Engine.EntityID) {\n    console.debug('selecting by id', entityID);\n    this.select(this._entities.find(e => e.id === entityID)?.mesh ?? undefined);\n  }\n\n  /** Sets Entity with corresponding object as selected,\n   *  if no object is passed, deselects any selected entity\n   * @param object THREE.Object3D\n   */\n  select(object?: THREE.Object3D) {\n    if (this.isPlaying) return;\n    if (!object && this._selectionHelper && this._selectedEntityID) {\n      this._scene.remove(this._selectionHelper);\n      this._selectedEntityID = undefined;\n      return;\n    }\n    \n    if (object) {\n      this._selectedEntityID = object.uuid;\n      if (!this._selectionHelper) {\n        this._selectionHelper = new THREE.BoxHelper(object, 0xffff00);\n        this._scene.add(this._selectionHelper);\n        return;\n      }\n      \n      this._selectionHelper?.setFromObject(object);\n      this._scene.add(this._selectionHelper);\n    }\n  }\n\n  getSelectedEntity(): Engine.EntityID | undefined {\n    return this._selectedEntityID;\n  }\n\n  buildEntity(props: Engine.EntityProps): Entity {\n    const entity = new Entity(props);\n    this._entities.push(entity);\n    this._scene.add(entity.mesh);\n    return entity;\n  }\n\n  private _resetScene() {\n    this._entities.forEach(entity => {\n      this._scene.remove(entity.mesh);\n      entity.destroy();\n    });\n    this._entities = [];\n  }\n\n  private _buildEntities() {\n    if (!this._scenePayload) return;\n    // This prevents all of the strange object mutation\n    const localPayloadCopy = deepClone<Engine.ScenePayload>(this._scenePayload);\n    localPayloadCopy.sceneConfig.entities.forEach(entityProps => {\n      this.buildEntity(entityProps);\n    });\n  }\n}","export const deepClone = <T>(input: T): T => {\n  return JSON.parse(JSON.stringify(input)) as T\n}","import * as THREE from 'three';\nimport SceneManager from './SceneManager';\n\nexport default class CameraManager {\n  public static instance: CameraManager;\n  private renderer = new THREE.WebGLRenderer({ antialias: true });\n  private renderElement: HTMLElement | undefined;\n  private raycaster: THREE.Raycaster = new THREE.Raycaster();\n  private fov = 60;\n  private near = 0.01;\n  private far = 20000;\n  private camera!: THREE.PerspectiveCamera;\n  private controls: any;\n\n\n  constructor() {\n    if (CameraManager.instance) return CameraManager.instance;\n    CameraManager.instance = this;\n    this._setCamera();\n    window.addEventListener('resize', () => this.handleResize());\n  }\n\n  setup(renderElement: HTMLElement, scene: THREE.Scene) {\n    this.renderer.setSize(renderElement.clientWidth, renderElement.clientHeight);\n    this.renderElement = renderElement;\n    this.renderElement.appendChild(this.renderer.domElement);\n    this.handleResize();\n    this._setControls();\n    this._setRaycaster();\n    this._runSceneLoop(scene);\n  }\n\n  resetCamera() {\n    this.renderer.setAnimationLoop(null);\n  }\n\n  handleClick(mouseX: number, mouseY: number) {\n    const pointer = new THREE.Vector2(mouseX, mouseY);\n    this.raycaster.setFromCamera(pointer, this.camera);\n    const intersects = this.raycaster.intersectObjects(SceneManager.instance.getScene().children, true).filter(e => e.object.type === 'Mesh');\n    \n    if (intersects.length > 0) {\n      SceneManager.instance.select(intersects[0].object);\n    }\n    else {\n      SceneManager.instance.select();\n    }\n  }\n\n  private _setCamera() {\n    if (!this.renderElement) {\n      this.camera = new THREE.PerspectiveCamera(this.fov, window.innerWidth / window.innerHeight, this.near, this.far);\n      this.camera.position.y = 10;\n      this.camera.rotation.x = -0.1;\n    }\n  }\n\n  private _runSceneLoop(scene: THREE.Scene) {\n    this.renderer.setAnimationLoop((time: number) => this.update(scene));\n  }\n\n  private _setRaycaster() {\n    this.raycaster = new THREE.Raycaster();\n  }\n\n  private _setControls() {\n    this.camera.position.z = 50;\n  }\n\n  handleResize() {\n    if (!this.renderElement) return;\n    const dimensions = this.renderElement.getBoundingClientRect();\n    this.camera.aspect = dimensions.width / dimensions.height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.renderElement.clientWidth, this.renderElement.clientHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n  }\n\n  update(scene: THREE.Scene) {\n    this.renderer.render(scene, this.camera);\n    SceneManager.instance.updateScene();\n  }\n}","import CameraManager from \"./CameraManager\";\nimport ComponentManager from \"./ComponentManager\";\nimport GeometryManager from \"./GeometryManager\";\nimport MaterialManager from \"./MaterialManager\";\nimport SceneManager from \"./SceneManager\";\n\nclass EngineContext {\n  sceneManager: SceneManager;\n  cameraManager: CameraManager;\n  componentManager: ComponentManager;\n  materialManager: MaterialManager;\n  geometryManager: GeometryManager;\n  private _renderElement!: HTMLElement;\n  private isInitialized = false;\n\n  constructor() {\n    this.sceneManager = new SceneManager();\n    this.cameraManager = new CameraManager();\n    this.componentManager = new ComponentManager();\n    this.materialManager = new MaterialManager();\n    this.geometryManager = new GeometryManager();\n  }\n\n  init(renderElement: HTMLElement, payload?: Engine.ScenePayload) {\n    if (this.isInitialized) return;\n    this._renderElement = renderElement;\n    if (payload) this.updateScenePayload(payload);\n    this.runEditMode();\n    this.isInitialized = true;\n  }\n\n  runPlayMode() {\n    this.sceneManager.runPlayScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  runEditMode() {\n    console.debug('ran run edit mode');\n    this.sceneManager.runEditScene();\n    this.cameraManager.setup(this._renderElement, this.sceneManager.getScene());\n  }\n\n  updateScenePayload(payload: Engine.ScenePayload) {\n    this.sceneManager.setScenePayload(payload);\n  }\n\n  updateSpecificEntity(entityID: Engine.EntityID, entityProps: Engine.EntityProps) {\n    this.sceneManager.updateEntityPayload(entityID, entityProps);\n  }\n\n  addNewEntity(entity: Engine.EntityProps) {\n    this.sceneManager.buildEntity(entity);\n\n  }\n\n  isPlaying(): boolean {\n    return SceneManager.isPlaying() ?? false\n  }\n\n  handleClick(mouseX: number, mouseY: number) {\n    this.cameraManager.handleClick(mouseX, mouseY);\n  }\n\n  selectEntity(entityID: Engine.EntityID) {\n    this.sceneManager.selectByID(entityID);\n  }\n\n  getSelectedEntity(): Engine.EntityID | undefined {\n    return this.sceneManager.getSelectedEntity();\n  }\n\n  getSelectedEntityProps(): Engine.EntityProps | undefined {\n    return this.sceneManager.getSelectedEntityPayload();\n  }\n}\n\nconst context = new EngineContext();\n\nexport default context;","import * as THREE from 'three';\nimport { ReactElement, useEffect, useMemo } from 'react';\nimport { createContext } from 'react';\nimport { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport context from '../../engine/core/EngineContext';\n\ninterface ISceneContext {\n  sceneConfig: Engine.SceneConfig;\n  setEntities: (props: Engine.EntityProps[]) => void;\n  selectedEntityID: string | null;\n  setSelectedEntityID: (entityID: string | null) => void;\n  setCameraProps: (cameraProps: Engine.CameraProps) => void;\n};\n\nconst initialValue = {\n  sceneConfig: {\n    entities: [] as Engine.EntityProps[],\n    camera: {\n      position: new THREE.Vector3(),\n      fov: 70,\n      near: 0.1,\n      far: 1000,\n      controls: \"orbit\" as Engine.ControlType\n    }\n  },\n  selectedEntityID: null,\n  setEntities: (entities: Engine.EntityProps[]) => { },\n  setSelectedEntityID: (entityID: string | null) => { },\n  setCameraProps: (cameraProps: Engine.CameraProps) => { }\n};\n\nexport const SceneContext = createContext<ISceneContext>(initialValue);\n\nexport const SceneProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [cameraProps, setCameraProps] = useState<Engine.CameraProps>({\n    position: new THREE.Vector3(),\n    fov: 70,\n    near: 0.1,\n    far: 1000,\n    controls: \"orbit\" as Engine.ControlType\n  });\n\n  const [entities, setEntities] = useState<Engine.EntityProps[]>([\n    {\n      id: uuidv4(),\n      name: \"Entity A\",\n      material: 'normal',\n      geometry: 'box',\n      children: [],\n      components: {\n        \"transform\": {\n          position: {x: 3, y: 0.2, z: 1},\n          rotation: {x: 3, y: 3, z: 3},\n          scale: {x: 2, y: 1, z: 1},\n        },\n      }\n    },\n  ])\n  const [selectedEntityID, setSelectedEntityID] = useState<string | null>(null);\n\n  const sceneConfig = useMemo(() => (\n    {\n      entities,\n      camera: cameraProps\n    }\n  ), [entities, cameraProps]);\n\n  useEffect(() => {\n    if (selectedEntityID) {\n      const entityProps = entities.find(e => e.id === selectedEntityID);\n      if (!entityProps) return;\n      context.updateSpecificEntity(selectedEntityID, entityProps);\n    }\n  }, [sceneConfig])\n\n  const contextValue = {\n    sceneConfig,\n    selectedEntityID,\n    setEntities,\n    setCameraProps,\n    setSelectedEntityID\n  }\n  return (\n    <SceneContext.Provider value={contextValue}>\n      {children}\n    </SceneContext.Provider>\n  );\n}","import { ReactElement, useState } from 'react';\nimport { createContext } from 'react';\n\ninterface IScriptContext {\n  scripts: Engine.Script[];\n  setScripts: (scripts: Engine.Script[]) => void;\n};\n\nconst initialValue: IScriptContext = {\n  scripts: [],\n  setScripts: (scripts: Engine.Script[]) => { }\n}\n\nexport const ScriptContext = createContext<IScriptContext>(initialValue);\n\nexport const ScriptProvider = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const [scripts, setScripts] = useState<Engine.Script[]>([]);\n  const contextValue = { scripts, setScripts };\n  \n  return (\n    <ScriptContext.Provider value={contextValue}>\n      {children}\n    </ScriptContext.Provider>\n  );\n};","import { useContext, useMemo} from \"react\";\nimport { SceneContext } from \"./SceneContext\";\nimport context from \"../../engine/core/EngineContext\";\nimport { generateNewEntity } from \"../../utils/entity.utils\";\n\nconst useScene = () => {\n  const { sceneConfig, setEntities, selectedEntityID, setSelectedEntityID } = useContext(SceneContext);\n\n\n  const selectEntity = (id: Engine.EntityID) => {\n    if (id === selectedEntityID) {\n      context.selectEntity('')\n      setSelectedEntityID('')\n      return;\n    }\n    context.selectEntity(id);\n    setSelectedEntityID(id);\n  };\n\n  const selectedEntity: Engine.EntityProps | null = useMemo(() => {\n    return sceneConfig.entities.find(e => e.id === selectedEntityID) ?? null;\n  }, [sceneConfig, selectedEntityID]);\n\n\n  const updateEntity = (entity: Engine.EntityProps) => {\n    const index = sceneConfig.entities.findIndex(e => e.id === entity.id);\n    if (index === -1) {\n      console.error(`Couldn't find ${entity.id} in sceneConfig.entities`);\n    };\n    sceneConfig.entities[index] = entity;\n    setEntities([...sceneConfig.entities]);\n  }\n\n  const updateEntityParent = (child: Engine.EntityID, newParent: Engine.EntityID | null) => {\n    // TODO: Implement this\n  }\n\n  const createEntity = () => {\n    const newEntity: Engine.EntityProps = generateNewEntity();\n    setEntities([...sceneConfig.entities, newEntity]);\n    context.addNewEntity(newEntity);\n  }\n\n  return {\n    sceneConfig,\n    selectedEntity, \n    createEntity, \n    selectEntity,\n    updateEntity,\n    updateEntityParent,\n  };\n}\n\nexport default useScene;","import { v4 as uuidv4 } from 'uuid';\nexport const generateNewEntity = (): Engine.EntityProps => {\n  const id = uuidv4();\n  return {\n    id,\n    name: \"New Entity\",\n    geometry: 'box',\n    material: 'normal',\n    children: [],\n    components: {\n      transform: {\n        position: { x: 0, y: 0, z: 0 },\n        rotation: { x: 0, y: 0, z: 0 },\n        scale: { x: 1, y: 1, z: 1 },\n      }\n    },\n  };\n}","import { useContext } from \"react\";\nimport { ScriptContext } from \"./ScriptContext\";\n\nconst useScripts = () => {\n  const { scripts, setScripts } = useContext(ScriptContext);\n\n  const loadScript = (name: string) => {\n    // TODO: implement this\n  };\n  const saveScript = (script: Engine.Script) => {\n    // TODO: implement this\n  };\n  const createScript = (name: string) => {\n    // TODO: implement this\n  };\n\n  return {\n    scripts,\n    setScripts,\n    loadScript,\n    saveScript,\n    createScript\n  };\n}\n\nexport default useScripts;","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport context from \"../../engine/core/EngineContext\";\nimport SceneManager from \"../../engine/core/SceneManager\";\nimport useScene from \"../scene/useScene\";\nimport useScripts from \"../scripts/useScripts\";\nimport { EditorContext } from \"./EditorContext\";\n\nconst useEditor = () => {\n  const { scripts } = useScripts();\n  const { sceneConfig, selectEntity } = useScene();\n  const { renderElement } = useContext(EditorContext);\n  const [isRunning, setIsRunning] = useState(context.isPlaying());\n\n  const scenePayload = useMemo(() => ({ sceneConfig, scripts }), [sceneConfig, scripts]);\n\n  useEffect(() => {\n    const init = () => {\n      if (!renderElement || !renderElement.current || !scenePayload) { return; }\n      context.init(renderElement.current, scenePayload);\n    };\n    init();\n  }, [renderElement]);\n\n  useEffect(() => {\n    context.updateScenePayload(scenePayload);\n  }, [scenePayload])\n\n  const toggleRun = () => {\n    if (!renderElement || !renderElement.current) { return; }\n    if (SceneManager.isPlaying()) {\n      setIsRunning(false);\n      context.runEditMode();\n      return;\n    }\n    context.runPlayMode();\n    setIsRunning(true);\n  };\n\n  const handleClickScene = (e: React.MouseEvent) => {\n    const canvas: HTMLCanvasElement = e.target as unknown as HTMLCanvasElement;\n    const domRect: DOMRect = canvas.getBoundingClientRect();\n    const [mouseX, mouseY]: [number, number] = [((e.clientX - domRect.x) / domRect.width) * 2 - 1, -((e.clientY - domRect.y) / domRect.height) * 2 + 1];\n    context.handleClick(mouseX, mouseY);\n    selectEntity(context.getSelectedEntity() ?? '');\n  }\n\n  return {\n    renderElement,\n    isRunning,\n    toggleRun,\n    handleClickScene\n  };\n}\n\nexport default useEditor;","import { useState } from 'react';\nimport { useEffect } from 'react';\nimport useEditor from '../../state/editor/useEditor';\nimport useScene from '../../state/scene/useScene';\n\ninterface ComponentFieldValueProps {\n  field: Engine.ComponentPropType;\n  updateField: (field: Engine.ComponentPropType) => void;\n}\n\nconst ComponentFieldValue = ({ field, updateField }: ComponentFieldValueProps): React.ReactElement => {\n\n  const handleUpdateField = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (typeof field === 'number') {\n      updateField(Number(e.target.value));\n      return;\n    }\n\n    if (typeof field === 'string') {\n      updateField(e.target.value);\n    }\n  }\n\n  if (typeof field === 'number' || typeof field === 'string') return (\n    <div className=\"bg-gray-700 text-white px-1  w-max\">\n      <input\n        type={typeof field === 'string' ? 'string' : 'number'}\n        value={typeof field === 'number' ? field : field}\n        onChange={handleUpdateField}\n        className=\"bg-gray-700 w-16 font-mono text-xs\"\n      />\n    </div>\n  );\n\n  if (Array.isArray(field)) return (\n    <div>array field</div>\n  );\n\n  return (\n    <div className=\"bg-gray-700 text-white px-2 grid grid-cols-3 gap-1\">\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">x:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.x}\n          onChange={e => updateField({ x: Number(e.target.value), y: field?.y ?? 0, z: field?.z ?? 0 })}\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">y:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.y}\n          onChange={e => updateField({ x: field?.x ?? 0, y: Number(e.target.value), z: field?.z ?? 0 })}\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n      <pre className=\"text-xs p-0 m-0\">\n        <span className=\"pr-2 text-xs text-gray-400\">z:</span>\n        <input\n          type={typeof field === 'string' ? 'string' : 'number'}\n          value={field.z}\n          onChange={e => updateField({ x: field?.x ?? 0, y: field?.y ?? 0, z: Number(e.target.value) })}\n          className=\"bg-gray-700 w-12 font-mono text-xs\"\n        />\n      </pre>\n    </div>\n  )\n}\n\ninterface ComponentNodeProps {\n  componentType: Engine.ComponentType;\n  componentProps: Engine.ComponentProps;\n  updateComponent: (type: Engine.ComponentType, field: string, value: Engine.ComponentPropType) => void;\n}\n\nconst ComponentNode = ({\n  componentType,\n  componentProps,\n  updateComponent\n}: ComponentNodeProps): React.ReactElement => {\n\n  return (\n    <div className=\"bg-gray-800 text-white p-2\">\n      <h3 className=\"mb-2\">{componentType}</h3>\n      <div className=\"space-y-2\">\n        {\n          Object.entries(componentProps).map(([fieldName, fieldValue]) => (\n            <div key={fieldName} className=\"flex space-x-2\">\n              <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>{fieldName}</p>\n              <ComponentFieldValue field={fieldValue} updateField={e => updateComponent(componentType, fieldName, e)} />\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default function Controls() {\n  const { isRunning } = useEditor()\n  const { selectedEntity, updateEntity, sceneConfig,  } = useScene();\n\n  const [controls, setControls] = useState<Record<Engine.ComponentType, Engine.ComponentProps>>({});\n  const [materialType, setMaterialType] = useState<Engine.MaterialType>('normal');\n  const [geometryType, setGeometryType] = useState<Engine.GeometryType>('box');\n\n  useEffect(() => {\n    if (!selectedEntity) return;\n    setMaterialType(selectedEntity.material);\n    setGeometryType(selectedEntity.geometry);\n  }, [selectedEntity])\n\n  // * Handles populating all correct value fields when selecting entity */\n  useEffect(() => {\n    console.debug('update component fields');\n    const updateComponentFields = (entity: Engine.EntityProps) => {\n      const propFields: Record<Engine.ComponentType, Engine.ComponentProps> = {};\n      Object.entries(entity.components).forEach(([type, props]) => {\n        propFields[type] = props;\n      });\n      setControls({ ...propFields } as any);\n    }\n    if (selectedEntity) updateComponentFields(selectedEntity);\n  }, [selectedEntity, sceneConfig, isRunning]);\n\n  const addComponent = () => {\n    if (!selectedEntity) return;\n    const newComponentName = 'mover';\n    const newComponentProps: Engine.ComponentProps = {\n      speed: 0.05\n    };\n    selectedEntity.components[newComponentName] = newComponentProps;\n    updateEntity(selectedEntity);\n  }\n\n  const updateComponent = (type: Engine.ComponentType, field: string, value: Engine.ComponentPropType) => {\n    const newControls = { ...controls };\n    newControls[type][field] = value;\n    setControls(newControls);\n    if (selectedEntity) {\n      selectedEntity.components = newControls;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  const updateMaterial = (newMaterial: Engine.MaterialType) => {\n    setMaterialType(newMaterial);\n    if (selectedEntity) {\n      selectedEntity.material = newMaterial;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  const updateGeometry = (newGeometry: Engine.GeometryType) => {\n    setGeometryType(newGeometry);\n    if (selectedEntity) {\n      selectedEntity.geometry = newGeometry;\n      updateEntity({ ...selectedEntity });\n    }\n  }\n\n  // todo: context.sceneManager.getSelectedEntityPayload()?.components?.transform.rotation\n\n  if (!selectedEntity) return (<div className=\"bg-gray-900 h-full flex flex-col space-y-1\"></div>)\n\n  const materialOptions: { label: string, value: string }[] = [\n    {\n      label: 'Normal',\n      value: 'normal',\n    },\n    {\n      label: 'Basic',\n      value: 'basic',\n    },\n    {\n      label: 'Lambert',\n      value: 'lambert',\n    },\n    {\n      label: 'Phong',\n      value: 'phong'\n    }\n  ]\n\n  const geometryOptions: { label: string, value: string }[] = [\n    {\n      label: 'Box',\n      value: 'box'\n    },\n    {\n      label: 'Sphere',\n      value: 'sphere',\n    },\n    {\n      label: 'Torus',\n      value: 'torus',\n    },\n  ]\n\n  return (\n    <div className=\"bg-gray-900 h-full flex flex-col space-y-8\">\n      <section className=\"space-y-2\">\n        {\n          Object.entries(controls).map(([type, props]) =>\n            <ComponentNode\n              componentType={type}\n              componentProps={props}\n              key={type}\n              updateComponent={updateComponent}\n            />\n          )\n        }\n      </section>\n      <section>\n        <button\n          className=\"block mx-auto mt-6\"\n          onClick={addComponent}>Add component\n        </button>\n      </section>\n      <section>\n        <div className=\"bg-gray-800 text-white p-2\">\n          <h3>Mesh</h3>\n          <div className=\"space-y-2\">\n            <div className=\"flex space-x-2 items-center\">\n              <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>Material</p>\n              <select onChange={e => updateMaterial(e.target.value)} defaultValue={materialType}>\n                {\n                  materialOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)\n                }\n              </select>\n            </div>\n            <div className=\"flex space-x-2 items-center\">\n              <p className=\"text-xs font-mono text-gray-200\" style={{ minWidth: '10ch' }}>Geometry</p>\n              <select onChange={e => updateGeometry(e.target.value)} value={geometryType}>\n                {\n                  geometryOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>)\n                }\n              </select>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div >\n  )\n}","import React, { useMemo, ReactElement } from 'react';\nimport useScene from '../../state/scene/useScene';\n\ninterface Props {\n  entity: Engine.EntityProps;\n}\n\nfunction TreeNode({ entity }: Props): ReactElement {\n  const { selectedEntity, selectEntity } = useScene();\n\n  const isSelected = useMemo(() => selectedEntity?.id === entity.id, [selectedEntity, entity.id]);\n  \n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    selectEntity(entity.id);\n  }\n\n  return (\n    <div\n      className={`\n    p-2\n    rounded-md\n    transition\n    cursor-pointer\n    select-none\n    ${isSelected ? 'hover:bg-indigo-500' : 'hover:bg-indigo-400'}\n    ${isSelected && 'bg-indigo-300'}`} onClick={handleClick}>\n      <h1>{entity?.name ?? '__ENTITY__'}</h1>\n    </div>\n  )\n\n}\n\nexport default function TreeViewPanel(): ReactElement {\n  const { sceneConfig } = useScene();\n  return (\n    <div className=\"bg-indigo-200 p-1.5 space-y-1\">\n      {\n        sceneConfig.entities.map(entity =>\n          <TreeNode\n            key={entity.id}\n            entity={entity}\n          />\n        )\n      }\n    </div>\n  )\n}\n","import React, { ReactElement } from 'react'\nimport useEditor from '../../state/editor/useEditor'\nimport useScene from '../../state/scene/useScene'\nimport Controls from '../components/Controls'\nimport TreeViewPanel from '../components/TreeViewPanel'\n\nexport default function BrowserEngine(): ReactElement {\n  const { createEntity, selectedEntity } = useScene()\n  const { renderElement, toggleRun, isRunning, handleClickScene } = useEditor()\n\n  return (\n    <main className=\"w-screen h-screen overflow-hidden\">\n      <div className={`h-0.5 transition bg-red-600 ${isRunning && 'bg-green-500'}`}></div>\n      <nav className=\"bg-gray-900 p-2 space-x-2\">\n        <button onClick={toggleRun} className=\"primary\">{isRunning ? 'Stop' : 'Run'} Scene</button>\n        <button onClick={createEntity} className=\"secondary\">Add Entity</button>\n      </nav>\n      <section className=\"w-full h-full grid\" style={{ gridTemplateColumns: '1fr 17rem' }}>\n        {renderElement && (<div className=\"bg-gray-600\" id=\"scene\" ref={renderElement} onClick={(e) => handleClickScene(e)} />)}\n        <div className=\"grid grid-rows-3 gap-0 5\">\n          <TreeViewPanel />\n          <div className=\"row-span-2\">\n            <Controls key={selectedEntity?.id ?? 'controls'} />\n          </div>\n        </div>\n      </section>\n    </main>\n  )\n}\n","import { EditorProvider } from \"./state/editor/EditorContext\";\nimport { SceneProvider } from \"./state/scene/SceneContext\";\nimport { ScriptProvider } from \"./state/scripts/ScriptContext\";\nimport BrowserEngine from \"./ui/base/BrowserEngine\";\n\nfunction App() {\n  return (\n    <SceneProvider>\n      <ScriptProvider>\n        <EditorProvider>\n          <BrowserEngine />\n        </EditorProvider>\n      </ScriptProvider>\n    </SceneProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}